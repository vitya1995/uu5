import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from 'uu5g04';
import "uu5g04-bricks";
import Calls from "./calls.js";

import './cmd-viewer.less';

export const CmdViewer = createReactClass({

  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.LoadMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.Bricks.CmdViewer',
    classNames: {
      main: 'plus4u5-bricks-cmd-viewer',
    },
    calls: {
      onLoad: "loadCmd"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    url: PropTypes.string.isRequired,
    params: PropTypes.object,
    theme: PropTypes.string,
    minRows: PropTypes.number,
    maxRows: PropTypes.number,
    rows: PropTypes.number,
    hideMarks: PropTypes.bool,
    loadMethod: PropTypes.oneOf(['get', 'post'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      url: null,
      params: null,
      theme: "chrome",
      minRows: null,
      maxRows: 50,
      rows: null,
      hideMarks: false,
      loadMethod: 'get'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    this.setCalls(Calls);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  getOnLoadData_(props) {
    return {
      url: props.url,
      params: props.params,
      loadMethod: props.loadMethod.toLowerCase()
    };
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this.getLoadFeedbackChildren(dtoOut => {
      return UU5.Common.Tools.findComponent('UU5.CodeKit.JsonEditor',
        UU5.Common.Tools.merge({}, this.getMainPropsToPass(), {
          value: dtoOut,
          format: "pretty",
          readOnly: true,
          theme: this.props.theme,
          minRows: this.props.minRows,
          maxRows: this.props.rows ? null : this.props.maxRows,
          rows: this.props.rows,
          ref_: (editor) => {
            if (!this.props.hideMarks) {
              // TODO not really good
              setTimeout(() => {
                let aceEditor = editor._textInput.editor;
                aceEditor.getSession().setFoldStyle("markbegin");
              }, 1000);
            }
          }
        })
      );
    });
  }
  //@@viewOff:render
});

export default CmdViewer;
