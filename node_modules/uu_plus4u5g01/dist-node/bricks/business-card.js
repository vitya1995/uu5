import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from "prop-types";
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import * as Plus4U5 from 'uu_plus4u5g01';
import Calls from './calls.js';

import './business-card.less';
import UserPhoto from './user-photo.js';

export const BusinessCard = createReactClass({

  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.IdentityMixin,
    UU5.Common.LoadMixin,
    UU5.Common.ColorSchemaMixin,
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.Bricks.BusinessCard',
    classNames: {
      main: 'plus4u5-bricks-business-card'
    },
    calls: {
      onLoad: 'loadPeopleCardAttributes'
    },
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uuIdentity: PropTypes.string,
    type: PropTypes.oneOf([1, 2]),
    vertical: PropTypes.bool,
    visual: PropTypes.oneOf(['shortInfo', 'fullInfo', 'mini', 'inline']),
    bgStyle: PropTypes.oneOf(['outlined', 'filled', 'transparent']),
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      uuIdentity: null,
      type: 1,
      vertical: false,
      visual: 'shortInfo',
      bgStyle: 'outlined',
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    this.setCalls(Calls);
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.uuIdentity !== this.props.uuIdentity) {
      this.reload();
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  getOnLoadData_(props) {
    return {
      uuIdentity: this._getUuIdentity(props)
    }
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getUuIdentity(props) {
    props = props || this.props;
    return props.uuIdentity || (this.getIdentity() ? this.getIdentity().uuIdentity : null);
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getLoadFeedbackChildren((dtoOut) => (
      <BusinessCardBody
        {...this.props}
        {...this.getMainPropsToPass()}
        uuIdentity={this._getUuIdentity()}
        data={dtoOut}
      />
    ));
  }
  //@@viewOff:render
});

const BusinessCardBody = createReactClass({

  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.ColorSchemaMixin,
    UU5.Common.ScreenSizeMixin,
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.Bricks.BusinessCardBody',
    classNames: {
      main: 'plus4u5-bricks-business-card-body',
      modal: 'plus4u5-bricks-business-card-modal',
      modalHorizontal: 'plus4u5-bricks-business-card-modal-horizontal',
      type: 'plus4u5-bricks-business-card-type-',
      visual: 'plus4u5-bricks-business-card-',
      bgStyle: 'plus4u5-bricks-business-card-bg-',
      vertical: 'plus4u5-bricks-business-card-vertical',
      horizontal: 'plus4u5-bricks-business-card-horizontal',
      leftWrapper: 'plus4u5-bricks-business-card-left-wrapper',
      rightWrapper: 'plus4u5-bricks-business-card-right-wrapper',
      photo: 'plus4u5-bricks-business-card-photo',
      name: 'plus4u5-bricks-business-card-name',
      contacts: 'plus4u5-bricks-business-card-contacts',
      contactsItem: 'plus4u5-bricks-business-card-contacts-item',
      wrapText: 'plus4u5-bricks-business-card-wrap-text',
      contactText: 'plus4u5-bricks-business-card-contact-text',
      moreInfo: 'plus4u5-bricks-business-card-more',
      icon: 'plus4u5-bricks-business-card-icon uu5-common-text'
    },
    defaults: {
      googleMapsSearch: 'https://www.google.cz/maps/place/'
    },
    lsi: () => (Plus4U5.Environment.Lsi.Bricks.businessCard)
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uuIdentity: PropTypes.string,
    type: PropTypes.any,
    vertical: PropTypes.any,
    visual: PropTypes.any,
    bgStyle: PropTypes.any,
    data: PropTypes.any,
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getName() {
    return this.props.data ?
      (this.props.data.first_name + ' ' + this.props.data.surname) : null;
  },

  _getContact(contact, i) {
    const item = {
      props: {
        content: contact.contact,
        className: this.getClassName("contactText")
      }
    };
    switch (contact.type) {
      case 'phone':
        item.icon = 'mdi-phone';
        item.props.href = 'tel:' + contact.contact;
        break;
      case 'email':
        item.icon = 'mdi-email';
        item.props.href = 'mailto:' + contact.contact;
        break;
      case 'link':
        item.icon = 'mdi-web';
        item.props.href = 'http://' + contact.contact;
        item.props.target = "_blank";
        break;
      case 'address':
        item.icon = 'mdi-map-marker';
        item.multiline = true;
        item.props.href = this.getDefault('googleMapsSearch') + contact.contact;
        item.props.target = "_blank";
        break;
      default:
        item.icon = 'mdi-contact-mail';
        item.props.href = null;
    }

    let className = this.getClassName('contactsItem');
    !item.multiline && (className += ' ' + this.getClassName('wrapText'));

    return (
      <UU5.Bricks.Span key={i} className={className}>
        <UU5.Bricks.Icon
          className={this.getClassName("icon")}
          icon={item.icon}
        />
        {this.props.visual !== 'mini' && <UU5.Bricks.Link {...item.props} />}
      </UU5.Bricks.Span>
    );
  },

  _getContacts() {
    let contactList = this.props.data ? this.props.data.contact_list : [];
    let mainContacts = {};
    const mainTypes = ['phone', 'email', 'address'];
    contactList.forEach(item => {
      if (mainTypes.indexOf(item.type) !== -1) {
        if (mainContacts[item.type]) {
          if (item.primary) mainContacts[item.type] = item;
        } else {
          mainContacts[item.type] = item;
        }
      }
    });

    const mainContactsList = [];
    mainContacts.phone && mainContactsList.push(mainContacts.phone);
    mainContacts.email && mainContactsList.push(mainContacts.email);
    mainContacts.address && mainContactsList.push(mainContacts.address);

    if (this.props.visual !== 'fullInfo') {
      contactList = mainContactsList;
    } else {
      mainContactsList.forEach(item => {
        contactList.splice(contactList.indexOf(item), 1);
      });
      contactList.unshift(...mainContactsList);
    }

    return contactList.map((item, i) => {
      return this._getContact(item, i);
    });
  },

  _getMainAttrs() {
    const mainAttrs = this.getMainAttrs();
    mainAttrs.elevation = this.props.bgStyle === 'transparent' ? 0 : 2;
    mainAttrs.elevationHover = mainAttrs.elevation;

    mainAttrs.className += ' ' + this.getClassName('type') + this.props.type;
    mainAttrs.className += ' ' + this.getClassName(this.props.vertical ? 'vertical' : 'horizontal');
    mainAttrs.className += ' ' + this.getClassName('visual') + this.props.visual.toLowerCase();
    if (this.props.visual !== 'inline') {
      mainAttrs.className += ' ' + this.getClassName('bgStyle') + this.props.bgStyle;
    }

    if (this.props.visual === 'mini') {
      mainAttrs.mainAttrs = {
        onClick: () => this._modal.open()
      };
    }

    return mainAttrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let leftWrapperClassName = this.getClassName("leftWrapper");
    if (this.props.bgStyle === 'filled' && this.props.visual !== 'inline') {
      leftWrapperClassName += ' uu5-common-bg';
    }

    let rightWrapperClassName = this.getClassName("rightWrapper");
    if (this.props.bgStyle === 'filled' && this.props.visual === 'mini') {
      rightWrapperClassName += ' uu5-common-bg';
    }

    let nameClassName = this.getClassName('name');
    if (this.props.visual !== 'mini' && this.props.visual !== 'inline') {
      nameClassName += ' uu5-common-text';
    }

    const nameInRightWrapper = (this.props.visual === 'mini' && !this.props.vertical) || this.props.visual === 'inline';

    let modalClassName = this.getClassName('modal');
    !this.props.vertical && (modalClassName += ' ' + this.getClassName('modalHorizontal'));

    return (
      <UU5.Bricks.Card {...this._getMainAttrs()}>
        <UU5.Bricks.Div
          className={leftWrapperClassName}
          colorSchema={this.props.bgStyle === 'filled' ? this.getColorSchema() : 'custom'}
        >
          <UserPhoto
            uuIdentity={this.props.uuIdentity}
            className={this.getClassName("photo")}
            type="circle"
            width={this.props.visual === 'inline' ? 32 : 120}
            shadow
          />
          {!nameInRightWrapper ?
            <UU5.Bricks.Span className={nameClassName}>
              {this._getName()}
            </UU5.Bricks.Span> : null
          }
        </UU5.Bricks.Div>

        <UU5.Bricks.Div
          className={rightWrapperClassName}
        >
          {nameInRightWrapper ?
            <UU5.Bricks.Span className={nameClassName}>
              {this._getName()}
            </UU5.Bricks.Span> : null
          }

          {this.props.visual !== 'inline' ?
            <UU5.Bricks.Div className={this.getClassName("contacts")}>
              {this._getContacts()}
            </UU5.Bricks.Div> : null
          }

          {this.props.visual === 'shortInfo' ?
            <UU5.Bricks.Button
              className={this.getClassName('moreInfo')}
              bgStyle="transparent"
              content={this.getLsiComponent('moreInfo')}
              onClick={() => this._modal.open()}
            /> : null
          }
        </UU5.Bricks.Div>

        {this.props.visual === 'mini' || this.props.visual === 'shortInfo' ?
          <UU5.Bricks.Modal
            className={modalClassName}
            ref_={item => this._modal = item}
            scrollableBackground
            header=" "
            content={
              <BusinessCardBody
                {...this.props}
                vertical={this.isXs() || this.props.vertical}
                bgStyle={this.props.bgStyle === 'filled' ? 'filled' : 'transparent'}
                visual="fullInfo"
              />
            }
          /> : null
        }
      </UU5.Bricks.Card>
    );
  }
  //@@viewOff:render
});

export default BusinessCard;
