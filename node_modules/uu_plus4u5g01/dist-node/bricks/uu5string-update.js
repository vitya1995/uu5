import React from "react";
import createReactClass from 'create-react-class';
import PropTypes from "prop-types";
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";

import './uu5string-update.css';

export const Uu5StringUpdate = createReactClass({

  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.Bricks.Uu5StringUpdate',
    nestingLevelMixin: 'boxCollection',
    classNames: {
      main: 'plus4u5-bricks-uu5string-update'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    data: PropTypes.string,
    save: PropTypes.func,
    saveDone: PropTypes.func,
    saveFail: PropTypes.func,
    cancel: PropTypes.func,
    validationMessage: PropTypes.any,
    saveMessage: PropTypes.any,
    saveFailMessage: PropTypes.any,
    format: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      data: null,
      save: null,
      saveDone: null,
      saveFail: null,
      cancel: null,
      validationMessage: null,
      saveMessage: null,
      saveFailMessage: null,
      format: "pretty"
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _validate() {
    let input = this._uu5StringEdit;
    let value = input.getValue();
    let validFlag = true;
    this._formData = null;
    try {
      this._formData = value; //TODO Validate uu5String
    }
    catch (err) {
      validFlag = false;
      this._form.getAlertBus().setAlert({
        content: this.props.validationMessage || 'uu5String is not correct!',
        colorSchema: 'danger'
      });

    }

    return validFlag
  },

  _save(opt, justSave) {
    if (this._validate()) {
      let dtoIn = {
        done: dtoOut => opt.component.saveDone(dtoOut, justSave),
        fail: dtoOut => opt.component.saveFail(dtoOut),
        data: this._formData
      };
      typeof this.props.save === 'function' && this.props.save(dtoIn);
      this._form.getAlertBus().setAlert({
        content: this.props.saveMessage || <UU5.Bricks.Loading style={{ minWidth: '100px' }} />,
        colorSchema: 'info'
      });
    }
  },

  _saveDone(dtoOut, justSave) {
    this._form.getAlertBus().clearAlerts();
    typeof this.props.saveDone === 'function' && this.props.saveDone(dtoOut, justSave);
  },

  _saveFail(dtoErr) {
    typeof this.props.saveFail === 'function' && this.props.saveFail(dtoErr);
    this._form.getAlertBus().setAlert({ content: this.props.saveFailMessage || "Save failed!", colorSchema: 'danger' });
  },

  _reset() {
    this._form.getAlertBus().clearAlerts();
    this._uu5StringEdit.reset();
  },

  _cancel() {
    this._form.getAlertBus().clearAlerts();
    typeof this.props.cancel === 'function' && this.props.cancel();
  },

  _getMainProps() {
    let props = this.getMainPropsToPass();
    props.onSave = opt => this._save(opt);
    props.onSaveByKey = opt => this._save(opt, true);
    props.onSaveDone = opt => this._saveDone(opt);
    props.onSaveFail = opt => this._saveFail(opt);
    props.onCancel = this._cancel;
    props.onReset = this._reset;
    props.onValidate = this._validate;
    props.ref_ = form => this._form = form;
    return props;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render

  render() {
    let uu5StringEditor = UU5.Common.Tools.findComponent('UU5.CodeKit.Uu5StringEditor', {
      ref_: component => this._uu5StringEdit = component,
      value: this.props.data,
      rows: 20,
      focus: true
    });

    return (
      <UU5.Forms.Form {...this._getMainProps()}>
        {uu5StringEditor}
        <UU5.Forms.Controls />
      </UU5.Forms.Form>
    )
  }
  //@@viewOff:render
});

export default Uu5StringUpdate;

