import React from "react";
import createReactClass from 'create-react-class';
import PropTypes from "prop-types";
import * as UU5 from "uu5g04";
import "uu5g04-bricks";

import './menu.less';

export const Menu = createReactClass({

  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.App.Menu',
    classNames: {
      main: 'plus4u5-app-menu',
      link: 'plus4u5-app-menu-link',
      pageLink: 'plus4u5-app-go-to-page-link',
      icon: 'plus4u5-app-menu-icon',
      linkMain: 'plus4u5-app-menu-link-main',
      linkActive: 'plus4u5-app-menu-link-active'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    activeCode: PropTypes.string,
    items: PropTypes.arrayOf(
      PropTypes.shape({
        content: PropTypes.string,
        code: PropTypes.string,
        itemList: PropTypes.array,
        expanded: PropTypes.bool,
        onlyExpandable: PropTypes.bool
      })
    ),
    onClick: PropTypes.func,
    onCtrlClick: PropTypes.func,
    onWheelClick: PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      activeCode: null,
      items: null,
      onClick: null,
      onCtrlClick: null,
      onWheelClick: null
    }
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      activeCode: this.props.activeCode,
      menuItems: this._formatData(this.props.items, this.props.activeCode)
    }
  },

  componentWillReceiveProps(nextProps){
    if (nextProps.controlled) {
      this.setState({
        activeCode: nextProps.activeCode,
        menuItems: this._formatData(nextProps.items, nextProps.activeCode)
      })
    }
    return this;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  update(pageCode, setStateCallback) {
    this.setState({
      activeCode: pageCode,
      menuItems: this._formatData(this.state.menuItems, pageCode)
    }, setStateCallback);
    return this;
  },

  setItems(items, pageCode, setStateCallback) {
    this.setState({
      activeCode: pageCode || this.state.activeCode,
      menuItems: this._formatData(items, pageCode || this.state.activeCode)
    }, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _forEach(arr, itemToChange) {
    return arr.map(item => {
      return {
        code: item.code,
        content: item.content,
        expanded: item.code === itemToChange.code ? !item.expanded : item.expanded,
        itemList: Array.isArray(item.itemList) ? this._forEach(item.itemList, itemToChange) : null,
        onlyExpandable: item.onlyExpandable
      }
    });
  },

  _toggleExpanded(itemToChange){
    this.setState({menuItems: this._forEach(this.state.menuItems, itemToChange)})
  },

  _formatData(arr, activeCode, parent) {
    return arr.map(item => {
      let formatData = item.itemList ? this._formatData(item.itemList, activeCode, item) : null;
      let isActive = (activeCode && item.code === activeCode);

      if (parent && (item.expanded || isActive)) {
        parent.expanded = true;
      }

      return {
        content: item.content,
        code: item.code,
        itemList: formatData,
        expanded: item.expanded,
        onlyExpandable: item.onlyExpandable
      }
    });
  },

  _onClick(item) {
    this.setState({ activeCode: item.code }, () => {
      this.props.onClick && this.props.onClick(item)
    });
  },

  _onCtrlClick(item) {
    this.setState({ activeCode: item.code }, () => {
      this.props.onCtrlClick && this.props.onCtrlClick(item)
    });
  },

  _onWheelClick(item) {
    this.setState({ activeCode: item.code }, () => {
      this.props.onWheelClick && this.props.onWheelClick(item)
    });
  },

  _getMenuItems(menuItems, level){
    let result = [];
    level = level + 1 || 1;

    menuItems && menuItems.forEach((item, i) => {
      let className = this.getClassName().link;
      if (item.code === this.state.activeCode) {
        className += ' ' + this.getClassName().linkActive;
      }
      if (level === 1) {
        className += ' ' + this.getClassName().linkMain;
      }
      const width = 32 + (24 * level);

      if (item.itemList && item.itemList.length > 0) {
        result.push(
          <div key={i}>
            <div className={className}>
              <UU5.Bricks.Link
                style={{ minWidth: width + 'px' }}
                className={this.getClassName().icon}
                onClick={() => this._toggleExpanded(item)}
              >
                <UU5.Bricks.Icon
                  icon={item.expanded ? 'mdi-menu-down' : 'mdi-menu-right'} />
              </UU5.Bricks.Link>
              <UU5.Bricks.Link
                className={this.getClassName('pageLink')}
                content={item.content}
                onClick={() => item.onlyExpandable ? this._toggleExpanded(item) : this._onClick(item)}
                onCtrlClick={() => item.onlyExpandable ? this._toggleExpanded(item) : this._onCtrlClick(item)}
                onWheelClick={() => item.onlyExpandable ? this._toggleExpanded(item) : this._onWheelClick(item)}
              />
            </div>
            <div style={{ display: item.expanded ? 'block' : 'none' }}>
              {this._getMenuItems(item.itemList, level)}
            </div>
          </div>
        )
      } else {
        result.push(
          <div key={i} className={className}>
            <UU5.Bricks.Link
              style={{ paddingLeft: width + 'px' }}
              className={this.getClassName('pageLink')}
              content={item.content}
              onClick={() => this._onClick(item)}
              onCtrlClick={() => this._onCtrlClick(item)}
              onWheelClick={() => this._onWheelClick(item)}
            />
          </div>
        )
      }
    });

    return result;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return (
      <div {...this.getMainAttrs()}>
        {this._getMenuItems(this.state.menuItems.slice())}
      </div>
    )
  }
  //@@viewOff:render
});

export default Menu;
