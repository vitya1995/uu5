import React from "react";
import createReactClass from 'create-react-class';
import PropTypes from "prop-types";
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";
import * as Plus4U5 from 'uu_plus4u5g01';
import Calls from './calls.js';

import './navigator.less';

export const Navigator = createReactClass({

  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.LoadMixin,
    UU5.Common.LsiMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.App.Navigator',
    classNames: {
      main: 'plus4u5-app-navigator uu5-elevation-5',
      system: 'plus4u5-app-navigator-system',
      divider: 'plus4u5-app-navigator-divider',
      search: 'plus4u5-app-navigator-search',
      personal: 'plus4u5-app-navigator-personal',
      color: 'plus4u5-app-navigator-',
      touchIcon: 'plus4u5-app-navigator-ti',
      small: 'plus4u5-app-navigator-small'
    },
    calls: {
      onLoad: 'loadNavigator',
      onReload: 'loadNavigator'
    },
    defaults: {
      touchIconColor: 'priorityLow',
      moreIcon: 'mdi-apps',
      send: 'mdi-share'
    },
    lsi: {
      more: {
        cs: 'VÃ­ce',
        en: 'More'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    small: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      small: false
    }
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      menuHidden: this.props.small
    }
  },

  componentWillMount() {
    this.setCalls(Calls);
  },

  // componentWillReceiveProps() {
  //   Calls[this.getCalls.onLoad];
  // },

  componentWillUnmount() {
    this._removeEvent();
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  getOnLoadData_(props) {
    return {
      uuIdentity: props.uuIdentity
    };
  },

  toggleHidden_(setStateCallback) {
    let callback = setStateCallback;
    if (this.state.hidden) {
      callback = () => {
        let input = document.getElementById(this.getId() + '-search-input');
        input && input.focus();
      }
    }

    this.setState(state => {
      state.hidden ? this._addEvent() : this._removeEvent();
      return { hidden: !state.hidden, menuHidden: state.hidden && this.props.small }
    }, callback);
    return this;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget(item) {
    let result = false;
    let id = this.getId();

    if (item.id === id) {
      result = true;
    } else if (item.parentElement) {
      result = this._findTarget(item.parentElement);
    }

    return result;
  },

  _addEvent() {
    this._stopPropagation = true;
    !this.props.disableBackdrop && UU5.Environment.EventListener.addWindowEvent('click', this.getId(), (e) => {
      let isTarget = this._findTarget(e.target);

      if (!this._stopPropagation && !isTarget && !this.isHidden()) {
        this.hide();
      } else {
        this._stopPropagation = false;
      }
    });
    return this;
  },

  _removeEvent() {
    !this.props.disableBackdrop && UU5.Environment.EventListener.removeWindowEvent('click', this.getId());
    return this;
  },

  _getItem(item, localization) {
    let uriArray = (localization.iconUri || item.iconUri).split('?');
    let urlArray = uriArray[0].split('/');
    let result;
    let props = {
      code: item.code,
      group: localization.group || item.group,
      icon: urlArray[urlArray.length - 1],
      color: (localization.iconUri || item.iconUri) ? this._getColor(UU5.Common.Tools.decodeQuery(uriArray[uriArray.length - 1]).color) : this.getClassName('color') + this.getDefault('touchIconColor'),
      text: localization.text || item.text,
      tooltip: localization.tooltip || item.tooltip,
      uri: localization.uri || item.uri
    };

    let tiProps = {
      content: props.text,
      className: this.getClassName('touchIcon') + ' ' + props.color,
      icon: (props.icon && 'plus4u-glyphicon-' + props.icon.replace(/_/g, '-').toLocaleLowerCase()) || this.getClassName('touchIcon') + '-empty',
      tooltip: props.tooltip
    };

    if (props.code === 'logout' && props.group === 'SYSTEM') {
      tiProps.onClick = () => this.getParent().logout();
    } else {
      tiProps.target = '_blank';
      if (props.uri.match(/^http/)) {
        tiProps.href = props.uri;
      } else {
        tiProps.href = Plus4U5.Common.Tools.getLegacyUrl(props.uri);
      }
    }

    result = <UU5.Bricks.TouchIcon {...tiProps} />;

    return result;
  },

  _getColor(color) {
    return this.getClassName('color') + color;
  },

  _search() {
    let value = this._input.getValue();

    if (value) {
      value = ('ues:' + value).replace(/^ues:ues:/, 'ues:');
      window.open(
        Plus4U5.Common.Tools.getLegacyUrl(value),
        '_blank'
      );
    }

    return this;
  },

  _getItemLocalization(item, localization) {
    let result;
    for (let i = 0; i < localization.length; i++) {
      if (item.code === localization[i].code) {
        result = localization[i];
        break;
      }
    }
    return result || [];
  },

  _getContent(dtoOut) {
    let children = [];
    let systemChildren = [];
    let logoutButton;
    if (dtoOut.dataHandler) {
      let navItems = Plus4U5.Common.Tools.base64DecodeUnicode(dtoOut.dataHandler);
      let itemLocalization;
      for (let i = 0; i < navItems.data.itemList.length; i++) {
        itemLocalization = this._getItemLocalization(navItems.data.itemList[i], this.getLsiItem(navItems.data.localization));
        if (this.props.small && this.state.menuHidden) {
          if (navItems.data.itemList[i].code === 'logout') {
            systemChildren.push(
              <UU5.Bricks.TouchIcon
                onClick={() => {
                  this._stopPropagation = true;
                  this.setState({ menuHidden: false });
                }}
                icon={this.getDefault('moreIcon')}
                content={this.getLsiItem(this.getLsi('more'))}
                className={this.getClassName('touchIcon') + ' ' + this.getClassName('color') + this.getDefault('touchIconColor')}
              />
            );

            logoutButton = this._getItem(navItems.data.itemList[i], itemLocalization);
            systemChildren.push(logoutButton);

            break;
          }
        } else {
          if (navItems.data.itemList[i].group && navItems.data.itemList[i].group.toLocaleLowerCase() === 'system') {
            systemChildren.push(this._getItem(navItems.data.itemList[i], itemLocalization))
          } else {
            children.push(this._getItem(navItems.data.itemList[i], itemLocalization))
          }
        }
      }
    }

    let output;
    if (this.props.small && this.state.menuHidden) {
      output = <UU5.Bricks.Div content={systemChildren} className={this.getClassName('system')} />;
    } else {
      output = [
        <UU5.Forms.TextIcon
          id={this.getId() + '-search'}
          className={this.getClassName('search')}
          icon={this.getDefault().send}
          onClick={this._search}
          ref_={input => this._input = input}
          inputAttrs={{
            onKeyDown: (e) => {
              if ((e.keyCode || e.which) === 13) {
                this._search();
              }
            }
          }}
        />,
        <UU5.Bricks.Div content={systemChildren} className={this.getClassName('system')} />,
        <UU5.Bricks.Line className={this.getClassName('divider')} colorSchema="grey-rich" size="s" />,
        <UU5.Bricks.Div content={children} className={this.getClassName('personal')} />
      ]
    }
    return output
  },

  _getMainPropsToPass() {
    const mainProps = this.getMainPropsToPass();
    mainProps.id = this.getId();
    mainProps.parent = null;
    if (this.props.small && this.state.menuHidden) {
      mainProps.className += ' ' + this.getClassName('small');
    }

    return mainProps
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    const content = this.getLoadFeedbackChildren(this._getContent);

    return <UU5.Bricks.Div {...this._getMainPropsToPass()} content={content} />
  }
  //@@viewOff:render

});

export default Navigator;
