import React from "react";
import createReactClass from 'create-react-class';
import PropTypes from "prop-types";
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Navigator from './navigator.js';

import './button.less';

export const Button = createReactClass({

  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.NestingLevelMixin,
    UU5.Common.IdentityMixin,
    UU5.Common.CcrReaderMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'Plus4U5.App.Button',
    nestingLevel: 'smallBox',
    classNames: {
      main: 'plus4u5-app-button',
      authenticated: 'plus4u5-app-button-authenticated',
      notAuthenticated: 'plus4u5-app-button-not-authenticated',
      pending: 'plus4u5-app-button-pending'
    },
    defaults: {
      plus4uIcon: 'plus4u-glyphicon-plus4u'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    smallNav: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      smallNav: false
    }
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPropsToPass(mode) {
    let props = this.getMainPropsToPass();
    props = UU5.Common.Tools.merge(props, { className: props.className + ' ' + this.getClassName(mode) });
    return props
  },

  _getChild() {
    let child;
    let icon = <UU5.Bricks.Icon icon={this.getDefault().plus4uIcon} />;
    switch (this.getIdentityFeedback()) {
      case 'authenticated':
        child = (
          <span>
            <UU5.Bricks.Button
              {...this._getPropsToPass('authenticated')}
              colorSchema="custom"
              onClick={() => this._navigator.toggleHidden()}
            >
              {icon}
            </UU5.Bricks.Button>
            <Navigator
              parent={this}
              uuIdentity={this.getIdentity().uuIdentity}
              hidden
              small={this.props.smallNav}
              ref_={nav => this._navigator = nav}
            />
          </span>
        );
        break;
      case 'notAuthenticated':
        child = (
          <UU5.Bricks.Button
            {...this._getPropsToPass('notAuthenticated')}
            colorSchema="custom"
            onClick={() => this.login()}
          >
            {icon}
          </UU5.Bricks.Button>
        );
        break;
      default:
        child = (
          <UU5.Bricks.Button {...this._getPropsToPass('pending')} colorSchema="custom" disabled>
            {icon}
          </UU5.Bricks.Button>
        );
    }
    return child;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return (
      this.getNestingLevel()
        ? this._getChild()
        : null
    )
  },
  //@@viewOff:render

});

export default Button;
