"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uu_appg01_core = require("uu_appg01_core");

var UuApp = _interopRequireWildcard(_uu_appg01_core);

var _uu_oidcg = require("uu_oidcg01");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * @class UuApp.Client
 * @classdesc
 * The Client allows communication with remote uuOS9 endpoints which conform to uuUri format.
 * In addition to the basic UuApp.AppClient.Client, this client is preconfigured to use authentication
 * via uuOS OpenID Connect server.
 * 
 * See {@link UuApp.AppClient.Client} for standard usage scenarios and configuration, as well as 
 * {@link UuOidc.Session} for basic session handling examples.
 * 
 * @see UuApp.AppClient.Client
 * @see UuOidc.Session
 */
function Client() /*...*/{
  UuApp.AppClient.Client.apply(this, arguments);
  this.defaults = Client.defaults;
}
Client.prototype = Object.create(UuApp.AppClient.Client.prototype);
Client.prototype.constructor = Client;

// use UuApp default client when invoking get/post
var defClient;
/**
 * @name UuApp.Client.get
 * @see UuApp.AppClient.Client.get
 */
Client.get = function () {
  if (!defClient) defClient = new Client();
  return defClient.get.apply(defClient, arguments);
};
/**
 * @name UuApp.Client.post
 * @see UuApp.AppClient.Client.post
 */
Client.post = function (uri, parameters, options) {
  if (!defClient) defClient = new Client();
  return defClient.post.apply(defClient, arguments);
};

// delegate this Client's defaults to UuApp.AppClient.Client defaults, but override interceptors
var A = function A() {};
A.prototype = UuApp.AppClient.Client.defaults;
Client.defaults = new A();
var interceptors = [].concat(UuApp.AppClient.Client.defaults.interceptors); // make copy
interceptors.splice(interceptors.indexOf(UuApp.AppClient.Client.UriHandler) + 1, 0, _uu_oidcg.SessionHandler); // add after UriHandler
/**
 * @name UuApp.Client.defaults
 * @see UuApp.AppClient.Client.defaults
 */
Client.defaults.interceptors = interceptors;

// export
exports.default = Client;