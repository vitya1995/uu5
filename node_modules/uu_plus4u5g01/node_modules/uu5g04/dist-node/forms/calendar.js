'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Calendar = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _formsNs = require('./forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

require('./calendar.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Calendar = exports.Calendar = (0, _createReactClass2.default)({
  displayName: 'Calendar',


  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.SwipeMixin, UU5.Common.LsiMixin],

  statics: {
    tagName: _formsNs2.default.name("Calendar"),
    classNames: {
      main: _formsNs2.default.css("calendar"),
      table: _formsNs2.default.css("calendar-table table-condensed"),
      monthTable: _formsNs2.default.css("calendar-month-table"),
      yearTable: _formsNs2.default.css("calendar-year-table"),
      decadeTable: _formsNs2.default.css("calendar-decade-table"),
      thead: _formsNs2.default.css("calendar-thead"),
      headRow: _formsNs2.default.css("calendar-head-row"),
      headCellPrev: _formsNs2.default.css("calendar-head-cell-prev"),
      headCellHeader: _formsNs2.default.css("calendar-head-cell-header"),
      headCellNext: _formsNs2.default.css("calendar-head-cell-next"),
      icon: _formsNs2.default.css("calendar-icon"),
      dayNames: _formsNs2.default.css("calendar-day-names"),
      dayName: _formsNs2.default.css("calendar-day-name"),
      week: _formsNs2.default.css("calendar-week"),
      weekNumber: _formsNs2.default.css("calendar-week-number"),
      day: _formsNs2.default.css("calendar-day"),
      dayCell: _formsNs2.default.css("calendar-day-cell"),
      active: _formsNs2.default.css("calendar-active"),
      activeSection: _formsNs2.default.css("calendar-active-section"),
      anotherSection: _formsNs2.default.css("calendar-another-section"),
      today: _formsNs2.default.css("calendar-today"),
      month: _formsNs2.default.css("calendar-month"),
      months: _formsNs2.default.css("calendar-months"),
      year: _formsNs2.default.css("calendar-year"),
      years: _formsNs2.default.css("calendar-years"),
      cell: _formsNs2.default.css("calendar-cell"),
      xsCell: _formsNs2.default.css("calendar-xs-cell col-xs-3"),
      specCell: _formsNs2.default.css("calendar-spec-cell"),
      underline: _formsNs2.default.css("calendar-underline"),
      disabled: 'uu5-common-disabled'
    },
    defaults: {
      prevIcon: 'mdi-chevron-left',
      nextIcon: 'mdi-chevron-right'
    },
    errors: {
      invalidDate: 'Cannot set invalid date %s.'
    },
    lsi: function lsi() {
      return UU5.Environment.Lsi.Forms.calendar;
    }
  },

  propTypes: {
    date: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
    dateFrom: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
    dateTo: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
    minSelection: _propTypes2.default.oneOf(["days", "months", "years"]),
    onChange: _propTypes2.default.func
  },

  // Setting defaults
  getDefaultProps: function getDefaultProps() {
    return {
      date: null,
      dateFrom: null,
      dateTo: null,
      onChange: null,
      minSelection: "days"
    };
  },

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    var state = this._parseDate(this.props.date);
    state.dateFrom = this.props.dateFrom ? this._parseDate(this.props.dateFrom).date : null;
    state.dateTo = this.props.dateTo ? this._parseDate(this.props.dateTo).date : null;
    return state;
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled && nextProps.date !== this.props.date) {
      this.setState(this._parseDate(nextProps.date, nextProps));
    }
  },
  //@@viewOff:standardComponentLifeCycle

  // Interface
  setPrevious: function setPrevious(setStateCallback) {
    this._changeCalendar(-1, setStateCallback);
    return this;
  },

  setNext: function setNext(setStateCallback) {
    this._changeCalendar(1, setStateCallback);
    return this;
  },

  getDate: function getDate() {
    return this.state.date;
  },

  setDate: function setDate(date, setStateCallback) {
    var state = this._parseDate(date);
    if (this._isValidDate(state.date)) {
      this.setState(this._parseDate(date), setStateCallback);
    } else {
      this.showError('invalidDate', state.date);
    }
    return this;
  },

  // Overriding Functions

  // Component Specific Helpers
  _getWeek: function _getWeek(date) {
    var firstJan = new Date(date.getFullYear(), 0, 4);
    return Math.ceil(((date - firstJan) / 86400000 + firstJan.getDay() + 3) / 7);
  },


  _getMainAttrs: function _getMainAttrs() {
    var attrs = this.getMainAttrs();

    return attrs;
  },

  _parseDate: function _parseDate(date, props) {
    props = props || this.props;
    if (typeof date === 'string') {
      date = new Date(date);
    }

    var state = {
      allowDisplayMonths: !props.minSelection || props.minSelection != "years",
      allowDisplayDays: !props.minSelection || props.minSelection != "months" && props.minSelection != "years"
    };

    if (date) {
      state.date = date;
      state.month = date.getMonth() + 1;
      state.year = date.getFullYear();
      state.decade = parseInt(state.year % 100 / 10);
      state.century = parseInt(state.year / 100);
    } else {
      var today = new Date();
      state.date = null;
      state.month = today.getMonth() + 1;
      state.year = today.getFullYear();
      state.decade = parseInt(state.year % 100 / 10);
      state.century = parseInt(state.year / 100);
    }

    if (state.allowDisplayDays) {
      state.displayMode = "days";
    } else if (state.allowDisplayMonths) {
      state.displayMode = "months";
    } else {
      state.displayMode = "years";
    }

    return state;
  },

  _getHeaderText: function _getHeaderText() {
    var result;
    var state = this.state;

    if (state.displayMode == "days") {
      result = this.getLsiValue('monthNames')[state.month - 1] + ' ' + state.year;
    } else if (state.displayMode == "months") {
      result = state.year + '';
    } else if (state.displayMode == "years") {
      var century = state.century * 100;
      result = century + state.decade * 10 + ' - ' + (century + ((state.decade + 1) * 10 - 1));
    }

    return result;
  },

  _headerClick: function _headerClick() {
    var state = this.state;

    if (state.displayMode == "days") {
      state.displayMode = "months";
    } else if (state.displayMode == "months") {
      state.displayMode = "years";
    } else if (state.displayMode == "years") {
      return this;
    }

    this.setState(state);
    return this;
  },

  _isValidDate: function _isValidDate(date) {
    return (!this.state.dateFrom || this.state.dateFrom <= date) && (!this.state.dateTo || this.state.dateTo >= date);
  },

  _isValidMonth: function _isValidMonth(date) {
    var dateFromValid = true,
        dateToValid = true;
    if (this.state.dateFrom) {
      dateFromValid = this.state.dateFrom.getFullYear() < date.getFullYear() || this.state.dateFrom.getMonth() <= date.getMonth() && this.state.dateFrom.getFullYear() === date.getFullYear();
    }

    if (this.state.dateTo) {
      dateToValid = this.state.dateTo.getFullYear() > date.getFullYear() || this.state.dateTo.getMonth() >= date.getMonth() && this.state.dateTo.getFullYear() === date.getFullYear();
    }
    return dateFromValid && dateToValid;
  },
  _isValidYear: function _isValidYear(date) {
    var dateFromValid = this.state.dateFrom ? this.state.dateFrom.getFullYear() <= date.getFullYear() : true;
    var dateToValid = this.state.dateTo ? this.state.dateTo.getFullYear() >= date.getFullYear() : true;
    return dateFromValid && dateToValid;
  },
  _isValidDecade: function _isValidDecade(date) {
    var dateFromValid = this.state.dateFrom ? parseInt(this.state.dateFrom.getFullYear() / 10) <= parseInt(date.getFullYear() / 10) : true;
    var dateToValid = this.state.dateTo ? parseInt(this.state.dateTo.getFullYear() / 10) >= parseInt(date.getFullYear() / 10) : true;

    return dateFromValid && dateToValid;
  },
  _isChangeable: function _isChangeable(value) {
    var isChangeable = false;

    if (this.state.displayMode == "days") {
      var newDate = new Date(this.state.year, this.state.month - 1 + value);
      isChangeable = this._isValidMonth(newDate);
    } else if (this.state.displayMode == "months") {
      var _newDate = new Date(this.state.year + value, 0);
      isChangeable = this._isValidYear(_newDate);
    } else if (this.state.displayMode == "years") {
      var newDecade = this.state.decade + value;
      var _newDate2 = new Date(this.state.century * 100 + newDecade * 10, 0);
      isChangeable = this._isValidDecade(_newDate2);
    }

    return isChangeable;
  },


  _changeCalendar: function _changeCalendar(value, setStateCallback) {
    var state = Object.assign({}, this.state);
    var newDate;

    if (state.displayMode == "days") {
      newDate = new Date(state.year, state.month - 1 + value);

      if (this._isValidMonth(newDate)) {
        state.month = newDate.getMonth() + 1;
        state.year = newDate.getFullYear();
      } else {
        return this;
      }
    } else if (state.displayMode == "months") {
      newDate = new Date(state.year + value, 0);

      if (this._isValidYear(newDate)) {
        state.year = newDate.getFullYear();
      } else {
        return this;
      }
    } else if (state.displayMode == "years") {
      var newDecade = state.decade + value;
      var century = state.century;

      if (newDecade < 0) {
        newDecade = 9;
        century--;
        state.century = century;
      } else if (newDecade > 9) {
        newDecade = 0;
        century++;
        state.century = century;
      }

      newDate = new Date(century * 100 + newDecade * 10, 0);

      if (this._isValidDecade(newDate)) {
        state.decade = newDecade;
      } else {
        return this;
      }
    }

    this.setState(state, setStateCallback);
    return this;
  },

  _prevClick: function _prevClick() {
    this.setPrevious();
    return this;
  },

  _nextClick: function _nextClick() {
    this.setNext();
    return this;
  },

  _getWeeks: function _getWeeks() {
    var _this = this;

    var result;

    var ths = this.getLsiValue('dayNames').map(function (dayName) {
      return _react2.default.createElement(
        'th',
        { className: _this.getClassName().dayName, title: dayName, key: dayName },
        _react2.default.createElement(
          'div',
          { className: _this.getClassName("dayCell") },
          dayName.substr(0, 2)
        )
      );
    });

    result = _react2.default.createElement(
      'tr',
      { className: this.getClassName().dayNames },
      _react2.default.createElement(
        'th',
        { className: this.getClassName().dayName },
        _react2.default.createElement('div', { className: this.getClassName("dayCell") })
      ),
      ths
    );

    return result;
  },

  _setSelectedDate: function _setSelectedDate(date, e) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange({ value: date, event: e, component: this });
    } else {
      this.setDate(date);
    }
    return this;
  },

  _setDay: function _setDay(date, e) {
    this._setSelectedDate(date, e);
    return this;
  },

  _setMonth: function _setMonth(month, e) {
    e.stopPropagation();
    if (this.state.allowDisplayDays) {
      this.setState({ month: month, displayMode: "days" });
    } else {
      this._setSelectedDate(new Date(this.state.year, month - 1, 1), e);
    }
    return this;
  },

  _setYear: function _setYear(year, e) {
    e.stopPropagation();
    if (this.state.allowDisplayMonths) {
      this.setState({ year: year, displayMode: "months" });
    } else {
      this._setSelectedDate(new Date(year, 0, 1), e);
    }
    return this;
  },

  _getDayRows: function _getDayRows() {
    var activeMonthIndex = this.state.month - 1;
    var firstDate = new Date(this.state.year, activeMonthIndex);
    var firstMondayDate = new Date(this.state.year, activeMonthIndex, 2 - (firstDate.getDay() || 7));

    var lastDate = new Date(this.state.year, activeMonthIndex + 1, 0);
    var lastSundayDate = new Date(this.state.year, this.state.month, 7 - (lastDate.getDay() || 7));

    var activeDate = firstMondayDate;
    var today = new Date();

    var trs = [];
    var tds = [];
    while (activeDate <= lastSundayDate) {
      var className = this.getClassName().cell + ' ' + this.getClassName().day;
      var enabled = (!this.state.dateFrom || this.state.dateFrom <= activeDate) && (!this.state.dateTo || this.state.dateTo >= activeDate);

      !enabled && (className += ' ' + this.getClassName().disabled + ' ' + this.getClassName().anotherSection);

      var onClick = enabled ? this._setDay.bind(this, activeDate) : null;

      var dayCellClassName = this.getClassName("dayCell");
      if (this.getDate() && activeDate.getDate() === this.getDate().getDate() && activeDate.getMonth() === this.getDate().getMonth() && activeDate.getFullYear() === this.getDate().getFullYear()) {

        className += ' ' + this.getClassName().active;
        dayCellClassName += ' uu5-common-bg';
        onClick = null;
      } else if (activeDate.getDate() === today.getDate() && activeDate.getMonth() === today.getMonth() && activeDate.getFullYear() === today.getFullYear()) {

        className += ' ' + this.getClassName().today;
        dayCellClassName += ' uu5-common-text';
      } else if (activeDate.getMonth() === activeMonthIndex) {
        className += ' ' + this.getClassName().activeSection;
      } else {
        className += ' ' + this.getClassName().anotherSection;
      }

      tds.push(_react2.default.createElement(
        'td',
        { key: 'day-' + activeDate.toISOString(), className: className, onClick: onClick },
        _react2.default.createElement(
          'div',
          { className: dayCellClassName },
          activeDate.getDate() === today.getDate() && activeDate.getMonth() === today.getMonth() && activeDate.getFullYear() === today.getFullYear() ? _react2.default.createElement(
            'span',
            { className: this.getClassName("underline") },
            activeDate.getDate()
          ) : activeDate.getDate()
        )
      ));
      if (activeDate.getDay() === 1) {
        var weekNum = this._getWeek(activeDate);
        tds.unshift(_react2.default.createElement(
          'th',
          { key: 'week-' + weekNum, className: this.getClassName("weekNumber") },
          _react2.default.createElement(
            'div',
            { className: this.getClassName("dayCell") },
            weekNum + '.'
          )
        ));
      }
      if (activeDate.getDay() === 0) {
        trs.push(_react2.default.createElement(
          'tr',
          { key: 'row-' + activeDate.toISOString(), className: this.getClassName().week },
          tds
        ));
        tds = [];
      }
      activeDate = new Date(activeDate.getFullYear(), activeDate.getMonth(), activeDate.getDate() + 1);
    }

    return trs;
  },

  _getMonthRows: function _getMonthRows() {
    var _this2 = this;

    var calendar = this;
    var trs = [];
    var tds = [];
    var today = new Date();

    /*this.getLsiValue('monthNames')*/
    ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII"].forEach(function (name, i) {
      var className = calendar.getClassName().cell + ' ' + calendar.getClassName().xsCell + ' ' + calendar.getClassName().month;

      var enabled = _this2._isValidMonth(new Date(calendar.state.year, i));

      !enabled && (className += ' ' + calendar.getClassName().disabled + ' ' + _this2.getClassName().anotherSection);

      var onClick = enabled ? calendar._setMonth.bind(calendar, i + 1) : null;

      if (calendar.getDate() && calendar.state.year === calendar.getDate().getFullYear() && i === calendar.getDate().getMonth()) {
        className += ' ' + calendar.getClassName().active + ' uu5-common-bg';
      } else if (calendar.state.year === today.getFullYear() && i === today.getMonth()) {
        className += ' ' + calendar.getClassName().today + ' uu5-common-text';
      }

      tds.push(_react2.default.createElement(
        'div',
        { className: className, title: name, key: i, onClick: onClick },
        calendar.getDate() && calendar.state.year === today.getFullYear() && i === today.getMonth() ? _react2.default.createElement(
          'span',
          { className: _this2.getClassName("underline") },
          name
        ) : name
      ));

      if (!((i + 1) % 4)) {
        trs.push(_react2.default.createElement(
          'tr',
          { className: calendar.getClassName().months, key: i },
          _react2.default.createElement(
            'td',
            { colSpan: '8', className: calendar.getClassName().specCell },
            tds
          )
        ));
        tds = [];
      }
    });

    return trs;
  },

  _getYearRows: function _getYearRows() {
    var trs = [];
    var tds = [];
    var today = new Date();

    for (var i = 0; i < 13; i++) {
      var className = this.getClassName().cell + ' ' + this.getClassName().xsCell + ' ' + this.getClassName().year;
      var year = this.state.century * 100 + this.state.decade * 10 + i - 1;

      var enabled = false;
      if ((!this.state.dateFrom || this.state.dateFrom.getFullYear() <= year) && (!this.state.dateTo || this.state.dateTo.getFullYear() >= year)) {
        enabled = true;
      }

      !enabled && (className += ' ' + this.getClassName().disabled + ' ' + this.getClassName().anotherSection);

      var onClick = enabled ? this._setYear.bind(this, year) : null;

      if (this.getDate() && year === this.getDate().getFullYear()) {
        className += ' ' + this.getClassName().active + ' uu5-common-bg';
      } else if (year === today.getFullYear()) {
        className += ' ' + this.getClassName().today + ' uu5-common-text';
      } else if (i > 0 && i < 11) {
        className += ' ' + this.getClassName().activeSection;
      } else {
        className += ' ' + this.getClassName().anotherSection;
      }

      tds.push(_react2.default.createElement(
        'div',
        { className: className, key: i, onClick: onClick },
        this.getDate() && year === today.getFullYear() ? _react2.default.createElement(
          'span',
          { className: this.getClassName("underline") },
          year
        ) : year
      ));

      if (!((i + 1) % 4)) {
        trs.push(_react2.default.createElement(
          'tr',
          { className: this.getClassName().years, key: i },
          _react2.default.createElement(
            'td',
            { colSpan: '8', className: this.getClassName().specCell },
            tds
          )
        ));
        tds = [];
      }
    }

    return trs;
  },

  _getHeader: function _getHeader() {
    var prevClassName = this.getClassName().headCellPrev;
    !this._isChangeable(-1) && (prevClassName += ' ' + this.getClassName().disabled);

    var nextClassName = this.getClassName().headCellNext;
    !this._isChangeable(1) && (nextClassName += ' ' + this.getClassName().disabled);

    return _react2.default.createElement(
      'thead',
      { className: this.getClassName().thead },
      _react2.default.createElement(
        'tr',
        { className: this.getClassName().headRow },
        _react2.default.createElement(
          'th',
          { className: prevClassName, onClick: this._prevClick },
          _react2.default.createElement(UU5.Bricks.Icon, { className: this.getClassName().icon, icon: this.getDefault().prevIcon })
        ),
        _react2.default.createElement(
          'th',
          { className: this.getClassName().headCellHeader, colSpan: '6', onClick: this.state.displayMode == "years" ? null : this._headerClick },
          this._getHeaderText()
        ),
        _react2.default.createElement(
          'th',
          { className: nextClassName, onClick: this._nextClick },
          _react2.default.createElement(UU5.Bricks.Icon, { className: this.getClassName().icon, icon: this.getDefault().nextIcon })
        )
      ),
      this.state.displayMode == "days" ? this._getWeeks() : null
    );
  },

  _getBody: function _getBody() {
    var state = this.state;
    var trs;

    if (state.displayMode == "days") {
      trs = this._getDayRows();
    } else if (state.displayMode == "months") {
      trs = this._getMonthRows();
    } else if (state.displayMode == "years") {
      trs = this._getYearRows();
    }

    return _react2.default.createElement(
      'tbody',
      null,
      trs
    );
  },

  _onSwipeEnd: function _onSwipeEnd() {
    this.isSwipedRight() && this.setPrevious() || this.isSwipedLeft() && this.setNext();
    return this;
  },

  _getTableProps: function _getTableProps() {
    var state = this.state;
    var className = this.getClassName().table;

    if (state.displayMode == "days") {
      className += ' ' + this.getClassName().monthTable;
    } else if (state.displayMode == "months") {
      className += ' ' + this.getClassName().yearTable;
    } else if (state.displayMode == "years") {
      className += ' ' + this.getClassName().decadeTable;
    }

    return {
      className: className,
      onTouchStart: this.swipeOnTouchStart,
      onTouchMove: this.swipeOnTouchMove,
      onTouchEnd: this.swipeOnTouchEnd.bind(this, this._onSwipeEnd)
    };
  },

  // Render
  render: function render() {
    return _react2.default.createElement(
      'div',
      this._getMainAttrs(),
      _react2.default.createElement(
        'table',
        this._getTableProps(),
        this._getHeader(),
        this._getBody()
      )
    );
  }
});

exports.default = Calendar;