'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputMixin = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _formsNs = require('../forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('./input-mixin.less');

require('../col.less');

var _label = require('./../internal/label.js');

var _label2 = _interopRequireDefault(_label);

var _inputWrapper = require('./../internal/input-wrapper.js');

var _inputWrapper2 = _interopRequireDefault(_inputWrapper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INITIAL_FEEDBACK = 'initial';
var SUCCESS_FEEDBACK = 'success';
var WARNING_FEEDBACK = 'warning';
var ERROR_FEEDBACK = 'error';
var LOADING_FEEDBACK = 'loading';

var InputMixin = exports.InputMixin = {

  //@@viewOn:mixins
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    "UU5.Forms.InputMixin": {
      classNames: {
        main: _formsNs2.default.css("input"),
        formItem: _formsNs2.default.css("input-form-item"),
        input: _formsNs2.default.css("input-"),
        readOnly: _formsNs2.default.css("input-read-only"),
        hasIcon: _formsNs2.default.css("input-icon")
      },
      defaults: {
        columnRegexp: /^([a-z]+)(?:-)?(\d+)$/
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    label: _propTypes2.default.any,
    message: _propTypes2.default.any,

    feedback: _propTypes2.default.oneOf([INITIAL_FEEDBACK, SUCCESS_FEEDBACK, WARNING_FEEDBACK, ERROR_FEEDBACK, LOADING_FEEDBACK]),

    readOnly: _propTypes2.default.bool,

    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),

    onChange: _propTypes2.default.func,
    onValidate: _propTypes2.default.func,
    onChangeFeedback: _propTypes2.default.func,

    labelColWidth: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      xs: _propTypes2.default.number,
      s: _propTypes2.default.number,
      m: _propTypes2.default.number,
      l: _propTypes2.default.number,
      xl: _propTypes2.default.number
    }), _propTypes2.default.string]),
    inputColWidth: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      xs: _propTypes2.default.number,
      s: _propTypes2.default.number,
      m: _propTypes2.default.number,
      l: _propTypes2.default.number,
      xl: _propTypes2.default.number
    }), _propTypes2.default.string]),

    inputAttrs: _propTypes2.default.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      label: null,
      message: null,
      feedback: INITIAL_FEEDBACK,
      readOnly: false,
      size: 'm',
      onChange: null,
      onValidate: null,
      labelColWidth: 'xs12 s5',
      inputColWidth: 'xs12 s7',
      inputAttrs: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      message: this.props.message,
      feedback: this.props.feedback,
      value: this.props.value,
      readOnly: this.props.readOnly
    };
  },

  componentDidMount: function componentDidMount() {
    var parentForm = this._getForm();
    parentForm && parentForm.registerFormInput(this.getId(), this);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _this = this;

    if (nextProps.id && nextProps.id !== this.props.id) {
      var parentForm = this._getForm();
      if (parentForm) {
        parentForm.unregisterFormInput(this.props.id);
        parentForm.registerFormInput(nextProps.id, this);
      }
    }
    if (nextProps.controlled) {
      //TODO: jine komponenty jak text zkontrolovat willRecievePros (byude se modifikovat jen value), vsude musi byt nextProps.controled
      this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value, function () {
        return _this.setState({ readOnly: nextProps.readOnly });
      });
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    var parentForm = this._getForm();
    parentForm && parentForm.unregisterFormInput(this.getId());
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isInput: function isInput() {
    return true;
  },
  getValue: function getValue() {
    var value = void 0;
    if (typeof this.getValue_ === 'function') {
      value = this.getValue_();
    } else {
      value = this.state.value;
    }
    return value;
  },
  setValue: function setValue(value, setStateCallback) {
    if (typeof this.setValue_ === 'function') {
      this.setValue_(value, setStateCallback);
    } else {
      this.setState({ value: value === undefined ? null : value }, setStateCallback);
    }
    return this;
  },
  getMessage: function getMessage() {
    var message = void 0;
    if (typeof this.getMessage_ === 'function') {
      message = this.getMessage_();
    } else {
      message = this.state.message;
    }
    return message;
  },
  setMessage: function setMessage(message, setStateCallback) {
    if (typeof this.setMessage_ === 'function') {
      this.setMessage_(message, setStateCallback);
    } else {
      this.setState({ message: message }, setStateCallback);
    }
    return this;
  },
  getFeedback: function getFeedback() {
    var feedback = void 0;
    if (typeof this.getFeedback_ === 'function') {
      feedback = this.getFeedback_();
    } else {
      feedback = this.state.feedback;
    }
    return feedback;
  },
  setFeedback: function setFeedback(feedback, message, value, setStateCallback) {
    if (typeof this.setFeedback_ === 'function') {
      this.setFeedback_(feedback, message, value, setStateCallback);
    } else {
      this.setState({
        feedback: feedback,
        message: message,
        value: value !== null || value !== undefined ? value : ''
      }, setStateCallback);
    }
    return this;
  },
  setInitial: function setInitial(message, value, setStateCallback) {
    if (typeof this.setInitial_ === 'function') {
      this.setInitial_(message, value, setStateCallback);
    } else {
      this._setFeedback(INITIAL_FEEDBACK, message, value, setStateCallback);
    }
    return this;
  },
  isInitial: function isInitial() {
    return this.getFeedback() === INITIAL_FEEDBACK;
  },
  setLoading: function setLoading(message, value, setStateCallback) {
    if (typeof this.setLoading_ === 'function') {
      this.setLoading_(message, value, setStateCallback);
    } else {
      this._setFeedback(LOADING_FEEDBACK, message, value, setStateCallback);
    }
    return this;
  },
  isLoading: function isLoading() {
    return this.getFeedback() === LOADING_FEEDBACK;
  },
  setSuccess: function setSuccess(message, value, setStateCallback) {
    if (typeof this.setSuccess_ === 'function') {
      this.setSuccess_(message, value, setStateCallback);
    } else {
      this._setFeedback(SUCCESS_FEEDBACK, message, value, setStateCallback);
    }
    return this;
  },
  isSuccess: function isSuccess() {
    return this.getFeedback() === SUCCESS_FEEDBACK;
  },
  setWarning: function setWarning(message, value, setStateCallback) {
    if (typeof this.setWarning_ === 'function') {
      this.setWarning_(message, value, setStateCallback);
    } else {
      this._setFeedback(WARNING_FEEDBACK, message, value, setStateCallback);
    }
    return this;
  },
  isWarning: function isWarning() {
    return this.getFeedback() === WARNING_FEEDBACK;
  },
  setError: function setError(message, value, setStateCallback) {
    if (typeof this.setError_ === 'function') {
      this.setError_(message, value, setStateCallback);
    } else {
      this._setFeedback(ERROR_FEEDBACK, message, value, setStateCallback);
    }
    return this;
  },
  isError: function isError() {
    return this.getFeedback() === ERROR_FEEDBACK;
  },
  reset: function reset(setStateCallback) {
    if (typeof this.reset_ === 'function') {
      this.reset_(setStateCallback);
    } else {
      this.setState({
        message: this.props.message,
        feedback: this.props.feedback,
        value: this.props.value,
        readOnly: this.props.readOnly
      }, setStateCallback);
    }
    return this;
  },


  //TODO getResetValues

  getChangeFeedback: function getChangeFeedback(opt) {
    var result = void 0;

    if (typeof this.getChangeFeedback_ === 'function') {
      result = this.getChangeFeedback_(opt);
    } else {
      result = {
        feedback: INITIAL_FEEDBACK,
        message: null,
        value: opt.value
      };
    }

    return result;
  },
  setChangeFeedback: function setChangeFeedback(opt, setStateCallback) {
    var result = void 0;

    if (typeof this.setChangeFeedback_ === 'function') {
      result = this.setChangeFeedback_(opt, setStateCallback);
    } else {
      result = this.getChangeFeedback(opt);

      this.setState({
        feedback: result.feedback,
        message: result.message,
        value: result.value
      }, setStateCallback);
    }

    return this;
  },
  isReadOnly: function isReadOnly() {
    return this.state.readOnly;
  },
  setEditableValue: function setEditableValue(value, setStateCallback) {
    if (typeof this.setEditableValue_ === 'function') {
      this.setEditableValue_(value, setStateCallback);
    } else {
      this.setState({ readOnly: !value }, setStateCallback);
    }
    return this;
  },
  readOnly: function readOnly(setStateCallback) {
    if (typeof this.readOnly_ === 'function') {
      this.readOnly_(setStateCallback);
    } else {
      this.setEditableValue(false, setStateCallback);
    }
    return this;
  },
  editable: function editable(setStateCallback) {
    if (typeof this.editable_ === 'function') {
      this.editable_(setStateCallback);
    } else {
      this.setEditableValue(true, setStateCallback);
    }
    return this;
  },
  getLabel: function getLabel(inputId) {
    var result = null;
    if (this.props.label !== null) {
      result = _react2.default.createElement(_label2.default, this._getLabelProps(inputId));
    }
    return result;
  },
  getInputWrapper: function getInputWrapper(children, buttons) {
    return _react2.default.createElement(_inputWrapper2.default, this._getInputWrapperProps(children, buttons));
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getForm: function _getForm() {
    var form = null;
    var parent = this.getParent && this.getParent();
    while (parent) {
      if (typeof parent.isInput === 'function' && parent.isInput()) {
        break;
      } else if (typeof parent.isForm === 'function' && parent.isForm()) {
        form = parent;
        break;
      } else {
        parent = parent.getParent && parent.getParent();
      }
    }
    return form;
  },

  _setFeedback: function _setFeedback(feedback, message, value, setStateCallback) {
    if (typeof this.props.onChangeFeedback === 'function') {
      this.props.onChangeFeedback({
        feedback: feedback,
        message: message,
        value: value || '',
        callback: setStateCallback,
        component: this
      });
    } else {
      this.setFeedback(feedback, message, value, setStateCallback);
    }
    return this;
  },

  _getInputAttrs: function _getInputAttrs() {
    var mainAttrs = this.getMainAttrs();

    mainAttrs.className += ' ' + this.getClassName('main', "UU5.Forms.InputMixin");
    mainAttrs.className += ' ' + this.getClassName('input', "UU5.Forms.InputMixin") + this.props.size;
    mainAttrs.className += ' ' + this.getClassName('input', "UU5.Forms.InputMixin") + this.state.feedback;
    if (this.isReadOnly()) {
      mainAttrs.className += ' ' + this.getClassName('readOnly', "UU5.Forms.InputMixin");
    }

    if (this.state.feedback != INITIAL_FEEDBACK || this.props.required) {
      mainAttrs.className += ' ' + this.getClassName('hasIcon', "UU5.Forms.InputMixin");
    }

    return mainAttrs;
  },
  _getLabelProps: function _getLabelProps(inputId) {
    var className = void 0;
    if (this.props.labelPosition === 'right') {
      className = _formsNs2.default.css("input-label-right");
    }
    return {
      required: this.props.required,
      for: inputId,
      content: this.props.label,
      colWidth: UU5.Common.Tools.buildColWidthClassName(this.props.labelColWidth),
      className: className
    };
  },
  _getInputWrapperProps: function _getInputWrapperProps(children, buttons) {

    var colWidth = UU5.Common.Tools.buildColWidthClassName(this.props.label !== null ? this.props.inputColWidth : 'xs12');
    var feedback = this.getFeedback();
    var message = this.getMessage();
    // if(this.props.labelPosition  && this.props.labelPosition !== 'left') {
    //   colWidth = UU5.Common.Tools.buildColWidthClassName('xs-12');
    //   //feedback = null;
    //   //message = null;
    // }

    return {
      colWidth: colWidth,
      feedback: feedback,
      message: message,
      required: this.props.required,
      buttons: buttons,
      children: children,
      slider: this.getTagName() === 'UU5.Forms.Slider',
      datetimepicker: this.getTagName() === 'UU5.Forms.Datetimepicker'
    };
  }
};

InputMixin.INITIAL_FEEDBACK = INITIAL_FEEDBACK;
InputMixin.SUCCESS_FEEDBACK = SUCCESS_FEEDBACK;
InputMixin.WARNING_FEEDBACK = WARNING_FEEDBACK;
InputMixin.ERROR_FEEDBACK = ERROR_FEEDBACK;
InputMixin.LOADING_FEEDBACK = LOADING_FEEDBACK;

exports.default = InputMixin;