'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _formsNs = require('./forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

var _itemList = require('./internal/item-list.js');

var _itemList2 = _interopRequireDefault(_itemList);

var _itemsInput = require('./internal/items-input.js');

var _itemsInput2 = _interopRequireDefault(_itemsInput);

var _choiceMixin = require('./mixins/choice-mixin.js');

var _choiceMixin2 = _interopRequireDefault(_choiceMixin);

var _inputMixin = require('./mixins/input-mixin.js');

var _inputMixin2 = _interopRequireDefault(_inputMixin);

var _selectOption = require('./select-option.js');

var _selectOption2 = _interopRequireDefault(_selectOption);

require('./select.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Select = exports.Select = (0, _createReactClass2.default)({
  displayName: 'Select',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, _inputMixin2.default, _choiceMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _formsNs2.default.name("Select"),
    classNames: {
      main: _formsNs2.default.css("select"),
      link: _formsNs2.default.css("select-link"),
      open: _formsNs2.default.css("select-open"),
      multiple: _formsNs2.default.css("select-multiple"),
      selectAllEnabled: _formsNs2.default.css("select-all")
    },
    defaults: {
      childTagName: 'UU5.Forms.Select.option'
    },
    lsi: function lsi() {
      return UU5.Common.Tools.merge({}, UU5.Environment.Lsi.Forms.select, UU5.Environment.Lsi.Forms.message);
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
    multiple: _propTypes2.default.bool,
    selectAllEnabled: _propTypes2.default.bool,
    allowTags: _propTypes2.default.array,
    disableBackdrop: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      value: null,
      multiple: false,
      allowTags: [],
      selectAllEnabled: false,
      disableBackdrop: false
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      open: false
    };
  },
  componentWillMount: function componentWillMount() {
    var value = [];
    if (this.props.value) {
      value = this._valuesToValuesArray(this.props.value);
    }
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: value, event: null, component: this });
    } else {
      this.setFeedback(this.props.feedback, this.props.message, value);
    }
    return this;
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var value = this._valuesToValuesArray(nextProps.value, nextProps.children);
    if (nextProps.controlled) {
      if (nextProps.required && this.state.value.length > 0 && (value.length < 1 || value === null)) {
        this.setError(nextProps.requiredMessage || this.getLsiComponent('requiredMessageChoice'));
      } else if (this.props.onValidate && typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.setFeedback(nextProps.feedback, nextProps.message, value);
      }
    }
    return this;
  },
  componentWillUnmount: function componentWillUnmount() {
    this._removeEvent();
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isSelect: function isSelect() {
    return true;
  },
  isOpen: function isOpen() {
    return this.state.open;
  },
  open: function open(setStateCallback) {
    this._addEvent();
    this.setState({ open: true }, setStateCallback);
    return this;
  },
  close: function close(setStateCallback) {
    this._removeEvent();
    this.setState({ open: false }, setStateCallback);
    return this;
  },
  toggle: function toggle(setStateCallback) {
    this.setState(function (state) {
      state.open ? this._removeEvent() : this._addEvent();
      return { open: !state.open };
    }, setStateCallback);
    return this;
  },


  addValue: function addValue(index, setStateCallback) {
    if (this.props.multiple) {
      var indexes = this.getValue() || [];
      var indexPosition = indexes.indexOf(index);
      if (indexPosition === -1) {
        indexes.push(index);
        this.setValue(indexes, setStateCallback);
      } else if (typeof setStateCallback === 'function') {
        setStateCallback();
      }
    } else {
      this.showWarning('notMultiple', 'addValue');
    }
    return this;
  },

  removeValue: function removeValue(opt, setStateCallback) {
    var _this = this;

    if (this.props.required && this.state.value.length === 1) {
      this.setError(this.props.requiredMessage || this.getLsiComponent('requiredMessageChoice'), null);
    }

    if (typeof this.props.onChange === 'function') {
      opt.component = this;
      this._itemList.getRenderedChildren().forEach(function (child) {
        var value = child ? child.props.selectedContent || child.props.content || child.props.children || child.props.value : null;
        if (value === opt.value) {
          opt.value = child.props.value;
        }
      });
      this.props.multiple ? this.props.onChange(opt) : this.toggle(function () {
        return _this.props.onChange(opt);
      });
    } else {
      var values = this.getValue() || [];
      if (opt.index > -1) {
        values.splice(opt.index, 1);
        !values.length && (values = null);
        this.setValue(values, setStateCallback);
      } else if (typeof setStateCallback === 'function') {
        setStateCallback();
      }
    }
  },


  //@@viewOff:interface

  //@@viewOn:overridingMethods
  _valuesToValuesArray: function _valuesToValuesArray(newValue, newChildren) {
    var value = [];
    var children = newChildren || this.getChildren();

    for (var i = 0; i < children.length; i++) {
      var childValue = children[i].props.value;
      if (typeof newValue === 'string') {
        if (newValue === childValue) {
          value.push(i);
        }
      } else if (newValue && newValue.length > 0) {
        if (newValue.indexOf(childValue) > -1) {
          value.push(i);
        }
      }
    }

    return value;
  },
  setValue_: function setValue_(value, setStateCallback) {
    var result = [];
    var children = this.getChildren();
    for (var i = 0; i < children.length; i++) {
      var childValue = children[i].props.value;
      if (typeof value === 'string') {
        if (value === childValue) {
          result.push(i);
        }
      } else if (value && value.length > 0) {
        if (value.indexOf(childValue) > -1) {
          result.push(i);
        }
      }
    }

    this.setState({ value: result || [] }, setStateCallback);
  },
  setFeedback_: function setFeedback_(feedback, message, value, setStateCallback) {
    if (typeof value === 'string') {
      value = this._valuesToValuesArray(value);
    } else if (Array.isArray(value)) {
      value = value.slice();
    }
    this.setState({
      feedback: feedback,
      message: message,
      value: value || []
    }, setStateCallback);

    return this;
  },
  getValue_: function getValue_(value) {
    value = value || this.state.value;
    var result = [];
    if (value) {
      for (var i = 0; i < value.length; i++) {
        result.push(this._itemList.getRenderedChildren()[value[i]].props.value);
      }
    }
    return this.props.multiple ? result : result[0];
  },
  shouldChildRender_: function shouldChildRender_(child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget: function _findTarget(item) {
    var result = false;
    var id = this.getId();

    if (item.id === id) {
      result = true;
    } else if (item.parentElement) {
      result = this._findTarget(item.parentElement);
    }
    return result;
  },
  _addEvent: function _addEvent() {
    var _this2 = this;

    !this.props.disableBackdrop && UU5.Environment.EventListener.addWindowEvent('click', this.getId(), function (e) {
      var isSelect = _this2._findTarget(e.target);

      if (!_this2._stopPropagation && !isSelect && _this2.isOpen()) {
        if (!_this2.props.multiple) {
          _this2.state.value.length > 0 ? _this2._onChange({ value: _this2.state.value }) : _this2._onChange();
        }
        _this2.close();
      } else {
        _this2._stopPropagation = false;
      }
    });
    return this;
  },
  _removeEvent: function _removeEvent() {
    !this.props.disableBackdrop && UU5.Environment.EventListener.removeWindowEvent('click', this.getId());
    return this;
  },
  _validateOnChange: function _validateOnChange(opt) {
    var result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          var value = opt.value.slice();
          this.setState({ value: value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    } else {
      this.setInitial(null, opt.value);
    }
    return this;
  },
  _getBackdropProps: function _getBackdropProps() {
    var _this3 = this;

    var backdropId = this.getId() + "-backdrop";

    return {
      hidden: !this.isOpen(),
      id: backdropId,
      onClick: function onClick() {
        return _this3._onChange({ open: !_this3.isOpen() });
      }
    };
  },
  _getTextInputAttrs: function _getTextInputAttrs() {
    var _this4 = this;

    var props = {};

    if (!this.state.isReadOnly && !this.isDisabled()) {
      props.onClick = function () {
        _this4.open();
      };
    }

    return props;
  },
  _getItemListProps: function _getItemListProps() {
    var _this5 = this;

    var props = {};
    var multiple = this.props.multiple;

    props.hidden = !this.isOpen();
    props.ref = function (itemList) {
      return _this5._itemList = itemList;
    };
    props.onChange = function (opt) {
      return _this5._onChange(opt);
    };

    props.value = this.state.value;
    props.multiple = this.props.multiple;
    props.allowTags = this.props.allowTags;

    return props;
  },
  _onChange: function _onChange(opt) {
    var _this6 = this;

    var multiple = this.props.multiple;
    var requiredResult = this._checkRequired(opt && opt.value > -1 ? opt.value : this.state.value);

    if (this.isOpen() && opt && opt.value > -1) {

      var value = [];
      if (opt.value !== null) {
        if (multiple) {
          if (this.state.value && this.state.value.length > 0) {
            for (var i = 0; i < this.state.value.length; i++) {
              value.push(this.state.value[i]);
            }
          }
          if (opt.value !== this.state.value || this.state.value.length === 0) {
            var itemPosition = value.indexOf(opt.value);
            if (itemPosition < 0) {
              value.push(opt.value);
            } else {
              value.splice(itemPosition, 1);
            }
          } else {
            value = [];
          }
        } else {
          value = [opt.value];
        }
      }

      var result = value;

      if (typeof this.props.onChange === 'function') {
        opt.component = this;
        opt.value = this._itemList.getRenderedChildren()[opt.value].props.value;
        multiple ? this.props.onChange(opt) : this.toggle(function () {
          return _this6.props.onChange(opt);
        });
      } else if (!requiredResult) {
        this.setError(this.props.requiredMessage || this.getLsiComponent('requiredMessageChoice'), null, function () {
          return _this6.toggle();
        });
      } else if (typeof this.props.onValidate === 'function') {
        opt.component = this;
        opt.value = multiple ? this._itemList.getRenderedChildren().filter(function (item, i) {
          return Array.isArray(result) ? result.indexOf(i) !== -1 : result === i;
        }).map(function (item) {
          return item.props.value;
        }) : this._itemList.getRenderedChildren()[opt.value].props.value;

        result = this.props.onValidate(opt);
        if (result && (typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
          if (typeof this.props.onChangeFeedback === 'function') {
            this.props.onChangeFeedback({
              feedback: result.feedback,
              message: result.message,
              value: result.value,
              callback: result.setStateCallback,
              component: this
            });
          } else {
            if (multiple) {
              var allItems = this._itemList.getRenderedChildren().map(function (item) {
                return item.props.value;
              });
              result.value = result.value.map(function (item) {
                return allItems.indexOf(item);
              });
              this.setFeedback(result.feedback, result.message, result.value);
            } else {
              this.toggle(function () {
                return _this6.setFeedback(result.feedback, result.message, result.value);
              });
            }
          }
        }
      } else {
        multiple ? this.setInitial(null, result) : this.setInitial(null, result, function () {
          return _this6.toggle();
        });
      }
    } else {
      if (requiredResult) {
        this.toggle(function () {
          return _this6.setInitial(null, _this6.state.value);
        });
      } else {
        this.setError(this.props.requiredMessage || this.getLsiComponent('requiredMessageChoice'), null, function () {
          return _this6.toggle();
        });
      }
    }
    return this;
  },
  _checkRequired: function _checkRequired(value) {
    var result = true;
    if ((!value && value !== 0 || value.length < 1) && this.props.required && this.isOpen()) {
      result = false;
    }

    return result;
  },
  _getMainAttrs: function _getMainAttrs() {
    var attrs = this._getInputAttrs();
    attrs.id = this.getId();

    if (this.isOpen()) {
      attrs.className += ' ' + this.getClassName().open;
    }

    if (this.props.multiple) {
      attrs.className += ' ' + this.getClassName().multiple;
    }

    if (this.props.selectAllEnabled) {
      attrs.className += ' ' + this.getClassName().selectAllEnabled;
    }

    return attrs;
  },
  _getItemValues: function _getItemValues(children) {
    var result = [];
    if (this.props.placeholder && children === null) {
      result.push(_react2.default.createElement(UU5.Bricks.Span, { className: this.getClassName('placeholder'), content: this.props.placeholder }));
    }
    if (children && this.state.value) {
      for (var i = 0; i < this.state.value.length; i++) {
        var child = children[this.state.value[i]];
        var childContent = child ? child.props.selectedContent || child.props.content || child.props.children || child.props.value : null;
        result.push(childContent);
      }
    }
    return result;
  },
  _getHeader: function _getHeader() {
    var result = void 0;
    if (this.props.selectAllEnabled && this.props.multiple) {
      var label = this._isSelectedAll() ? this.getLsiComponent('unselectAll') : this.getLsiComponent('selectAll');
      result = _react2.default.createElement(UU5.Bricks.Link, { content: label, onClick: this._select, className: this.getClassName('link'), colorSchema: 'grey' });
    }
    return result;
  },
  _isSelectedAll: function _isSelectedAll() {
    var result = false;
    if (this.props.children && this.state.value && this.props.children.length === this.state.value.length) {
      result = true;
    }
    return result;
  },
  _select: function _select() {
    var result = [];
    if (this._isSelectedAll()) {} else {
      this.props.children && this.props.children.forEach(function (item, i) {
        result.push(i);
      });
    }
    if (typeof this.props.onChange === 'function') {
      var value = this.getValue_(result);
      this.props.onChange({ value: value, component: this });
    } else {
      this.setState({ value: result });
    }
    return this;
  },
  _getChildren: function _getChildren() {
    var children = [];
    if (this.props.children) {
      var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
      _react2.default.Children.toArray(this.props.children).forEach(function (child) {
        var childTagName = UU5.Common.Tools.getChildTagName(child);
        if (childTagNames.indexOf(childTagName) > -1) {
          children.push(child);
        }
      });
    }
    return children;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _this7 = this;

    var inputId = this.getId() + '-input';
    var children = this._getChildren();

    return _react2.default.createElement(
      'div',
      this._getMainAttrs(),
      this.getLabel(inputId),
      this.getInputWrapper([_react2.default.createElement(_itemsInput2.default, { id: inputId, name: this.props.name || inputId, value: this._getItemValues(children), placeholder: this.props.placeholder, multiple: this.props.multiple, mainAttrs: this.props.inputAttrs, disabled: this.isDisabled() || this.isLoading(), readonly: this.isReadOnly(), loading: this.isLoading(), onItemClick: !this.isReadOnly() && !this.isDisabled() ? function (opt) {
          return _this7.removeValue(opt);
        } : null, onClick: !this.isReadOnly() && !this.isDisabled() ? function () {
          return _this7._onChange();
        } : null, icon: 'mdi-menu-down', feedback: this.getFeedback() }), _react2.default.createElement(
        _itemList2.default,
        _extends({}, this._getItemListProps(), { header: this._getHeader(), parent: this }),
        children
      )])
    );
  }
  //@@viewOn:render

});

Select.Option = _selectOption2.default;

exports.default = Select;