'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _formsNs = require('../forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

require('./text-input.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INPUT_TYPE_TEXT = 'text';
var INPUT_TYPE_PASSWORD = 'password';
var INPUT_TYPE_TEXTAREA = 'textarea';

exports.default = (0, _createReactClass2.default)({
  displayName: 'text-input',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.LsiMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _formsNs2.default.name("TextInput"),
    classNames: {
      main: _formsNs2.default.css("text-input"),
      loading: _formsNs2.default.css("input-loading-icon"),
      item: _formsNs2.default.css("input-form-item"),
      text: _formsNs2.default.css("input-form-item-text"),
      textarea: _formsNs2.default.css("input-form-item-textarea"),
      hiddenDiv: _formsNs2.default.css("input-hidden-div"),
      hiddenTextarea: _formsNs2.default.css("input-hidden-textarea"),
      autoResizeTextarea: _formsNs2.default.css("input-auto-resize-textarea"),
      iconLink: _formsNs2.default.css("text-icon-link"),
      iconLinkReadOnly: _formsNs2.default.css("text-icon-link-read-only")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: _propTypes2.default.string,
    placeholder: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
    type: _propTypes2.default.oneOf([INPUT_TYPE_TEXT, INPUT_TYPE_PASSWORD, INPUT_TYPE_TEXTAREA]),
    onChange: _propTypes2.default.func,
    onBlur: _propTypes2.default.func,
    onFocus: _propTypes2.default.func,
    onKeyDown: _propTypes2.default.func,
    icon: _propTypes2.default.string,
    loading: _propTypes2.default.bool,
    rows: _propTypes2.default.number,
    iconOnClick: _propTypes2.default.func,
    autoResize: _propTypes2.default.bool,
    maxRows: _propTypes2.default.number,
    feedback: _propTypes2.default.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      value: '',
      placeholder: null,
      type: INPUT_TYPE_TEXT,
      onChange: null,
      onBlur: null,
      onFocus: null,
      onKeyDown: null,
      icon: null,
      loading: false,
      rows: null,
      iconOnClick: null,
      autoResize: false,
      maxRows: null,
      feedback: null
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentDidMount: function componentDidMount() {
    if (this.props.autoResize || this.props.maxRows) {
      this._setHeight();
    }
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var _this = this;

    if ((this.props.autoResize || this.props.maxRows) && prevProps.value !== this.props.value) {
      this._setHeight(function () {
        var textArea = document.getElementById(_this.getId());
        textArea && (textArea.scrollTop = textArea.scrollHeight);
      });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  focus: function focus() {
    this._textInput.focus();
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPlaceholder: function _getPlaceholder() {
    var placeholder = void 0;
    if (this.props.placeholder) {
      if (typeof this.props.placeholder === 'string') {
        placeholder = this.props.placeholder;
      } else if (_typeof(this.props.placeholder) === 'object') {
        placeholder = this.getLsiItem(this.props.placeholder);
      }
    }

    return placeholder;
  },
  _getTextInput: function _getTextInput() {
    var _this2 = this;

    var input = void 0;
    var className = this.getClassName().item;
    if (this.props.type === INPUT_TYPE_TEXT || this.props.type === INPUT_TYPE_PASSWORD) {
      className += ' ' + this.getClassName().text;
    } else if (this.props.type === INPUT_TYPE_TEXTAREA) {
      className += ' ' + this.getClassName().textarea;
    }

    var mainAttrs = this.props.mainAttrs ? UU5.Common.Tools.merge({}, this.props.mainAttrs) : null;
    var onKeyDown = this.props.onKeyDown;
    if (mainAttrs && typeof mainAttrs.onKeyDown === 'function') {
      var mainAttrsKeyDown = mainAttrs.onKeyDown;
      onKeyDown = function onKeyDown(e) {
        _this2.props.onKeyDown(e);
        mainAttrsKeyDown(e);
      };
      delete mainAttrs.onKeyDown;
    }

    var inputProps = {
      id: this.getId(),
      name: this.props.name,
      placeholder: this._getPlaceholder(),
      value: this.props.value,
      type: this.props.type,
      onChange: this.props.onChange,
      onBlur: this.props.readonly ? null : this.props.onBlur,
      onFocus: this.props.onFocus,
      readOnly: this.props.readonly,
      disabled: this.props.disabled,
      className: className,
      onKeyDown: onKeyDown,
      ref: function ref(item) {
        return _this2._textInput = item;
      }
    };

    mainAttrs && (inputProps = UU5.Common.Tools.merge(inputProps, mainAttrs));

    if (this.props.type === INPUT_TYPE_TEXT || this.props.type === INPUT_TYPE_PASSWORD) {
      input = _react2.default.createElement('input', inputProps);
    } else if (this.props.type === INPUT_TYPE_TEXTAREA) {
      if (this.props.autoResize || this.props.maxRows) {
        var style = {
          maxHeight: this._getMaxHeight(),
          height: this.state.height,
          overflow: this.state.autoResizeOverflow ? this.state.autoResizeOverflow : 'hidden'
        };

        input = [_react2.default.createElement('textarea', _extends({ key: 'textarea' }, inputProps, { rows: this.props.rows, style: style })), this._createHiddenTextarea(inputProps.className, this.props.value)];
      } else {
        input = _react2.default.createElement('textarea', _extends({}, inputProps, { rows: this.props.rows }));
      }
    }
    return input;
  },
  _getFeedbackIcon: function _getFeedbackIcon() {
    var _this3 = this;

    var result = void 0;
    if (this.props.loading) {
      result = _react2.default.createElement('span', { className: this.getClassName().loading });
    } else if (typeof this.props.iconOnClick === 'function') {
      var className = this.getClassName('iconLink');
      this.props.readonly && (className += ' ' + this.getClassName('iconLinkReadOnly'));
      result = _react2.default.createElement(
        UU5.Bricks.Link,
        { className: className, onClick: function onClick(link, e) {
            e.stopPropagation();
            _this3.props.iconOnClick();
          }, disabled: this.props.disabled || this.props.readonly },
        _react2.default.createElement(UU5.Bricks.Icon, { icon: this.props.icon, iconClickable: this.props.iconClickable })
      );
    } else if (this.props.type !== INPUT_TYPE_TEXTAREA) {
      result = _react2.default.createElement(UU5.Bricks.Icon, { icon: this.props.icon, iconClickable: this.props.iconClickable });
    }

    return result;
  },
  _createHiddenTextarea: function _createHiddenTextarea(style, value) {
    var _this4 = this;

    return _react2.default.createElement(
      'div',
      { key: 'textarea-hidden', className: this.getClassName().hiddenDiv },
      _react2.default.createElement('textarea', { className: this.getClassName().hiddenTextarea + ' ' + style, value: value, readOnly: true, ref: function ref(item) {
          return _this4._hiddenTextarea = item;
        } })
    );
  },
  _getNewHeightOfTextarea: function _getNewHeightOfTextarea() {
    var calculatedHeight = this._hiddenTextarea.scrollHeight;

    var textareaStyle = window.getComputedStyle(this._textInput);
    var minHeight = parseFloat(textareaStyle.lineHeight) * this.props.rows + parseFloat(textareaStyle.paddingTop) + parseFloat(textareaStyle.paddingBottom) + parseFloat(textareaStyle.borderTopWidth) + parseFloat(textareaStyle.borderBottomWidth);

    return Math.max(minHeight, calculatedHeight);
  },
  _getStyleOverflow: function _getStyleOverflow(calculatedHeight) {
    var textareaStyle = window.getComputedStyle(this._textInput);
    var maxHeight = parseFloat(textareaStyle.maxHeight);
    isNaN(maxHeight) && (maxHeight = this._getMaxHeight());

    return calculatedHeight > maxHeight ? 'auto' : 'hidden';
  },
  _setHeight: function _setHeight(setStateCallback) {
    var height = this._getNewHeightOfTextarea();
    if (height !== this.state.height) {
      this.setState({ height: height, autoResizeOverflow: this._getStyleOverflow(height) }, setStateCallback);
    }
  },
  _getMaxHeight: function _getMaxHeight() {
    var maxHeight = void 0;
    if (this.props.maxRows && this._textInput) {
      var textareaStyle = window.getComputedStyle(this._textInput);
      maxHeight = parseFloat(textareaStyle.lineHeight) * this.props.maxRows + parseFloat(textareaStyle.paddingTop) + parseFloat(textareaStyle.paddingBottom) + parseFloat(textareaStyle.borderTopWidth) + parseFloat(textareaStyle.borderBottomWidth);
    }

    return maxHeight;
  },
  _getFullClassName: function _getFullClassName() {
    var className = this.getFullClassName();

    switch (this.props.feedback) {
      case 'success':
        className += ' color-schema-' + UU5.Environment.getColorSchema('success');
        break;
      case 'warning':
        className += ' color-schema-' + UU5.Environment.getColorSchema('warning');
        break;
      case 'error':
        className += ' color-schema-' + UU5.Environment.getColorSchema('danger');
        break;
    }

    return className;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return _react2.default.createElement(
      'div',
      { className: this._getFullClassName() },
      this._getTextInput(),
      this._getFeedbackIcon()
    );
  }
  //@@viewOn:render

});