'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _formsNs = require('../forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

var _message = require('./message.js');

var _message2 = _interopRequireDefault(_message);

require('./input-wrapper.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INITIAL_FEEDBACK = 'initial';

exports.default = (0, _createReactClass2.default)({
  displayName: 'input-wrapper',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _formsNs2.default.name("InputWrapper"),
    classNames: {
      main: _formsNs2.default.css("input-wrapper"),
      cover: _formsNs2.default.css("input-wrapper-cover"),
      wrapper: _formsNs2.default.css("input-button-wrapper"),
      feedbackInitial: _formsNs2.default.css("input-wrapper-initial"),
      paddingRight: _formsNs2.default.css("input-button-wrapper-padding-right"),
      inputButton: _formsNs2.default.css("input-button"),
      inputButtonIcon: _formsNs2.default.css("input-button-icon")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    required: _propTypes2.default.bool,
    feedback: _propTypes2.default.string,
    message: _propTypes2.default.any,
    buttons: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      icon: _propTypes2.default.string,
      disabled: _propTypes2.default.bool,
      onClick: _propTypes2.default.func,
      pressed: _propTypes2.default.bool,
      size: _propTypes2.default.string
    })),
    slider: _propTypes2.default.bool,
    datetimepicker: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      required: false,
      feedback: 'initial',
      message: null,
      buttons: null,
      slider: false,
      datetimepicker: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate_: function shouldComponentUpdate_(newProps, newState) {
    var result = false;
    if (newProps.children != this.props.children || newProps.required != this.props.required || newProps.feedback != this.props.feedback || newProps.message != this.props.message) {
      result = true;
    }
    return result;
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs: function _getMainAttrs() {
    var mainAttrs = this.getMainAttrs();
    mainAttrs.className += ' ' + this.props.colWidth;

    // switch (this.props.feedback) {
    //   case 'success':
    //     mainAttrs.className += ' color-schema-' + UU5.Environment.getColorSchema('success');
    //     break;
    //   case 'warning':
    //     mainAttrs.className += ' color-schema-' + UU5.Environment.getColorSchema('warning');
    //     break;
    //   case 'error':
    //     mainAttrs.className += ' color-schema-' + UU5.Environment.getColorSchema('danger');
    //     break;
    //   default:
    //     mainAttrs.className += ' color-schema-' + UU5.Environment.getColorSchema('default');
    //     break
    // }

    return mainAttrs;
  },
  _getButtons: function _getButtons() {
    var _this = this;

    return this.props.buttons && this.props.buttons.length > 0 ? this.props.buttons.map(function (button, i) {
      var className = _this.getClassName("wrapper");
      _this.props.datetimepicker && i === 0 && (className = " " + _this.getClassName("paddingRight"));
      return _react2.default.createElement(
        'span',
        { key: i, className: className },
        _react2.default.createElement(
          UU5.Bricks.Button,
          { className: _this.getClassName("inputButton"), colorSchema: button.colorSchema, disabled: button.disabled, onClick: button.onClick, pressed: button.pressed, size: button.size, mainAttrs: button.mainAttrs },
          _react2.default.createElement(UU5.Bricks.Icon, { icon: button.icon, className: _this.getClassName("inputButtonIcon") })
        )
      );
    }) : null;
  },
  _getFeedbackColorSchema: function _getFeedbackColorSchema() {
    var result = void 0;
    switch (this.props.feedback) {
      case 'warning':
        result = 'warning';
        break;
      case 'error':
        result = 'danger';
        break;
      case 'success':
        result = 'success';
        break;
    }
    return result;
  },
  _getRenderResult: function _getRenderResult() {
    var result = void 0;

    var messageClass = void 0;
    if (this.props.feedback === 'initial') {
      messageClass = this.getClassName("feedbackInitial");
    }

    var message = this.props.message && _react2.default.createElement(_message2.default, { colorSchema: this._getFeedbackColorSchema(), content: this.props.message, className: messageClass });

    if (this.props.datetimepicker) {
      var children = _react2.default.Children.toArray(this.props.children);
      var buttons = this._getButtons();
      result = _react2.default.createElement(
        'div',
        this._getMainAttrs(),
        _react2.default.createElement(
          'div',
          { className: this.getClassName("cover") },
          children[0],
          buttons && buttons[0],
          children.slice(1),
          buttons && buttons[1]
        ),
        message
      );
    } else if (this.props.buttons && this.props.buttons.length > 0) {
      result = _react2.default.createElement(
        'div',
        this._getMainAttrs(),
        _react2.default.createElement(
          'div',
          { className: this.getClassName("cover") },
          _react2.default.Children.toArray(this.props.children),
          this._getButtons()
        ),
        message
      );
    } else if (this.props.slider) {
      result = _react2.default.createElement(
        'div',
        this._getMainAttrs(),
        _react2.default.createElement(
          'div',
          { className: this.getClassName("cover") },
          _react2.default.Children.toArray(this.props.children)
        ),
        message
      );
    } else {
      result = _react2.default.createElement(
        'div',
        this._getMainAttrs(),
        _react2.default.Children.toArray(this.props.children),
        message
      );
    }

    return result;
  },


  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this._getRenderResult();
  }
  //@@viewOn:render
});