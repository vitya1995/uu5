'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Swiper = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _swiperBody = require('./swiper-body.js');

var _swiperBody2 = _interopRequireDefault(_swiperBody);

var _swiperMenu = require('./swiper-menu.js');

var _swiperMenu2 = _interopRequireDefault(_swiperMenu);

require('./swiper.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Swiper = exports.Swiper = (0, _createReactClass2.default)({
  displayName: 'Swiper',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.SwipeMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Swiper"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("swiper")
    },
    defaults: {
      bodyTagName: 'UU5.Bricks.Swiper.Body',
      menuTagName: 'UU5.Bricks.Swiper.Menu'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    leftMenuOpen: _propTypes2.default.bool,
    rightMenuOpen: _propTypes2.default.bool,
    onSwipeOpenLeftMenu: _propTypes2.default.func,
    onSwipeCloseLeftMenu: _propTypes2.default.func,
    onSwipeOpenRightMenu: _propTypes2.default.func,
    onSwipeCloseRightMenu: _propTypes2.default.func,
    allowBodyTags: _propTypes2.default.array,
    allowMenuTags: _propTypes2.default.array
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      leftMenuOpen: false,
      rightMenuOpen: false,
      onSwipeOpenLeftMenu: null,
      onSwipeCloseLeftMenu: null,
      onSwipeOpenRightMenu: null,
      onSwipeCloseRightMenu: null,
      allowBodyTags: [],
      allowMenuTags: []
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      leftMenuOpen: this.props.leftMenuOpen,
      rightMenuOpen: this.props.rightMenuOpen
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        leftMenuOpen: nextProps.leftMenuOpen,
        rightMenuOpen: nextProps.rightMenuOpen
      });
    }
    return this;
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isSwiper: function isSwiper() {
    return true;
  },


  openLeftMenu: function openLeftMenu(setStateCallback) {
    this.setState({
      leftMenuOpen: true,
      rightMenuOpen: false
    }, setStateCallback);
    return this;
  },

  closeLeftMenu: function closeLeftMenu(setStateCallback) {
    this.setState({
      leftMenuOpen: false
    }, setStateCallback);
    return this;
  },

  toggleLeftMenu: function toggleLeftMenu(setStateCallback) {
    this.setState(function (state) {
      var newState = { leftMenuOpen: !state.leftMenuOpen };
      !state.leftMenuOpen && (newState.rightMenuOpen = false);
      return newState;
    }, setStateCallback);
    return this;
  },

  openRightMenu: function openRightMenu(setStateCallback) {
    this.setState({
      leftMenuOpen: false,
      rightMenuOpen: true
    }, setStateCallback);
    return this;
  },

  closeRightMenu: function closeRightMenu(setStateCallback) {
    this.setState({
      rightMenuOpen: false
    }, setStateCallback);
    return this;
  },

  toggleRightMenu: function toggleRightMenu(setStateCallback) {
    this.setState(function (state) {
      var newState = { rightMenuOpen: !state.rightMenuOpen };
      !state.rightMenuOpen && (newState.leftMenuOpen = false);
      return newState;
    }, setStateCallback);
    return this;
  },

  isLeftMenuOpen: function isLeftMenuOpen() {
    return this.state.leftMenuOpen;
  },

  isRightMenuOpen: function isRightMenuOpen() {
    return this.state.rightMenuOpen;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function shouldChildRender_(child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    return this._getAllowMenuTags().indexOf(childTagName) > -1 || this._getAllowBodyTags().indexOf(childTagName) > -1;
  },

  expandChildProps_: function expandChildProps_(child) {
    var newChildProps = UU5.Common.Tools.mergeDeep({}, child.props);
    if (this._getAllowMenuTags().indexOf(UU5.Common.Tools.getChildTagName(child)) > -1) {
      if (child.props.pullRight) {
        newChildProps._open = this.isRightMenuOpen();
      } else {
        newChildProps._open = this.isLeftMenuOpen();
      }
    }
    return newChildProps || child.props;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getAllowBodyTags: function _getAllowBodyTags() {
    return this.props.allowBodyTags.concat(this.getDefault().bodyTagName);
  },
  _getAllowMenuTags: function _getAllowMenuTags() {
    return this.props.allowMenuTags.concat(this.getDefault().menuTagName);
  },


  _onSwipeEnd: function _onSwipeEnd() {
    if (this.isSwipedRight()) {
      if (this.isRightMenuOpen()) {
        if (typeof this.props.onSwipeCloseRightMenu === 'function') {
          this.props.onSwipeCloseRightMenu(this);
        } else {
          this.closeRightMenu();
        }
      } else {
        if (typeof this.props.onSwipeOpenLeftMenu === 'function') {
          this.props.onSwipeOpenLeftMenu(this);
        } else {
          this.openLeftMenu();
        }
      }
    } else if (this.isSwipedLeft()) {
      if (this.isLeftMenuOpen()) {
        if (typeof this.props.onSwipeCloseLeftMenu === 'function') {
          this.props.onSwipeCloseLeftMenu(this);
        } else {
          this.closeLeftMenu();
        }
      } else {
        if (typeof this.props.onSwipeOpenRightMenu === 'function') {
          this.props.onSwipeOpenRightMenu(this);
        } else {
          this.openRightMenu();
        }
      }
    }
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildChildren: function _buildChildren() {
    var menuLeft;
    var menuRight;
    var body;

    var children = this.getChildren();
    if (children) {
      children.forEach(function (child) {
        if (this._getAllowBodyTags().indexOf(UU5.Common.Tools.getChildTagName(child)) > -1) {
          body = child;
        } else if (this._getAllowMenuTags().indexOf(UU5.Common.Tools.getChildTagName(child)) > -1) {
          if (child.props.pullRight) {
            menuRight = menuRight || child;
          } else {
            menuLeft = menuLeft || child;
          }
        }
      }.bind(this));
    }

    var newChildren = [];
    menuLeft && newChildren.push(menuLeft);
    menuRight && newChildren.push(menuRight);
    body && newChildren.push(body);
    return newChildren;
  },

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      _extends({}, this.getMainAttrs(), { onTouchStart: this.swipeOnTouchStart, onTouchMove: this.swipeOnTouchMove, onTouchEnd: this.swipeOnTouchEnd.bind(this, this._onSwipeEnd) }),
      this._buildChildren(),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render
});

Swiper.Menu = _swiperMenu2.default;
Swiper.Body = _swiperBody2.default;

exports.default = Swiper;