'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HomeScreen = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _factory = require('./factory.js');

var _icon = require('./icon.js');

var _icon2 = _interopRequireDefault(_icon);

require('./home-screen.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HomeScreen = exports.HomeScreen = (0, _createReactClass2.default)({
  displayName: 'HomeScreen',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.LsiMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("HomeScreen"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("home-screen")
    },
    defaults: {
      reSmartURL: /\/ath(\/)?$/,
      reQueryString: /([\?&]ath=[^&]*$|&ath=[^&]*(&))/,
      lsi: function lsi() {
        return UU5.Environment.Lsi.Bricks.homeScreen;
      },
      defaultSession: {
        lastDisplayTime: 0, // last time we displayed the message
        returningVisitor: false, // is this the first time you visit
        displayCount: 0, // number of times the message has been shown
        //optedout: false, // has the user opted out
        added: false // has been actually added to the homescreen
      },
      regexpIcon: /%icon(?:\[([^\]]+)\])?/gi,
      regexpChrome: /Chrome\/[.0-9]*/,
      regexpWindowsPhone: /windows phone/i,
      regexpAndroid: /android/i,
      regexpIPhone: /iPad|iPhone|iPod/,
      regexpMobile: /(OS|Android|Windows Phone) (\d+[_\.]\d+)/,
      regexpSlash: /(\/)?$/
    },
    opt: {
      nestingLevelRoot: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    appID: _propTypes2.default.string, // local storage name
    skipFirstVisit: _propTypes2.default.bool, // show only to returning visitors (ie: skip the first time you visit)
    startDelay: _propTypes2.default.number, // display the message after that many seconds from page load
    lifespan: _propTypes2.default.number, // life of the message in seconds
    displayPace: _propTypes2.default.number, // minutes before the message is shown again (0: display every time, default 24 hours)
    maxDisplayCount: _propTypes2.default.number, // absolute maximum number of times the message will be shown to the user (0: no limit)
    message: _propTypes2.default.any, // the message can be customized
    detectHomescreen: _propTypes2.default.oneOf(['hash', 'query', 'smart', false]) // try to detect if the site has been added to the homescreen (false | true | 'hash' | 'queryString' | 'smartURL')
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      appID: 'uu5.homescreen',
      skipFirstVisit: false,
      startDelay: 1000,
      lifespan: 5000,
      displayPace: 1440,
      maxDisplayCount: 0,
      message: '',
      detectHomescreen: 'hash'
      // autostart: true,			// show the message automatically
      // debug: false,				// override browser checks
      // logging: false,				// log reasons for showing or not showing to js console; defaults to true when debug is true
      // modal: false,				// prevent further actions until the message is closed
      // mandatory: false,			// you can't proceed if you don't add the app to the homescreen
      // icon: true,					// add touch icon to the message
      // validLocation: [],			// list of pages where the message will be shown (array of regexes)
      // onInit: null,				// executed on instance creation
      // onShow: null,				// executed when the message is shown
      // onRemove: null,				// executed when the message is removed
      // onAdd: null,				// when the application is launched the first time from the homescreen (guesstimate)
      // onPrivate: null,			// executed if user is in private mode
      // privateModeOverride: false,	// show the message even in private mode (very rude)
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      receiveProps: false
    };
  },

  componentWillMount: function componentWillMount() {
    this.hide();
  },

  componentDidMount: function componentDidMount() {
    var homeScreen = this;
    if (!this.props.hidden) {
      setTimeout(function () {
        homeScreen.activate();
      }, this.props.startDelay < 0 ? 1 : this.props.startDelay);
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    // cannot set visibility by receive props
    this.setState({ hidden: this.isHidden() });
  },

  componentWillUnmount: function componentWillUnmount() {
    this.hiddenTimeout && clearTimeout(this.hiddenTimeout);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  activate: function activate(setStateCallback) {
    var shouldRender = this._shouldRender();
    // console.error("activate", shouldRender);
    if (shouldRender) {
      var homeScreen = this;

      this.setHiddenValue(false, function () {
        homeScreen.hiddenTimeout && clearTimeout(homeScreen.hiddenTimeout);
        homeScreen.hiddenTimeout = setTimeout(function () {
          homeScreen.hide(setStateCallback);
        }, homeScreen.props.lifespan);
      });
    }
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMobileOS: function _getMobileOS() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;
    var os = 'unknown';

    // Windows Phone must come first because its UA also contains "Android"
    if (this.getDefault().regexpWindowsPhone.test(userAgent)) {
      os = "windowsPhone";
    } else if (this.getDefault().regexpAndroid.test(userAgent)) {
      os = "android";

      // iOS detection from: http://stackoverflow.com/a/9039885/177710
    } else if (this.getDefault().regexpIPhone.test(userAgent) && !window.MSStream) {
      os = "iOS";
    }

    return os;
  },

  _hasToken: function _hasToken() {
    // console.error("_hasToken", document.location.hash === '#ath', this.getDefault().reSmartURL.test(document.location.href), this.getDefault().reQueryString.test(document.location.search))
    return document.location.hash === '#ath' || this.getDefault().reSmartURL.test(document.location.href) || this.getDefault().reQueryString.test(document.location.search);
  },

  _isMobileIOS: function _isMobileIOS() {
    return this._getMobileOS() === 'iOS';
  },

  _isMobileAndroid: function _isMobileAndroid() {
    return this._getMobileOS() === 'android';
  },

  _isSafari: function _isSafari() {
    var userAgent = window.navigator.userAgent;
    return this._isMobileIOS() && userAgent.indexOf('Safari') > -1 && userAgent.indexOf('CriOS') === -1;
  },

  _isChrome: function _isChrome() {
    var userAgent = window.navigator.userAgent;
    return this.getDefault().regexpChrome.test(userAgent) && userAgent.indexOf("Version") === -1;
  },

  _isAndroidChrome: function _isAndroidChrome() {
    return this._isMobileAndroid() && this._isChrome();
  },

  _isCompatibleEnvironment: function _isCompatibleEnvironment() {
    return this._isSafari() && this._getMobileOSVersion() >= 6 || this._isAndroidChrome();
  },

  _isStandAloneMode: function _isStandAloneMode() {
    return !!window.navigator.standalone;
  },

  _getBrowserLanguage: function _getBrowserLanguage() {
    return window.navigator.language ? window.navigator.language.toLowerCase() : 'en';
  },

  _getMobileOSVersion: function _getMobileOSVersion() {
    var version = window.navigator.userAgent.match(this.getDefault().regexpMobile);
    return version && version[2] ? +version[2].replace('_', '.') : 0;
  },

  _isTablet: function _isTablet() {
    var userAgent = window.navigator.userAgent;
    return this._isSafari() && userAgent.indexOf('iPad') > -1 || this._isAndroidChrome() && userAgent.indexOf('Mobile') === -1;
  },

  _shouldRender: function _shouldRender() {
    var shouldRender = false;

    // load session
    var session = this._getAppSession();

    // user most likely came from a direct link containing our token, we don't need it and we remove it
    if (this._hasToken() && (!this._isCompatibleEnvironment() || !session && !this.props.detectHomescreen)) {
      this._removeToken();
    }

    // the device is supported
    if (this._isCompatibleEnvironment()) {
      session = session || this.getDefault().defaultSession;
      this._setAppSession(session);

      var now = Date.now();
      if (this._checkSession(session) && this._checkShowing(session, now)) {
        this._incrementDisplayCount(session, now);
        shouldRender = true;
      }
    }

    return shouldRender;
  },

  _checkSession: function _checkSession(session) {
    // if is added at homescreen
    if (session.added) {
      return false;
    }

    // check if the app is in stand alone mode
    if (this._isStandAloneMode()) {
      session.added = true;
      this._setAppSession(session);
      return false;
    }

    // (try to) check if the page has been added to the homescreen
    if (this.props.detectHomescreen) {
      // the URL has the token, we are likely coming from the homescreen
      if (this._hasToken()) {
        this._removeToken(); // we don't actually need the token anymore, we remove it to prevent redistribution

        // this is called the first time the user opens the app from the homescreen
        session.added = true;
        this._setAppSession(session);
        return false;
      }

      // URL doesn't have the token, so add it
      this._addToken();
    }

    // check if this is a returning visitor
    if (!session.returningVisitor) {
      session.returningVisitor = true;
      this._setAppSession(session);

      // we do not show the message if this is your first visit
      if (this.props.skipFirstVisit) {
        return false;
      }
    }

    return true;
  },

  _getSession: function _getSession(item) {
    var session;
    if (localStorage) {
      session = localStorage.getItem(item);
      session && (session = JSON.parse(session));
    }
    return session || null;
  },

  _setSession: function _setSession(item, session) {
    localStorage && localStorage.setItem(item, JSON.stringify(session));
    return this;
  },

  _getAppSession: function _getAppSession() {
    return this._getSession(this.props.appID);
  },

  _setAppSession: function _setAppSession(session) {
    this._setSession(this.props.appID, session);
    return this;
  },

  _addToken: function _addToken() {
    // console.error("add token", this.props.detectHomescreen == 'hash');
    if (this.props.detectHomescreen == 'hash') {
      document.location.hash !== '#ath' && history.replaceState('', window.document.title, document.location.href + '#ath');
    } else if (this.props.detectHomescreen == 'smart') {
      history.replaceState('', window.document.title, document.location.href.replace(this.getDefault().regexpSlash, '/ath$1'));
    } else {
      history.replaceState('', window.document.title, document.location.href + (document.location.search ? '&' : '?') + 'ath=');
    }
    return this;
  },

  _removeToken: function _removeToken() {
    if (document.location.hash == '#ath') {
      history.replaceState('', window.document.title, document.location.href.split('#')[0]);
    }

    if (this.getDefault().reSmartURL.test(document.location.href)) {
      history.replaceState('', window.document.title, document.location.href.replace(this.getDefault().reSmartURL, '$1'));
    }

    if (this.getDefault().reQueryString.test(document.location.search)) {
      history.replaceState('', window.document.title, document.location.href.replace(this.getDefault().reQueryString, '$2'));
    }

    return this;
  },

  _checkShowing: function _checkShowing(session, date) {
    var lastDisplayTime = session.lastDisplayTime;

    // we obey the display pace (prevent the message to popup too often)
    var showing = date - lastDisplayTime > this.props.displayPace * 60000;

    // obey the maximum number of display count
    showing = showing && (this.props.maxDisplayCount === 0 || session.displayCount < this.props.maxDisplayCount);

    return showing;
  },

  _incrementDisplayCount: function _incrementDisplayCount(session, date) {
    // increment the display count
    session.lastDisplayTime = date;
    session.displayCount++;
    this._setAppSession(session);
    return this;
  },

  _getMessage: function _getMessage() {
    // var languages = UU5.Common.Tools.sortLanguages(this._getBrowserLanguage());
    var message;
    var messages;

    if (this.props.message) {
      if (_typeof(this.props.message) === 'object') {
        message = this.props.message[this._getMobileOS()];
        if (!message) {
          messages = this.getLsiItem(this.props.message);
        }
      } else {
        message = this.props.message;
      }
    } else {
      var lsi = this.getDefault().lsi();
      messages = this.getLsiItem(lsi);
    }

    messages && (message = messages[this._getMobileOS()]);

    message = message && message.replace(this.getDefault().regexpIcon, function (matches, group1) {
      return '<span className="ath-action-icon">' + (!!group1 ? group1 : 'icon') + '</span>';
    });

    return message;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _this = this;

    var message = this._getMessage();

    var visibility = this.isHidden() ? ' uu5-bricks-home-screen-hidden' : ' uu5-bricks-home-screen-shown';
    // console.log('render', visibility);

    var containerProps = {
      className: 'ath-container ath-' + this._getMobileOS() + ' ath-' + this._getMobileOS() + (parseInt(this._getMobileOSVersion()) || '') + ' ath-' + (this._isTablet() ? 'tablet' : 'phone') + visibility
    };

    return _react2.default.createElement(
      _factory.Div,
      { className: 'ath-viewport', nestingLevel: this.getNestingLevel() },
      _react2.default.createElement(
        'div',
        containerProps,
        _react2.default.createElement(
          'div',
          { key: '1', onClick: function onClick() {
              return _this.hide();
            } },
          _react2.default.createElement(_icon2.default, { icon: 'mdi-close' })
        ),
        _react2.default.createElement(_factory.P, { key: '2', content: message })
      )
    );
  }
  //@@viewOff:render
});

exports.default = HomeScreen;