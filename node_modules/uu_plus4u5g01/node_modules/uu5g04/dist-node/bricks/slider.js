'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _backdrop = require('./backdrop.js');

var _backdrop2 = _interopRequireDefault(_backdrop);

require('./slider.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Slider = exports.Slider = (0, _createReactClass2.default)({
  displayName: 'Slider',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Slider"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("slider"),
      input: _bricksNs2.default.css("slider-input"),
      track: _bricksNs2.default.css("slider-track"),
      selection: _bricksNs2.default.css("slider-selection"),
      pointer: _bricksNs2.default.css("slider-pointer"),
      active: _bricksNs2.default.css("slider-active"),
      size: _bricksNs2.default.css("slider-size-")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    // TODO
    //position: PropTypes.oneOf(['horizontal', 'vertical']),
    min: _propTypes2.default.number,
    max: _propTypes2.default.number,
    step: _propTypes2.default.number,
    value: _propTypes2.default.number,
    onChange: _propTypes2.default.func,
    onChanged: _propTypes2.default.func,
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      //position: 'horizontal',
      min: 0,
      max: 10,
      step: 1,
      value: null, // default: min
      onChange: null,
      onChanged: null,
      size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      value: this._checkValue(this.props.value),
      active: false
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setValue(nextProps.value);
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getValue: function getValue() {
    return this.state.value;
  },

  setValue: function setValue(value, setStateCallback) {
    this.setState({ value: this._checkValue(value) }, setStateCallback);
    return this;
  },

  increase: function increase(value, setStateCallback) {
    var _this = this;

    this.setState(function (prevState) {
      return { value: _this._checkValue(prevState.value + (value || _this.props.step)) };
    }, setStateCallback);
    return this;
  },

  decrease: function decrease(value, setStateCallback) {
    var _this2 = this;

    this.setState(function (prevState) {
      return { value: _this2._checkValue(prevState.value - (value || _this2.props.step)) };
    }, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _checkValue: function _checkValue(value) {
    if (value === null) {
      value = this.props.min;
    } else {
      value = Math.round(value / this.props.step) * this.props.step;

      if (value < this.props.min) {
        value = this.props.min;
      } else if (value > this.props.max) {
        value = this.props.max;
      }
    }

    return value;
  },

  _changeValue: function _changeValue(value, e) {
    var onChange;
    var onChanged;
    if (this.getValue() !== value) {
      onChange = this._getOnChange(value, e);
      !onChange && (onChanged = this._getOnChanged(value, e));

      onChange ? onChange(this) : this.setValue(value, onChanged);
    }

    return this;
  },

  _activate: function _activate(e) {
    var value = this._countValue(e);

    var onChange;
    var onChanged;
    if (this.getValue() !== value) {
      onChange = this._getOnChange(value, e);
      !onChange && (onChanged = this._getOnChanged(value, e));
    }

    var newState = { active: true };
    !onChange && (newState.value = value);

    this.setState(newState, (onChange || onChanged) && function () {
      onChange ? onChange(this) : onChanged(this);
    }.bind(this));
    return this;
  },

  _deactivate: function _deactivate(e) {
    this.setState({ active: false });
    return this;
  },

  _isActive: function _isActive() {
    return this.state.active;
  },

  _move: function _move(e) {
    if (this._isActive()) {
      this._changeValue(this._countValue(e), e);
    }
    return this;
  },

  _getOnChange: function _getOnChange(value, e) {
    var onChange;
    if (typeof this.props.onChange === 'function') {
      var slider = this;
      onChange = function onChange() {
        slider.props.onChange({ value: value, component: slider, event: e });
      };
    }
    return onChange;
  },

  _getOnChanged: function _getOnChanged(value, e) {
    var onChanged;
    if (typeof this.props.onChanged === 'function') {
      var slider = this;
      onChanged = function onChanged() {
        slider.props.onChanged({ value: value, component: slider, event: e });
      };
    }
    return onChanged;
  },

  _getStartPositions: function _getStartPositions(el) {
    var xPos = 0;
    var yPos = 0;

    while (el) {
      xPos += el.offsetLeft - el.scrollLeft + el.clientLeft;
      yPos += el.offsetTop - el.scrollTop + el.clientTop;

      el = el.offsetParent;
    }

    return {
      x: xPos,
      y: yPos
    };
  },

  _countValue: function _countValue(e) {
    var sliderStart = this._getStartPositions(this.track).x;
    var sliderWidth = this.track.offsetWidth;
    var actualPosition = e.clientX;
    if (e.touches) {
      actualPosition = e.touches.item(0).clientX;
    }

    var absolutePosition = actualPosition - sliderStart;
    var end = sliderWidth;

    var min = this.props.min;
    var max = this.props.max;
    var step = this.props.step;

    var absoluteMax = max - min;

    var realValue = absolutePosition / (end / absoluteMax);
    var value = min + Math.round(realValue / step) * step;
    value > this.props.max && (value = this.props.max);
    value < this.props.min && (value = this.props.min);

    return value;
  },

  _getMainAttrs: function _getMainAttrs() {
    var attrs = this.getMainAttrs();

    attrs.className += ' ' + this.getClassName('size') + this.props.size;

    if (!this.isDisabled()) {
      this._isActive() && (attrs.className += ' ' + this.getClassName().active);

      attrs.onMouseDown = this._activate;
      attrs.onMouseMove = this._move;
      attrs.onMouseUp = this._deactivate;
      attrs.onTouchStart = this._activate;
      attrs.onTouchMove = this._move;
      attrs.onTouchEnd = this._deactivate;
      attrs.onMouseLeave = this._deactivate;
    }

    return attrs;
  },

  _getInputAttrs: function _getInputAttrs() {
    var attrs = {
      className: this.getClassName().input,
      type: "range",
      name: this.getName(),
      min: this.props.min,
      max: this.props.max,
      step: this.props.step,
      value: this.getValue(),
      disabled: this.isDisabled()
    };

    if (!this.isDisabled()) {
      var slider = this;
      attrs.onChange = function (e) {
        slider._changeValue(e.target.value, e);
      };
    }

    return attrs;
  },

  _getBackdropProps: function _getBackdropProps() {
    var backdropId = this.getId() + "-backdrop";
    var slider = this;

    return {
      hidden: !this._isActive(),
      id: backdropId,
      onClick: function onClick(backdrop, event) {
        event.target.id === backdropId && slider._deactivate();
      },
      mainAttrs: {
        onMouseUp: this._deactivate,
        onTouchEnd: this._deactivate
      }
    };
  },

  _getTrackAttrs: function _getTrackAttrs() {
    var slider = this;
    return {
      className: this.getClassName().track,
      ref: function ref(div) {
        slider.track = div;
      }
    };
  },

  _getSelectionAttrs: function _getSelectionAttrs() {
    return {
      className: this.getClassName().selection,
      style: { width: (this.getValue() - this.props.min) / (this.props.max - this.props.min) * 100 + '%' }
    };
  },

  _getPointerAttrs: function _getPointerAttrs() {
    return {
      className: this.getClassName().pointer
    };
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      this._getMainAttrs(),
      _react2.default.createElement('input', this._getInputAttrs()),
      _react2.default.createElement(_backdrop2.default, this._getBackdropProps()),
      _react2.default.createElement(
        'div',
        this._getTrackAttrs(),
        _react2.default.createElement(
          'div',
          this._getSelectionAttrs(),
          _react2.default.createElement(
            'div',
            this._getPointerAttrs(),
            this.getChildren()
          )
        )
      )
    ) : null;
  }
  //@@viewOff:render
});

exports.default = Slider;