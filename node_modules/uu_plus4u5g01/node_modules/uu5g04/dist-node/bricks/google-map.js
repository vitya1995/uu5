'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GoogleMap = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _link = require('./link.js');

var _link2 = _interopRequireDefault(_link);

var _modal = require('./modal.js');

var _modal2 = _interopRequireDefault(_modal);

require('./google-map.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GoogleMap = exports.GoogleMap = (0, _createReactClass2.default)({
  displayName: 'GoogleMap',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("GoogleMap"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'inline'),
    classNames: {
      main: _bricksNs2.default.css("google-map")
    },
    defaults: {
      loadLibsEvent: _bricksNs2.default.css("google-map-load-libs"),
      apiKeyUrl: 'https://maps.googleapis.com/maps/api/js'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    mapType: _propTypes2.default.oneOf(['satellite', 'roadmap']),
    latitude: _propTypes2.default.number,
    longitude: _propTypes2.default.number,
    markers: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      latitude: _propTypes2.default.number,
      longitude: _propTypes2.default.number,
      title: _propTypes2.default.string,
      label: _propTypes2.default.string
    })),
    zoom: _propTypes2.default.number,
    disableZoom: _propTypes2.default.bool,
    draggable: _propTypes2.default.bool,
    disableDefaultUI: _propTypes2.default.bool,
    googleApiKey: _propTypes2.default.string,
    height: _propTypes2.default.string,
    width: _propTypes2.default.string,

    // https://developers.google.com/maps/documentation/javascript/styling
    mapStyle: _propTypes2.default.arrayOf(_propTypes2.default.object)
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      mapType: 'roadmap',
      latitude: 50.107799,
      longitude: 14.453689,
      markers: [],
      zoom: 14,
      disableZoom: false,
      draggable: true,
      disableDefaultUI: false,
      googleApiKey: null,
      height: '400px',
      width: '100%',
      mapStyle: null
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentDidMount: function componentDidMount() {
    this._initialize();
  },


  // setting map options through props
  // for additions see https://developers.google.com/maps/documentation/javascript/reference#MapOptions
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      var newMapOptions = {};
      nextProps.draggable !== undefined && (newMapOptions.draggable = nextProps.draggable);
      nextProps.disableZoom !== undefined && (newMapOptions.scrollwheel = !nextProps.disableZoom);
      nextProps.disableDefaultUI !== undefined && (newMapOptions.disableDefaultUI = nextProps.disableDefaultUI);
      Object.keys(newMapOptions).length && this.setMapOptions(newMapOptions);
      if (this.props.markers !== nextProps.markers) {
        this._initialize(nextProps.markers);
      }
    }
  },


  componentWillUnmount: function componentWillUnmount() {
    UU5.Environment.EventListener.unregisterLoadLibs(this.getId(), this._initMap);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getMap: function getMap() {
    return this._googleMap;
  },
  setMapOptions: function setMapOptions(options) {
    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options !== null) {
      this._googleMap.setOptions(options);
    }
    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _initialize: function _initialize(markers) {
    markers = markers || this.props.markers;
    if (typeof google === 'undefined' && !window.googleMapApiLoading) {
      this._loadLibraries(markers, this._initMap);
    } else if (googleMapApiLoading) {
      if (window.googleMapApiLoaded) {
        this._initMap(markers);
      } else {
        UU5.Environment.EventListener.registerLoadLibs(this.getId(), this._initMap);
      }
    } else {
      this._loadLibraries(markers).this._initMap(markers);
    }
  },
  _loadLibraries: function _loadLibraries(markers, callback) {
    var googleMap = this;

    window.google = false;
    window.googleMapApiLoading = true;
    var script = document.createElement('script');
    document.head.appendChild(script);

    script.onload = function () {
      window.googleMapApiLoaded = true;
      UU5.Environment.EventListener.triggerLoadLibs(markers);
      typeof callback === 'function' && callback();
    };

    script.src = this.getDefault().apiKeyUrl + (this.props.googleApiKey ? '?key=' + this.props.googleApiKey : '');
  },
  _initMap: function _initMap(markers) {
    var _this = this;

    markers = markers || this.props.markers;
    var myCenter = new google.maps.LatLng(this.props.latitude, this.props.longitude);

    var mapProps = {
      center: myCenter,
      zoom: this.props.zoom,
      zoomControl: !this.props.disableZoom,
      scrollwheel: !this.props.disableZoom,
      disableDoubleClickZoom: this.props.disableZoom,
      draggable: this.props.draggable,
      disableDefaultUI: this.props.disableDefaultUI,
      mapTypeId: google.maps.MapTypeId[this.props.mapType.toUpperCase()]
    };

    this._googleMap = this._googleMap || new google.maps.Map(_reactDom2.default.findDOMNode(this._map), mapProps);
    if (this._markers && this._markers.length > 0) {
      this._markers.forEach(function (marker) {
        marker.setMap(null); //clear old markers
      });
    }

    if (this.props.mapStyle) {
      var styledMap = new google.maps.StyledMapType(this.props.mapStyle);
      this._googleMap.mapTypes.set('map_style', styledMap);
      this._googleMap.setMapTypeId('map_style');
    }

    if (markers !== null) {
      this._markers = [];
      if (!markers.length) {
        var marker = new google.maps.Marker({
          position: myCenter
        });

        this._markers.push(marker);
        marker.setMap(this._googleMap);
      } else {
        markers.forEach(function (markerProps) {
          var position = new google.maps.LatLng(markerProps.latitude, markerProps.longitude);
          var animation = markerProps.animation ? google.maps.Animation[markerProps.animation.toUpperCase()] : null;
          var newMarker = new google.maps.Marker({
            position: position,
            center: position,
            title: markerProps.title,
            label: markerProps.label,
            icon: markerProps.icon,
            animation: animation
          });
          if (typeof markerProps.onClick === 'function') {
            newMarker.addListener('click', function (e) {
              return markerProps.onClick(_this, newMarker, e);
            });
          }

          _this._markers.push(newMarker);
          newMarker.setMap(_this._googleMap);
        });
      }
    }
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _this2 = this;

    var mainAttrs = this.getMainAttrs();

    var mapAttrs = {
      ref: function ref(_ref) {
        return _this2._map = _ref;
      },
      style: { height: this.props.height, width: this.props.width }
    };

    var component = void 0;
    switch (this.getNestingLevel()) {
      case 'bigBoxCollection':
      case 'bigBox':
      case 'boxCollection':
      case 'box':
        component = _react2.default.createElement(
          'div',
          mainAttrs,
          _react2.default.createElement('div', mapAttrs),
          this.getDisabledCover()
        );
        break;
      case 'inline':
        component = _react2.default.createElement(
          'span',
          null,
          _react2.default.createElement(
            _modal2.default,
            { ref_: function ref_(modal) {
                return _this2._modal = modal;
              } },
            _react2.default.createElement(
              'div',
              mainAttrs,
              _react2.default.createElement('div', mapAttrs),
              this.getDisabledCover()
            )
          ),
          _react2.default.createElement(_link2.default, { onClick: function onClick() {
              return _this2._modal.open();
            }, content: this.props.src })
        );
        break;
      default:
        component = null;
    }

    return component;
  }
  //@@viewOff:render

});

exports.default = GoogleMap;