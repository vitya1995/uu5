'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('../create-react-class.js');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _link = require('./link.js');

var _link2 = _interopRequireDefault(_link);

var _icon = require('./icon.js');

var _icon2 = _interopRequireDefault(_icon);

var _span = require('./span.js');

var _span2 = _interopRequireDefault(_span);

var _factory = require('./factory.js');

var _treeList = require('./tree-list.js');

var _treeList2 = _interopRequireDefault(_treeList);

require('./tree-item.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _createReactClass2.default)({
  displayName: 'tree-item',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Tree.Item"),
    nestingLevelList: UU5.Environment.getNestingLevelList('box', 'smallBox'),
    classNames: {
      main: _bricksNs2.default.css("tree-item"),
      link: _bricksNs2.default.css("tree-item-link"),
      icon: _bricksNs2.default.css("tree-item-icon"),
      iconHidden: _bricksNs2.default.css("tree-item-icon-hidden"),
      nav: _bricksNs2.default.css("tree-item-nav")
    },
    errors: {
      invalidParent: 'Parent of this component is not Tree, Tree.Item or Tree.List.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    label: _propTypes2.default.any,
    items: _propTypes2.default.array,
    iconExpanded: _propTypes2.default.string,
    iconCollapsed: _propTypes2.default.string,
    expanded: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      label: null,
      items: null,
      iconExpanded: null,
      iconCollapsed: null,
      expanded: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      expanded: this.props.expanded
    };
  },

  componentWillMount: function componentWillMount() {
    if (!(this.getParent() && (this.getParent().isTree || this.getParent().isTreeItem || this.getParent().isTreeList))) {
      this.showError("invalidParent");
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled && nextProps.expanded !== this.props.expanded && nextProps.expanded !== this.isExpanded()) {
      this.setState({ expanded: nextProps.expanded });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isTreeItem: function isTreeItem() {
    return true;
  },


  expand: function expand(setStateCallback) {
    this.setState({ expanded: true }, setStateCallback);
  },

  collapse: function collapse(setStateCallback) {
    this.setState({ expanded: false }, setStateCallback);
  },

  toggleExpanded: function toggleExpanded(setStateCallback) {
    this.setState(function (state) {
      return { expanded: !state.expanded };
    }, setStateCallback);
  },

  isExpanded: function isExpanded() {
    return this.state.expanded;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getItems: function _getItems() {
    var result = null;

    if (this.props.items || this.props.content || this.props.children) {
      result = _react2.default.createElement(_treeList2.default, { parent: this, items: this.props.items || this.getChildren(), iconExpanded: this.props.iconExpanded, iconCollapsed: this.props.iconCollapsed, hidden: !this.isExpanded(), controlled: true });
    }

    return result;
  },

  _onToggle: function _onToggle() {
    this.toggleExpanded();
    return this;
  },

  _getIcon: function _getIcon() {
    var icon;

    if (this.props.items || this.props.content || this.props.children) {
      if (this.isExpanded()) {
        icon = this.props.iconExpanded;
      } else {
        icon = this.props.iconCollapsed;
      }
    }

    var link = null;
    if (icon) {
      link = _react2.default.createElement(
        _link2.default,
        { className: this.getClassName('link'), onClick: this._onToggle, parent: this },
        _react2.default.createElement(_icon2.default, { className: this.getClassName('icon'), icon: icon })
      );
    } else {
      link = _react2.default.createElement(_icon2.default, { className: this.getClassName('iconHidden') });
    }

    return link;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? _react2.default.createElement(
      'li',
      this.getMainAttrs(),
      _react2.default.createElement(
        _factory.Div,
        { className: this.getClassName('nav') },
        this._getIcon(),
        ' ',
        _react2.default.createElement(_span2.default, { content: this.props.label })
      ),
      this._getItems(),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render
});