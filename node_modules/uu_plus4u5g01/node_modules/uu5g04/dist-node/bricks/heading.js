'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Heading = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require('./heading.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Heading = exports.Heading = (0, _createReactClass2.default)({
  displayName: 'Heading',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Heading"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("heading"),
      fixed: _bricksNs2.default.css("heading-fixed")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    fixed: _propTypes2.default.bool,
    fixedOnScroll: _propTypes2.default.bool,
    onScrollToFixed: _propTypes2.default.func, // not called in interface, just on scroll
    onScrollToBlocked: _propTypes2.default.func // not called in interface, just on scroll
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      fixed: false,
      fixedOnScroll: false,
      onScrollToFixed: null,
      onScrollToBlocked: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      fixed: this.props.fixed
    };
  },

  componentWillMount: function componentWillMount() {
    this.scrollPosition = 0;
    this.scrollStart = 0;
    return this;
  },

  componentDidMount: function componentDidMount() {
    if (this.props.fixedOnScroll || this.props.onScrollToFixed || this.props.onScrollToBlocked) {
      UU5.Environment.EventListener.addWindowEvent('scroll', this.getId(), this._scroll);
      UU5.Environment.EventListener.addWindowEvent('wheel', this.getId(), this._scroll);
      UU5.Environment.EventListener.addWindowEvent('DOMMouseScroll', this.getId(), this._scroll);
      UU5.Environment.EventListener.addWindowEvent('mousewheel', this.getId(), this._scroll);
    }
    return this;
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.scrollPosition = 0;
    if (nextProps.controlled) {
      this.setState({ fixed: nextProps.fixed });
      this._scroll(nextProps);
    }
    return this;
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this.props.fixedOnScroll || this.props.onScrollToFixed || this.props.onScrollToBlocked) {
      UU5.Environment.EventListener.removeWindowEvent('scroll', this.getId());
      UU5.Environment.EventListener.removeWindowEvent('wheel', this.getId());
      UU5.Environment.EventListener.removeWindowEvent('DOMMouseScroll', this.getId());
      UU5.Environment.EventListener.removeWindowEvent('mousewheel', this.getId());
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getOffsetTop: function getOffsetTop() {
    var component = document.getElementById(this.getId());
    return component ? component.offsetTop : null;

    // var componentJQuery = $("#" + this.getId());
    // return componentJQuery ? componentJQuery.offset().top : null;
  },

  setFixedValue: function setFixedValue(fixed, setStateCallback) {
    this.setState({ fixed: fixed }, setStateCallback);
    return this;
  },

  isFixed: function isFixed() {
    return this.state.fixed;
  },

  setFixed: function setFixed(setStateCallback) {
    this.setFixedValue(true, setStateCallback);
    return this;
  },

  setBlocked: function setBlocked(setStateCallback) {
    this.setFixedValue(false, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _scroll: function _scroll(props) {
    var prop = {
      onScrollToFixed: props.onScrollToFixed || this.props.onScrollToFixed,
      onScrollToBlocked: props.onScrollToBlocked || this.props.onScrollToBlocked,
      fixedOnScroll: props.fixedOnScroll || this.props.fixedOnScroll
    };

    var scrollPosition = window.scrollY;
    var scrollStart = this.getOffsetTop();

    if (scrollPosition > scrollStart && this.scrollPosition <= scrollStart) {
      //console.log(true, {oldScrollPosition: this.scrollPosition, newScrollPosition: scrollPosition, oldScrollStart: this.scrollOffsetStart, newScrollStart: scrollOffsetStart});
      this.scrollPosition = scrollPosition;
      this.scrollStart = scrollStart;

      if (typeof prop.onScrollToFixed === 'function') {
        prop.onScrollToFixed(this, scrollPosition, scrollStart);
      } else if (prop.fixedOnScroll) {
        this.setFixed();
      }
    } else if (scrollPosition <= this.scrollStart && this.scrollPosition > scrollStart) {
      //console.log(false, {oldScrollPosition: this.scrollPosition, newScrollPosition: 0, oldScrollStart: this.scrollOffsetStart, newScrollStart: 0});

      this.scrollPosition = 0;
      this.scrollStart = 0;

      if (typeof prop.onScrollToBlocked === 'function') {
        prop.onScrollToBlocked(this, scrollPosition, scrollStart);
      } else if (prop.fixedOnScroll) {
        this.setBlocked();
      }
    }
    return this;
  },

  _getMainAttrs: function _getMainAttrs() {
    var mainAttrs = this.getMainAttrs();

    mainAttrs.id = this.getId();
    this.state.fixed && (mainAttrs.className += " " + this.getClassName().fixed);

    return mainAttrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      this._getMainAttrs(),
      this.getChildren(),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render
});

exports.default = Heading;