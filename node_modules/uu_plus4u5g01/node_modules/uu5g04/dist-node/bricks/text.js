'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require('./text.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Text = exports.Text = (0, _createReactClass2.default)({
  displayName: 'Text',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Text"),
    nestingLevelList: UU5.Environment.getNestingLevelList('smallBox', 'inline'),
    classNames: {
      main: _bricksNs2.default.css("text uu5-common-text"),
      nestingLevelSmallBox: _bricksNs2.default.css("text-nesting-level-small-box"),
      nestingLevelInline: _bricksNs2.default.css("text-nesting-level-inline")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs: function _getMainAttrs() {
    var attrs = this.getMainAttrs();

    switch (this.getNestingLevel()) {
      case 'inline':
        attrs.className += ' ' + this.getClassName().nestingLevelInline;
        break;
      default:
        attrs.className += ' ' + this.getClassName().nestingLevelSmallBox;
    }

    return attrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var component = void 0;
    switch (this.getNestingLevel()) {
      case 'smallBox':
        component = _react2.default.createElement(
          'div',
          this._getMainAttrs(),
          this.getChildren(),
          this.getDisabledCover()
        );
        break;
      case 'inline':
        component = _react2.default.createElement(
          'span',
          this._getMainAttrs(),
          this.getChildren(),
          this.getDisabledCover()
        );
        break;
      default:
        component = null;
    }

    return component;
  }
  //@@viewOff:render
});

exports.default = Text;