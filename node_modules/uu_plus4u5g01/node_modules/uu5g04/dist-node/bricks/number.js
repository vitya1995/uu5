'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Number = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require('./number.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Number = exports.Number = (0, _createReactClass2.default)({
  displayName: 'Number',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Number"),
    nestingLevel: 'inline',
    classNames: {
      main: _bricksNs2.default.css("number"),
      negative: _bricksNs2.default.css("number-negative"),
      positive: _bricksNs2.default.css("number-positive"),
      zero: _bricksNs2.default.css("number-zero")
    },
    defaults: {
      event: UU5.Common.Tools.events.number,
      thousandSeparator: '&nbsp;',
      decimalSeparator: ',',
      regexpNumberParts: /\B(?=(\d{3})+(?!\d))/g,
      regexpNotDigit: /(\D)/g
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: _propTypes2.default.number,
    onChange: _propTypes2.default.func,
    thousandSeparator: _propTypes2.default.string,
    decimalSeparator: _propTypes2.default.string,
    minDecimalLength: _propTypes2.default.number,
    maxDecimalLength: _propTypes2.default.number,
    rounded: _propTypes2.default.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      value: null,
      onChange: null,
      thousandSeparator: null,
      decimalSeparator: null,
      minDecimalLength: null,
      maxDecimalLength: null,
      rounded: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      country: this.props.country,
      thousandSeparator: this.props.thousandSeparator,
      decimalSeparator: this.props.decimalSeparator
    };
  },

  componentWillMount: function componentWillMount() {
    UU5.Environment.EventListener.registerNumber(this.getId(), this._onChange);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        thousandSeparator: nextProps.thousandSeparator,
        decimalSeparator: nextProps.decimalSeparator,
        country: nextProps.country
      });
    }
  },


  componentWillUnmount: function componentWillUnmount() {
    UU5.Environment.EventListener.unregisterNumber(this.getId(), this._onChange);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getCountry: function getCountry() {
    return this.state.country;
  },
  setCountry: function setCountry(country, setStateCallback) {
    this.setOptions({ country: country ? country.toLowerCase() : country }, setStateCallback);
    return this;
  },
  getDecimalSeparator: function getDecimalSeparator() {
    return this.state.decimalSeparator;
  },
  setDecimalSeparator: function setDecimalSeparator(decimalSeparator, setStateCallback) {
    this.setOptions({ decimalSeparator: decimalSeparator }, setStateCallback);
    return this;
  },
  getThousandSeparator: function getThousandSeparator() {
    return this.state.thousandSeparator;
  },
  setThousandSeparator: function setThousandSeparator(thousandSeparator, setStateCallback) {
    this.setOptions({ thousandSeparator: thousandSeparator }, setStateCallback);
    return this;
  },
  setOptions: function setOptions(opt, setStateCallback) {
    this.setState({
      country: opt.country === undefined ? this.state.country : opt.country ? opt.country.toLowerCase() : opt.country,
      thousandSeparator: opt.thousandSeparator === undefined ? this.state.thousandSeparator : opt.thousandSeparator,
      decimalSeparator: opt.decimalSeparator === undefined ? this.state.decimalSeparator : opt.decimalSeparator
    }, setStateCallback);
    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onChange: function _onChange(opt) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange(this, opt);
    } else {
      this.setOptions(opt);
    }
    return this;
  },
  _formatNumber: function _formatNumber() {
    var number = this.props.value;

    if (number !== null) {
      var numberParts = number.toString().split('.');

      if (this.props.rounded !== null && this.props.rounded <= 0) {
        number = UU5.Common.Tools.round10(parseFloat(number), this.props.rounded);
      } else if (numberParts.length > 1) {
        if (this.props.maxDecimalLength && this.props.maxDecimalLength < numberParts[1].length) {
          numberParts[1] = numberParts[1].slice(0, this.props.maxDecimalLength - numberParts[1].length);
        }
        number = +numberParts.join('.');
      }

      var separators = this._getSeparators(number);

      var numberPartsRounded = number.toString().split('.');
      numberPartsRounded[0] = numberPartsRounded[0].replace(this.getDefault().regexpNumberParts, separators.thousandSeparator);

      var result = numberPartsRounded[0];
      if (numberPartsRounded.length > 1 || this.props.minDecimalLength) {
        result += separators.decimalSeparator + UU5.Common.Tools.ljust(numberPartsRounded[1] || 0, this.props.minDecimalLength, '0');
      }

      return result;
    }
  },
  _getSeparators: function _getSeparators(number) {
    var separators = {};
    var country = this.getCountry();

    if (country) {
      separators = this._getFormatByCountry(number, country);
    } else if (this.state.thousandSeparator === null && this.state.decimalSeparator === null) {
      separators = this._getFormatFromNumber(number);
    } else {
      separators.decimalSeparator = this.state.decimalSeparator;
      separators.thousandSeparator = this.state.thousandSeparator;
    }

    separators.decimalSeparator = separators.decimalSeparator || this.state.decimalSeparator || this.getDefault().decimalSeparator;
    separators.thousandSeparator = separators.thousandSeparator || this.state.thousandSeparator || this.getDefault().thousandSeparator;

    return separators;
  },
  _getFormatByCountry: function _getFormatByCountry(number, country) {
    var result = void 0;
    if (UU5.Environment.numberFormat[country]) {
      result = UU5.Environment.numberFormat[country];
    } else {
      result = this._getFormatFromNumber(number, country);
    }
    return result;
  },
  _getFormatFromNumber: function _getFormatFromNumber(number, country) {
    var localizedSeparators = number.toLocaleString(country);

    var matchNoNumber = localizedSeparators.toString().match(this.getDefault().regexpNotDigit);
    if (matchNoNumber && matchNoNumber[0] == '-') {
      matchNoNumber.shift();
    }

    var deciSeparator = null;
    var thouSeparator = null;
    if (matchNoNumber) {
      var count = matchNoNumber.length;
      if (count > 1) {
        deciSeparator = matchNoNumber[count - 1];
        thouSeparator = this._checkSpace(matchNoNumber[count - 2]);
      } else if (count == 1) {
        if (this.props.value < -999 || this.props.value > 999) {

          thouSeparator = this._checkSpace(matchNoNumber[count - 2]);
          deciSeparator = null;
        } else {
          thouSeparator = null;
          deciSeparator = matchNoNumber[count - 1];
        }
      } else {
        thouSeparator = null;
        deciSeparator = null;
      }
    }

    return { decimalSeparator: deciSeparator, thousandSeparator: thouSeparator };
  },
  _checkSpace: function _checkSpace(separator) {
    if (separator == ' ') {
      separator = '&nbsp;';
    }
    return separator;
  },
  _getMainAttrs: function _getMainAttrs() {
    var mainAttrs = this.getMainAttrs();
    var number = this.props.value;
    if (number !== null) {
      if (number < 0) {
        mainAttrs.className += ' ' + this.getClassName().negative;
      } else if (number == 0) {
        mainAttrs.className += ' ' + this.getClassName().zero;
      } else {
        mainAttrs.className += ' ' + this.getClassName().positive;
      }
    }
    return mainAttrs;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var mainAttrs = this._getMainAttrs();
    var numAttrs = { dangerouslySetInnerHTML: { __html: this._formatNumber(this.props.value) } };
    var result = _react2.default.createElement('span', _extends({}, mainAttrs, numAttrs));

    if (this.isDisabled()) {
      result = _react2.default.createElement(
        'span',
        mainAttrs,
        _react2.default.createElement('span', numAttrs),
        this.getDisabledCover()
      );
    } else {
      result = _react2.default.createElement('span', _extends({}, mainAttrs, numAttrs));
    }

    return this.getNestingLevel() ? result : null;
  }
  //@@viewOff:render
});

exports.default = Number;