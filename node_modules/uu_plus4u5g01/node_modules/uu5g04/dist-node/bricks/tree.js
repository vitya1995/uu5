'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _treeList = require('./tree-list.js');

var _treeList2 = _interopRequireDefault(_treeList);

var _treeItem = require('./tree-item.js');

var _treeItem2 = _interopRequireDefault(_treeItem);

require('./tree.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Tree = exports.Tree = (0, _createReactClass2.default)({
  displayName: 'Tree',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Tree"),
    nestingLevelList: UU5.Environment.getNestingLevelList('box', 'smallBox'),
    classNames: {
      main: _bricksNs2.default.css("tree"),
      size: _bricksNs2.default.css("tree-")
    },
    defaults: {
      childTagName: 'UU5.Bricks.Tree.Item'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    items: _propTypes2.default.array,
    iconExpanded: _propTypes2.default.string,
    iconCollapsed: _propTypes2.default.string,
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      items: null,
      iconExpanded: 'mdi-menu-down',
      iconCollapsed: 'mdi-menu-right',
      size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isTree: function isTree() {
    return true;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var mainPropsToPass = this.getMainPropsToPass();
    mainPropsToPass.className += ' ' + this.getClassName('size') + this.props.size;

    return this.getNestingLevel() ? _react2.default.createElement(
      _treeList2.default,
      _extends({}, mainPropsToPass, { items: this.props.items || this.getChildren(), iconExpanded: this.props.iconExpanded, iconCollapsed: this.props.iconCollapsed }),
      this.props.children && _react2.default.Children.toArray(this.props.children),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render

});

Tree.List = _treeList2.default;
Tree.Item = _treeItem2.default;

exports.default = Tree;