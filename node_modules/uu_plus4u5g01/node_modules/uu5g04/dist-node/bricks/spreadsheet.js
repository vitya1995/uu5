'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spreadsheet = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _dataTable = require('./data-table.js');

var _dataTable2 = _interopRequireDefault(_dataTable);

require('./spreadsheet.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Spreadsheet = exports.Spreadsheet = (0, _createReactClass2.default)({
  displayName: 'Spreadsheet',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.SectionMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Spreadsheet"),
    classNames: {
      main: _bricksNs2.default.css("spreadsheet")
    },
    lsi: function lsi() {
      return UU5.Environment.Lsi.Bricks.spreadsheet;
    },
    errors: {
      invalidDataType: "Data type of cell '%s' is not of type of '%s' of is not one of ('string', 'number' or 'date'). Cell value: '%s'"
    },
    defaults: {
      regExpNumbers: /[0-9]/g,
      regExpChars: /\D/g,
      regExpCellKey: /([A-Z]*)(\d)/g,
      regExpIsoDate: /^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:Z|[+-][01]\d:[0-5]\d)$/g,
      regExpY: /(y+)/
    },
    opt: {
      dummyLevel: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    striped: _propTypes2.default.bool,
    bordered: _propTypes2.default.bool,
    hover: _propTypes2.default.bool,
    condensed: _propTypes2.default.bool,
    cols: _propTypes2.default.object, //col props - 'A':{}
    rows: _propTypes2.default.object, //row props - '1':{} - rowType (header|body|footer)
    cells: _propTypes2.default.object //'A1':{'value':'','type':'','formula':'','format':'','colorSchema':'','className':''}
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      striped: false,
      bordered: false,
      hover: false,
      condensed: false,
      cols: null,
      rows: null,
      cells: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      sortedCells: this._getSortedCells(),
      headerRowIndex: this._getHeaderRowIndex(),
      footerRowIndex: this._getFooterRowIndex()
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        sortedCells: this._getSortedCells(nextProps),
        headerRowIndex: this._getHeaderRowIndex(nextProps),
        footerRowIndex: this._getFooterRowIndex(nextProps)
      });
    }
    return this;
  },


  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _checkCellProp: function _checkCellProp(prop, cell, coll, row) {
    var result = undefined;
    if (cell[prop] !== undefined) {
      result = cell[prop];
    } else if (coll && coll[prop] !== undefined) {
      result = coll[prop];
    } else if (row && row[prop] !== undefined) {
      result = row[prop];
    }
    return result;
  },

  _getSortedCells: function _getSortedCells(props) {
    var _this = this;

    props = props || this.props;

    var hasValidData = true;
    var cellsArray = [];

    Object.keys(props.cells).forEach(function (key) {
      var rowIndex = _this._getRowNumber(key) - 1;
      var rowArray = cellsArray[rowIndex] || [];

      var row = props.rows[_this._getRowNumber(key)];
      var coll = props.cols[_this._getColumnCharacter(key)];

      var cell = {
        key: key,
        value: props.cells[key].value,
        type: props.cells[key].type || coll && coll.type || row && row.type || null,
        format: props.cells[key].format || coll && coll.format || row && row.format || null,
        formula: props.cells[key].formula || coll && coll.formula || row && row.formula || null,
        colorSchema: _this._checkCellProp('colorSchema', props.cells[key], coll, row),
        //background: spreadSheet._checkCellProp('background', cells[key], coll, row),
        className: props.cells[key].className ? props.cells[key].className : '' + (coll && coll.className ? ' ' + coll.className : '') + (row && row.className ? ' ' + row.className : '')
      };

      var isValid = true;
      cell.type && (isValid = _this._isValidCellValueType(cell.value, cell.type));
      !isValid && _this.showError('invalidDataType', [key, cell.type, cell.value]);
      hasValidData && (hasValidData = isValid);

      rowArray.push(cell);
      cellsArray[rowIndex] = rowArray.sort();
    });

    return hasValidData ? cellsArray : null;
  },


  _getColumnCharacter: function _getColumnCharacter(cellKey) {
    return cellKey.replace(this.getDefault().regExpNumbers, '');
  },

  _getRowNumber: function _getRowNumber(cellKey) {
    return cellKey.replace(this.getDefault().regExpChars, '');
  },

  _isValidCellValueType: function _isValidCellValueType(value, type) {
    var result = false;
    switch (type) {
      case 'string':
        result = typeof value === 'string' || value === null;
        break;
      case 'number':
        result = typeof value === 'number';
        break;
      case 'date':
        result = typeof value === 'string' && value.match(this.getDefault().regExpIsoDate);
        break;
      default:
        result = false;
    }

    return result;
  },

  _getHeaderRowIndex: function _getHeaderRowIndex(props) {
    props = props || this.props;
    var index = void 0;
    var rows = props.rows;

    for (var key in rows) {
      if (rows[key].header) {
        index = key;
        break;
      }
    }

    return index;
  },
  _getFooterRowIndex: function _getFooterRowIndex(props) {
    props = props || this.props;
    var index = void 0;
    var rows = props.rows;

    for (var key in rows) {
      if (rows[key].footer) {
        index = key;
        break;
      }
    }

    return index;
  },


  _getBodyRows: function _getBodyRows() {
    var sortedCells = this.state.sortedCells;
    var headerRowIndex = this.state.headerRowIndex;
    var footerRowIndex = this.state.footerRowIndex;
    var spreadSheet = this;

    var rows = [];
    var row = [];

    sortedCells.forEach(function (cellsRow, i) {
      if (i + 1 != headerRowIndex && i + 1 != footerRowIndex) {
        cellsRow.forEach(function (cell, i) {
          row.push(spreadSheet._getCell(cell));
        });
        rows.push(row);
        row = [];
      }
    });

    return rows;
  },

  _getHeaderRow: function _getHeaderRow() {
    var sortedCells = this.state.sortedCells;
    var headerRowIndex = this.state.headerRowIndex;
    var spreadSheet = this;

    var row = [];
    sortedCells[headerRowIndex - 1].forEach(function (cell) {
      row.push(spreadSheet._getCell(cell));
    });

    return row.length > 0 ? row : null;
  },

  _getFooterRow: function _getFooterRow() {
    var sortedCells = this.state.sortedCells;
    var footerRowIndex = this.state.footerRowIndex;
    var spreadSheet = this;

    var row = [];
    sortedCells[footerRowIndex - 1].forEach(function (cell) {
      row.push(spreadSheet._getCell(cell));
    });

    return row.length > 0 ? row : null;
  },

  _getCell: function _getCell(cell) {
    var formattedValue = cell.formula ? this._getFormulaResult(cell.formula) : cell.value;

    if (cell.format && cell.type === 'date') {
      formattedValue = this._formatDate(new Date(formattedValue), cell.format);
    }

    return {
      className: cell.className,
      content: formattedValue,
      colorSchema: cell.colorSchema
      //background: cell.background
    };
  },

  _getFormulaResult: function _getFormulaResult(formula) {
    var spreadSheet = this;
    var cellsKeys = formula.match(this.getDefault().regExpCellKey);
    var formulaResultType = spreadSheet._getFormulaResultType(cellsKeys);

    var result;

    if (formulaResultType === 'string') {
      cellsKeys.forEach(function (key) {
        formula = formula.replace(key, spreadSheet.props.cells[key].value.toString());
      });
      result = formula;
    } else if (formulaResultType === 'date') {
      cellsKeys.forEach(function (key) {
        formula = formula.replace(key, new Date(spreadSheet.props.cells[key].value).getTime());
      });
      try {
        result = new Date(eval(formula)).toISOString();
      } finally {}
    } else if (formulaResultType === 'number') {
      cellsKeys.forEach(function (key) {
        formula = formula.replace(key, spreadSheet.props.cells[key].value);
      });
      try {
        result = eval(formula);
      } finally {}
    }

    return result;
  },

  // check all formula members types
  // if any is string -> returns string
  // if members are date or numbers -> returns date
  // if all members are number -> returns number
  _getFormulaResultType: function _getFormulaResultType(cellsKeys) {
    var formulaResultType;
    var spreadSheet = this;

    // check all formula keys value
    cellsKeys.forEach(function (key) {
      var cellValue = spreadSheet.props.cells[key].value;
      var cellType;

      // for each key returns their type
      if (typeof cellValue === 'number') {
        cellType = 'number';
      } else if (typeof cellValue === 'string') {
        if (new Date(cellValue).getTime() > 0 && cellValue.match(spreadSheet.getDefault().regExpIsoDate)) {
          cellType = 'date';
        } else {
          cellType = 'string';
        }
      } else if ((typeof cellValue === 'undefined' ? 'undefined' : _typeof(cellValue)) === 'object' && cellValue === null) {
        cellType = 'string';
      }

      // for date and number must check previous formula key type
      switch (cellType) {
        case 'string':
          // for string always -> string
          formulaResultType = cellType;
          break;
        case 'date':
          // for date and number -> date
          if (!formulaResultType || formulaResultType === 'date' || formulaResultType === 'number') {
            formulaResultType = 'date';
          }
          break;
        case 'number':
          // for number -> number
          if (!formulaResultType || formulaResultType === 'number') {
            formulaResultType = 'number';
          }
          break;
        default:
          break;
      }
    });

    return formulaResultType;
  },

  _formatDate: function _formatDate(date, format) {
    var config = {
      'M+': date.getMonth() + 1, //month
      'd+': date.getDate(), //day
      'h+': date.getHours(), //hour
      'm+': date.getMinutes(), //minute
      's+': date.getSeconds(), //second
      'q+': Math.floor((date.getMonth() + 3) / 3), //quarter
      'S': date.getMilliseconds() //millisecond
    };

    if (this.getDefault().regExpY.test(format)) {
      format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
    }
    for (var k in config) {
      if (new RegExp('(' + k + ')').test(format)) {
        format = format.replace(RegExp.$1, RegExp.$1.length === 1 ? config[k] : ('00' + config[k]).substr(('' + config[k]).length));
      }
    }
    return format;
  },

  _getMainProps: function _getMainProps() {
    var mainProps = this.getMainPropsToPass(["UU5.Common.BaseMixin", "UU5.Common.ElementaryMixin", "UU5.Common.SectionMixin"]);

    mainProps.striped = this.props.striped;
    mainProps.bordered = this.props.bordered;
    mainProps.hover = this.props.hover;
    mainProps.condensed = this.props.condensed;
    mainProps.header = this.props.header;
    mainProps.footer = this.props.footer;

    mainProps.headerRow = this._getHeaderRow();
    mainProps.rows = this._getBodyRows();
    mainProps.footerRow = this._getFooterRow();

    return mainProps;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var result;

    if (this.state.sortedCells && this.props.cells) {
      result = _react2.default.createElement(_dataTable2.default, this._getMainProps());
    } else {
      result = _react2.default.createElement(UU5.Common.Error, { content: this.getLsiComponent('invalidDataLabel') });
    }

    return result;
  }
  //@@viewOff:render
});

exports.default = Spreadsheet;