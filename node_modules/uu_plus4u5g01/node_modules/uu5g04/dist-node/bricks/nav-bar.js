'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavBar = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _navBarHeader = require('./nav-bar-header.js');

var _navBarHeader2 = _interopRequireDefault(_navBarHeader);

var _navBarNav = require('./nav-bar-nav.js');

var _navBarNav2 = _interopRequireDefault(_navBarNav);

var _navBarNavItem = require('./nav-bar-nav-item.js');

var _navBarNavItem2 = _interopRequireDefault(_navBarNavItem);

require('./nav-bar.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NavBar = exports.NavBar = (0, _createReactClass2.default)({
  displayName: 'NavBar',

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin, UU5.Common.NestingLevelMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("NavBar"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("nav-bar"),
      body: _bricksNs2.default.css("nav-bar-body"),
      navCover: _bricksNs2.default.css("nav-bar-cover"),
      navContainer: _bricksNs2.default.css("nav-bar-container"),
      open: _bricksNs2.default.css("nav-bar-open"),
      fixed: _bricksNs2.default.css("nav-bar-fixed-"),
      size: _bricksNs2.default.css("nav-bar-size-")
    },
    defaults: {
      tagNames: {
        header: 'UU5.Bricks.NavBar.Header',
        nav: 'UU5.Bricks.NavBar.Nav'
      },
      duration: 250
    },
    warnings: {
      cannotOpenIfAlwaysOpen: 'Cannot open navBar if alwaysOpen is set to true.',
      cannotCloseIfAlwaysOpen: 'Cannot close navBar if alwaysOpen is set to true.',
      cannotToggleIfAlwaysOpen: 'Cannot toggle navBar if alwaysOpen is set to true.'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    fixed: _propTypes2.default.oneOf(['top', 'bottom']),
    smoothScroll: _propTypes2.default.number,
    offset: _propTypes2.default.number,
    open: _propTypes2.default.bool,
    alwaysOpen: _propTypes2.default.bool,
    iconOpen: _propTypes2.default.string,
    iconClosed: _propTypes2.default.string,
    onOpen: _propTypes2.default.func,
    onClose: _propTypes2.default.func,
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      fixed: null,
      smoothScroll: null,
      offset: null,
      open: false,
      alwaysOpen: false,
      iconOpen: 'mdi-menu',
      iconClosed: 'mdi-menu',
      onOpen: null,
      onClose: null,
      size: 'm'
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      height: this._getHeight(this.props.open),
      offset: this.props.offset,
      expanded: this.props.open
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      var newState = {};
      (nextProps.alwaysOpen || nextProps.open) && this.open();
      if (nextProps.offset !== undefined && nextProps.offset !== this.getOffset()) {
        newState.offset = nextProps.offset;
      }
      this.setState(newState);
    }
  },
  componentDidMount: function componentDidMount() {
    var newState = {};

    if (this.props.fixed === 'top' && !this.state.offset) {
      newState.offset = UU5.Common.Tools.getOuterHeight(this);
    }

    if (this.props.alwaysOpen || this.props.open) {
      newState.height = null;
      newState.offset && (newState.offset += newState.height);
    }

    Object.keys(newState).length && this.setState(newState);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isNavBar: function isNavBar() {
    return true;
  },
  isOpen: function isOpen() {
    return this.state.expanded;
  },
  open: function open(setStateCallback) {
    var _this = this;

    if (!this.props.alwaysOpen) {
      if (!this.state.expanded) {
        var height = this._getHeight(true);
        this.setState({ height: 0, expanded: true }, function () {
          _this.setState({ height: height }, function () {
            _this._timer && clearTimeout(_this._timer);
            _this._timer = setTimeout(function () {
              return _this.setAsyncState({ height: null }, setStateCallback);
            }, _this.getDefault().duration);
          });
        });
      }
    } else if (typeof setStateCallback === 'function') {
      this.showWarning('cannotOpenIfAlwaysOpen');
    }
    return this;
  },
  close: function close(setStateCallback) {
    var _this2 = this;

    if (!this.props.alwaysOpen) {

      var height = this._getHeight(true);
      this.setState({ height: height }, function () {
        // TODO: must to be timeout because of animation
        setTimeout(function () {
          return _this2.setAsyncState({ height: 0, expanded: false }, setStateCallback);
        }, 0);
      });
    } else if (typeof setStateCallback === 'function') {
      this.showWarning('cannotCloseIfAlwaysOpen');
    }
    return this;
  },
  toggle: function toggle(setStateCallback) {
    if (!this.props.alwaysOpen) {
      // TODO: to setState function
      this.state.expanded ? this.close(setStateCallback) : this.open(setStateCallback);
    } else if (typeof setStateCallback === 'function') {
      this.showWarning('cannotToggleIfAlwaysOpen', null);
    }
    return this;
  },
  getOffset: function getOffset() {
    return this.state.offset;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  expandChildProps_: function expandChildProps_(child) {
    var newChildProps = UU5.Common.Tools.mergeDeep({}, child.props);
    newChildProps._size = this.props.size;
    return newChildProps;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getHeight: function _getHeight(expanded) {
    return expanded && this._container ? UU5.Common.Tools.getOuterHeight(this._container, true) : 0;
  },
  _getMainAttrs: function _getMainAttrs() {
    var mainAttrs = this.getMainAttrs();
    mainAttrs.className += ' ' + this.getClassName('size') + this.props.size;
    this.props.fixed && (mainAttrs.className += ' ' + this.getClassName('fixed') + this.props.fixed);
    this.isOpen() && (mainAttrs.className += ' ' + this.getClassName().open);

    mainAttrs.style = mainAttrs.style || {};
    var time = this.getDefault().duration / 1000;
    ['WebkitTransitionDuration', 'MozTransitionDuration', 'MsTransitionDuration', 'OTransitionDuration', 'transitionDuration'].forEach(function (style) {
      mainAttrs.style[style] = time + 's';
    });

    return mainAttrs;
  },
  _prepareHeader: function _prepareHeader(headerProps) {
    var headerPropsToPass = {
      id: this.getId() + '-header',
      parent: this
    };

    var newHeaderProps = headerProps ? UU5.Common.Tools.mergeDeep(headerPropsToPass, headerProps) : headerPropsToPass;
    newHeaderProps._icon = this.isOpen() ? this.props.iconOpen : this.props.iconClosed;
    newHeaderProps._hamburger = !this.props.alwaysOpen;
    newHeaderProps._onOpen = typeof this.props.onOpen === 'function' ? this.props.onOpen : null;
    newHeaderProps._onClose = typeof this.props.onClose === 'function' ? this.props.onClose : null;
    newHeaderProps._size = this.props.size;

    return _react2.default.createElement(_navBarHeader2.default, newHeaderProps);
  },
  _prepareNavs: function _prepareNavs(navsProps) {
    return navsProps.map(function (props, i) {
      props.key = props.key || 'nav-' + i;
      return _react2.default.createElement(_navBarNav2.default, props);
    });
  },
  _prepareChildren: function _prepareChildren() {
    var _this3 = this;

    var children = this.getChildren();
    var headerProps = null;

    var newNavProps = { smoothScroll: this.props.smoothScroll, offset: this.getOffset(), parent: this };
    var navsProps = [];

    children && children.map(function (child) {
      switch (UU5.Common.Tools.getChildTagName(child)) {
        case _this3.getDefault().tagNames.header:
          headerProps = child.props;
          break;
        case _this3.getDefault().tagNames.nav:
          // TODO: max 3?
          var newProps = {};
          // default values is used if child is set as react element so null or undefined will not set!!!
          for (var key in child.props) {
            child.props[key] !== null && child.props[key] !== undefined && (newProps[key] = child.props[key]);
          }
          navsProps.push(UU5.Common.Tools.merge({}, newNavProps, newProps));
          break;
      }
    });

    navsProps.length === 0 && navsProps.push(newNavProps);

    return {
      header: this._prepareHeader(headerProps),
      navs: this._prepareNavs(navsProps)
    };
  },
  _getNavContainerId: function _getNavContainerId() {
    return this.getId() + '-navContainer';
  },
  _getNavCoverId: function _getNavCoverId() {
    return this.getId() + '-navCover';
  },
  _getNavHeight: function _getNavHeight() {
    return this.state.height;
  },
  _countNavHeight: function _countNavHeight() {
    return UU5.Common.Tools.getOuterHeight(this._container, true);
  },
  _getNavCoverProps: function _getNavCoverProps() {
    return {
      className: this.getClassName().navCover,
      id: this._getNavCoverId(),
      style: {
        height: this._getNavHeight()
      }
    };
  },
  _getNavContainerProps: function _getNavContainerProps() {
    return {
      id: this._getNavContainerId(),
      className: this.getClassName().navContainer
    };
  },
  _getNavBodyProps: function _getNavBodyProps() {
    return {
      className: this.getClassName().body
    };
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _this4 = this;

    var childrenObject = this._prepareChildren();

    return _react2.default.createElement(
      'nav',
      this._getMainAttrs(),
      _react2.default.createElement(
        'div',
        this._getNavBodyProps(),
        childrenObject.header,
        _react2.default.createElement(
          'div',
          this._getNavCoverProps(),
          _react2.default.createElement(
            'div',
            _extends({}, this._getNavContainerProps(), { ref: function ref(navContainer) {
                return _this4._container = navContainer;
              } }),
            childrenObject.navs
          )
        )
      ),
      this.getDisabledCover()
    );
  }
  //@@viewOff:render

});

NavBar.Header = _navBarHeader2.default;
NavBar.Nav = _navBarNav2.default;
NavBar.Nav.Item = _navBarNavItem2.default;

exports.default = NavBar;