'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressBar = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _progressBarCover = require('./progress-bar-cover.js');

var _progressBarCover2 = _interopRequireDefault(_progressBarCover);

var _progressBarItem = require('./progress-bar-item.js');

var _progressBarItem2 = _interopRequireDefault(_progressBarItem);

require('./progress-bar.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProgressBar = exports.ProgressBar = (0, _createReactClass2.default)({
  displayName: 'ProgressBar',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("ProgressBar"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("progress-bar"),
      size: _bricksNs2.default.css("progress-bar-size-")
    },
    defaults: {
      childTagName: 'UU5.Bricks.ProgressBar.Item',
      itemName: 'progressBarItem'
    },
    warnings: {
      increaseImpossible: 'Progress Bar is full. Cannot increase above %d.',
      decreaseImpossible: 'Progress Bar is empty. Cannot decrease below %d.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    progress: _propTypes2.default.number,
    striped: _propTypes2.default.bool,
    animated: _propTypes2.default.bool,
    allowTags: _propTypes2.default.arrayOf(_propTypes2.default.string),
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      progress: 0,
      striped: false,
      animated: false,
      allowTags: [],
      size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isProgressBar: function isProgressBar() {
    return true;
  },


  isPossibleChangeProgress: function isPossibleChangeProgress(progress) {
    var count = 0;
    this.eachRenderedChild(function (progressBar) {
      count += progressBar.getProgress();
    });
    return count + progress >= 0 && count + progress <= 100;
  },

  isPossibleIncrease: function isPossibleIncrease(increasedValue) {
    return this.isPossibleChangeProgress(increasedValue);
  },

  isPossibleDecrease: function isPossibleDecrease(decreasedValue) {
    return this.isPossibleChangeProgress(-decreasedValue);
  },

  getProgress: function getProgress(name) {
    return this._getProgressBarItem(name).getProgress();
  },

  setProgress: function setProgress(params, setStateCallback) {
    typeof params === 'number' && (params = { value: params });
    return this._getProgressBarItem(params.name).setProgress(params, setStateCallback);
  },

  // value number or object {value, name,  content, striped, animated}
  increase: function increase(params, setStateCallback) {
    typeof params === 'number' && (params = { value: params });

    if (this.isPossibleIncrease(params.value)) {
      this._getProgressBarItem(params.name).increase(params, setStateCallback);
    } else {
      this.showWarning('increaseImpossible', params.value);
    }
    return this;
  },

  decrease: function decrease(params, setStateCallback) {
    typeof params === 'number' && (params = { value: params });

    if (this.isPossibleDecrease(params.value)) {
      this._getProgressBarItem(params.name).decrease(params, setStateCallback);
    } else {
      this.showWarning('decreaseImpossible', params.value);
    }
    return this;
  },

  getItem: function getItem(name) {
    return this.getRenderedChildByName(name);
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function shouldChildRender_(child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getProgressBarItem: function _getProgressBarItem(name) {
    return this.getItem(name || this.getDefault().itemName);
  },

  _getMainProps: function _getMainProps() {
    var props = this.getMainPropsToPass();

    props.className += ' ' + this.getClassName('size') + this.props.size;

    return props;
  },

  _getChildProps: function _getChildProps() {
    return {
      name: this.getDefault().itemName,
      progress: this.props.progress,
      content: this.getContent(),
      striped: this.props.striped,
      animated: this.props.animated
    };
  },

  _buildChild: function _buildChild() {
    var child = _react2.default.createElement(_progressBarItem2.default, this._getChildProps());
    return this.cloneChild(child, this.expandChildProps(child, 0));
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? _react2.default.createElement(
      _progressBarCover2.default,
      this._getMainProps(),
      this.props.children ? this.getChildren() : this._buildChild()
    ) : null;
  }
  //@@viewOff:render
});

ProgressBar.Item = _progressBarItem2.default;

exports.default = ProgressBar;