'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require('./tree-list.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _createReactClass2.default)({
  displayName: 'tree-list',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Tree.List"),
    classNames: {
      main: _bricksNs2.default.css("tree-list")
    },
    defaults: {
      childTagName: 'UU5.Bricks.Tree.Item'
    },
    errors: {
      invalidParent: 'Parent of this component is not Tree, Tree.Item or Tree.List.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    items: _propTypes2.default.array,
    iconExpanded: _propTypes2.default.string,
    iconCollapsed: _propTypes2.default.string,
    allowTags: _propTypes2.default.arrayOf(_propTypes2.default.string)
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      items: null,
      iconExpanded: null,
      iconCollapsed: null,
      allowTags: []
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function componentWillMount() {
    if (!(this.getParent() && (this.getParent().isTree || this.getParent().isTreeItem || this.getParent().isTreeList))) {
      this.showError("invalidParent");
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isTreeList: function isTreeList() {
    return true;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  expandChildProps_: function expandChildProps_(child) {
    var newChildProps = UU5.Common.Tools.mergeDeep({}, child.props);
    newChildProps.iconExpanded = newChildProps.iconExpanded || this.props.iconExpanded;
    newChildProps.iconCollapsed = newChildProps.iconCollapsed || this.props.iconCollapsed;
    return newChildProps;
  },

  shouldChildRender_: function shouldChildRender_(child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getItems: function _getItems() {
    var list = this;
    var content = this.getContent();

    if (this.props.items) {
      content = this.props.items.map(function (itemProps) {
        var result;
        if (typeof itemProps.type === 'function') {
          result = itemProps;
        } else {
          result = { tag: list.getDefault().childTagName, props: itemProps };
        }
        return result;
      });
    }
    return this.buildChildren({ content: content, children: this.props.children });
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return _react2.default.createElement(
      'ul',
      this.getMainAttrs(),
      this._getItems(),
      this.getDisabledCover()
    );
  }
  //@@viewOff:render
});