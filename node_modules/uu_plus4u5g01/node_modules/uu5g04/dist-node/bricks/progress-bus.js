'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressBus = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _alert = require('./alert.js');

var _alert2 = _interopRequireDefault(_alert);

var _button = require('./button.js');

var _button2 = _interopRequireDefault(_button);

require('./progress-bus.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProgressBus = exports.ProgressBus = (0, _createReactClass2.default)({
  displayName: 'ProgressBus',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("ProgressBus"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("progress-bus"),
      open: _bricksNs2.default.css("progress-bus-open"),
      alert: _bricksNs2.default.css("progress-bus-alert"),
      body: _bricksNs2.default.css("progress-bus-body"),
      message: _bricksNs2.default.css("progress-bus-message"),
      button: _bricksNs2.default.css("progress-bus-button"),
      buttons: _bricksNs2.default.css("progress-bus-buttons"),
      pending: _bricksNs2.default.css("progress-bus-pending"),
      position: _bricksNs2.default.css("progress-bus-"),
      alertPosition: _bricksNs2.default.css("progress-bus-alert-")
    },
    warnings: {
      itemMissing: 'Item id %s was not in item list.'
    },
    errors: {
      itemMissing: 'Item id %s was not in item list.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    position: _propTypes2.default.oneOf(['left', 'center', 'right']),
    verticalPosition: _propTypes2.default.oneOf(['top', 'bottom']),
    alertPosition: _propTypes2.default.oneOf(['top', 'bottom'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      position: 'center',
      verticalPosition: 'top',
      alertPosition: 'top'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      openId: null,
      itemList: {}
    };
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._timeouts) {
      for (var key in this._timeouts) {
        clearTimeout(this._timeouts[key]);
      }
    }
  },


  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  addItem: function addItem(itemProps, setStateCallback) {
    var id = UU5.Common.Tools.generateUUID();
    this.setState(function (state) {
      var itemList = UU5.Common.Tools.mergeDeep({}, state.itemList);
      itemList[id] = {
        code: itemProps.code || id,
        message: itemProps.message,
        colorSchema: itemProps.colorSchema || 'grey',
        pending: itemProps.pending || false,
        closeDisabled: itemProps.closeDisabled || false,
        timeout: itemProps.timeout,
        onClick: itemProps.onClick,
        onClose: itemProps.onClose
      };

      return { itemList: itemList };
    }, setStateCallback);
    return id;
  },
  removeItem: function removeItem(itemId, setStateCallback) {
    var _this = this;

    this.setState(function (state) {
      var itemList = UU5.Common.Tools.mergeDeep({}, state.itemList);
      var result = void 0;
      if (itemList[itemId]) {
        delete itemList[itemId];
        result = { itemList: itemList };
      } else {
        _this.showWarning('itemMissing', itemId);
      }
      return result;
    }, setStateCallback);

    return this;
  },
  getItem: function getItem(itemId) {
    return this.state.itemList ? this.state.itemList[itemId] : null;
  },
  getItemByCode: function getItemByCode(code) {
    var item = null;

    var ids = Object.keys(this.state.itemList);
    for (var i = 0; i < ids.length; i++) {
      if (this.state.itemList[ids[i]].code === code) {
        item = this.state.itemList[ids[i]];
        item.id = ids[i];
        break;
      }
    }
    return item;
  },
  getItemsByCode: function getItemsByCode(code) {
    var _this2 = this;

    var itemList = [];
    Object.keys(this.state.itemList).forEach(function (id) {
      var item = _this2.state.itemList[id];
      if (item.code === code) {
        itemList.push(UU5.Common.Tools.merge({}, item, { id: id }));
      }
    });
    return itemList;
  },
  setItem: function setItem(itemId, itemProps, setStateCallback) {
    var _this3 = this;

    this.setState(function (state) {
      var result = void 0;
      state.itemList = UU5.Common.Tools.mergeDeep({}, state.itemList);
      if (state.itemList[itemId]) {
        var newItemList = state.itemList;
        newItemList[itemId] = itemProps;
        result = { itemList: newItemList };
      } else {
        _this3.showError('itemMissing', itemId);
      }
      return result;
    }, setStateCallback);

    return this;
  },
  updateItem: function updateItem(itemId, itemProps, setStateCallback) {
    var _this4 = this;

    this.setState(function (state) {
      var result = void 0;
      state.itemList = UU5.Common.Tools.mergeDeep({}, state.itemList);
      if (state.itemList[itemId]) {
        var newItemList = state.itemList;
        newItemList[itemId] = UU5.Common.Tools.merge(newItemList[itemId], itemProps);
        result = { itemList: newItemList };
      } else {
        _this4.showError('itemMissing', itemId);
      }
      return result;
    }, setStateCallback);

    return this;
  },
  getItemList: function getItemList() {
    var _this5 = this;

    var itemList = [];
    Object.keys(this.state.itemList).forEach(function (id) {
      var item = _this5.state.itemList[id];
      itemList.push(UU5.Common.Tools.merge(item, { id: id }));
    });
    return itemList;
  },
  showAlert: function showAlert(itemId, setStateCallback) {
    if (this.state.itemList[itemId]) {
      this.setState({ openId: itemId }, setStateCallback);
    } else {
      this.showError('itemMissing', itemId);
    }
    return this;
  },
  hideAlert: function hideAlert(itemId, setStateCallback) {
    if (this.state.itemList[itemId] && this.state.openId === itemId) {
      this.setState({ openId: null }, setStateCallback);
    } else {
      this.showError('itemMissing', itemId);
    }
    return this;
  },


  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getAlert: function _getAlert() {
    var _this6 = this;

    var result = void 0;
    var itemProps = this.getItem(this.state.openId);
    var className = this.getClassName().alert + ' ' + this.getClassName().alertPosition + this.props.alertPosition;

    if (itemProps && itemProps.message) {
      result = _react2.default.createElement(_alert2.default, { content: itemProps.message, onClose: itemProps.onClose || function () {
          return _this6.removeItem(_this6.state.openId);
        }, closeDisabled: itemProps.closeDisabled, colorSchema: itemProps.colorSchema, className: className, hidden: false, block: true });
    }

    return result;
  },
  _getItems: function _getItems() {
    var _this7 = this;

    this._timeouts = this._timeouts || {};
    return Object.keys(this.state.itemList).map(function (key) {
      var itemProps = _this7.state.itemList[key];
      var onClick = itemProps.message ? itemProps.onClick || function () {
        return _this7.showAlert(key);
      } : null;

      if (itemProps.timeout) {
        _this7._timeouts[key] = _this7._timeouts[key] || setTimeout(function () {
          return _this7.state.itemList[key] && _this7.removeItem(key);
        }, itemProps.timeout);
      }

      var className = itemProps.pending ? _this7.getClassName().button + ' ' + _this7.getClassName().pending : _this7.getClassName().button;

      return _react2.default.createElement(_button2.default, { onClick: onClick, pressed: _this7.state.openId === key, key: key, content: ' ', colorSchema: itemProps.colorSchema, className: className, disabled: !itemProps.message });
    });
  },

  //@@viewOff:componentSpecificHelpers

  // Render
  _getMainAttrs: function _getMainAttrs() {
    var mainAttrs = this.getMainAttrs();
    mainAttrs.className += ' ' + this.getClassName().position + this.props.position;
    mainAttrs.className += ' ' + this.getClassName().position + this.props.verticalPosition;
    mainAttrs.className += Object.keys(this.state.itemList).length > 0 ? ' ' + this.getClassName().open : null;
    return mainAttrs;
  },

  //@@viewOn:render
  render: function render() {
    var mainAttrs = this._getMainAttrs();

    var result = _react2.default.createElement('div', mainAttrs);

    if (Object.keys(this.state.itemList).length > 0) {
      result = _react2.default.createElement(
        'div',
        mainAttrs,
        this.props.alertPosition === 'top' && this._getAlert(),
        _react2.default.createElement(
          'div',
          { className: this.getClassName().body },
          _react2.default.createElement(
            'div',
            { className: this.getClassName().message },
            this.getChildren()
          ),
          _react2.default.createElement(
            'div',
            { className: this.getClassName().buttons },
            this._getItems()
          )
        ),
        this.props.alertPosition === 'bottom' && this._getAlert()
      );
    }

    return this.getNestingLevel() ? result : null;
  }
  //@@viewOff:render
});

exports.default = ProgressBus;