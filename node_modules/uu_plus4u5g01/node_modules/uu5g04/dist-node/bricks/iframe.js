'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Iframe = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('../create-react-class.js');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _loading = require('./loading.js');

var _loading2 = _interopRequireDefault(_loading);

require('./iframe.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Iframe = exports.Iframe = (0, _createReactClass2.default)({
  displayName: 'Iframe',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Iframe"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("iframe"),
      inline: _bricksNs2.default.css("iframe-inline"),
      disabledWrapper: _bricksNs2.default.css("iframe-disabled-wrapper uu5-common-disabled-cover-wrapper")
    },
    defaults: {
      regexpIsUrl: /^(file|ftp|http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/=]*)/g,
      regexpBearer: /Bearer[^&]+/,
      regexpUnits: /[a-zA-Z%]+$/
    },
    warnings: {
      cors: 'Url %s cannot be automatically resized because of another origin.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    src: _propTypes2.default.string,
    resize: _propTypes2.default.bool,
    height: _propTypes2.default.string,
    syncTimeout: _propTypes2.default.number,
    inline: _propTypes2.default.bool,
    iframeAttrs: _propTypes2.default.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      src: 'https://unicorn.com',
      resize: false,
      height: "250",
      syncTimeout: 1,
      inline: false,
      iframeAttrs: {}
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      loading: this.props.resize,
      height: 0,
      width: 0,
      visible: !this.props.syncTimeout
    };
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    if (this.props.syncTimeout) {
      this._timeout = setTimeout(function () {
        return _this.setAsyncState({ visible: true });
      }, this.props.syncTimeout);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this._timeout && clearTimeout(this._timeout);
  },


  // componentWillReceiveProps(nextProps){
  //   if (nextProps.controlled){
  //     this.setState({
  //       loading: nextProps.resize,
  //       visible: nextProps.sync
  //     })
  //   }
  //   return this;
  // },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  resize: function resize(setStateCallback) {
    var _this2 = this;

    var height = void 0;
    var width = void 0;

    try {
      var body = document.getElementById(this._getIframeId()).contentWindow.document.body;
      height = body.scrollHeight;
      width = body.scrollWidth;
    } catch (ex) {
      this.showWarning('cors', this.props.src.replace(this.getDefault().regexpBearer, 'Bearer...'), { context: { error: ex } });
    }

    if (height || width) {
      var lastWidth = this.state.width;
      var lastHeight = this.state.height;
      var newState = { loading: false, height: height };

      if (this.props.inline) {
        if (lastWidth >= width) {
          newState.width = 0;
        } else {
          newState.width = width;
        }

        if (lastHeight >= height) {
          newState.height = 0;
        } else {
          newState.height = height;
        }

        this.setState(newState, function () {
          var body = document.getElementById(_this2._getIframeId()).contentWindow.document.body;
          height = body.scrollHeight;
          width = body.scrollWidth;

          var renewState = {};
          if (newState.width === 0) {
            renewState.width = width;
          }

          if (newState.height === 0) {
            renewState.height = height;
          }

          if (Object.keys(renewState).length) {
            _this2.setState(renewState, setStateCallback);
          } else {
            typeof setStateCallback === 'function' && setStateCallback();
          }
        });
      } else {
        if (lastWidth < width) {
          newState.width = width;
        } else if (lastWidth === width) {
          newState.width = 0;
        }

        this.setState(newState, function () {
          var body = document.getElementById(_this2._getIframeId()).contentWindow.document.body;
          height = body.scrollHeight;
          width = body.scrollWidth;

          if (lastWidth === width && lastWidth > width) {
            _this2.setState({ width: null }, setStateCallback);
          } else {
            typeof setStateCallback === 'function' && setStateCallback();
          }
        });
      }
    } else {
      typeof setStateCallback === 'function' && setStateCallback();
    }

    return this;
  },
  setSize: function setSize(width, height, setStateCallback) {
    this.setState({ loading: false, width: width, height: height }, setStateCallback);
    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onLoad: function _onLoad(e) {
    var _this3 = this;

    if (this.state.loading) {
      this.resize(function () {
        _this3.props.mainAttrs && typeof _this3.props.mainAttrs.onLoad === 'function' && _typeof(_this3.props.mainAttrs.onLoad(e));
      });
    } else {
      this.props.mainAttrs && typeof this.props.mainAttrs.onLoad === 'function' && _typeof(this.props.mainAttrs.onLoad(e));
    }

    return this;
  },
  _getIframeId: function _getIframeId() {
    return this.getId() + '-iframe';
  },
  _getIframeAttrs: function _getIframeAttrs() {
    var attrs = UU5.Common.Tools.merge({}, this.props.iframeAttrs);
    if (this._isUrl(this.props.src)) {
      attrs.src = this.props.src;
    } else {
      attrs.srcDoc = this.props.src;
    }

    if (this.props.resize) {
      attrs.id = this._getIframeId();
      attrs.onLoad = this._onLoad;
      if (this.state.height !== null) {
        attrs.style = attrs.style || {};
        attrs.style.height = this.state.height;
      }

      if (this.state.width !== null) {
        attrs.style = attrs.style || {};
        attrs.style.width = this.state.width;
      }
    } else {
      attrs.style = attrs.style || {};
      if (!attrs.style.height) {
        attrs.style.height = this.getDefault().regexpUnits.test(this.props.height) ? this.props.height : this.props.height + "px";
      }
    }

    return attrs;
  },
  _getMainAttrs: function _getMainAttrs() {
    var mainAttrs = this.getMainAttrs();
    this.props.inline && (mainAttrs.className += ' ' + this.getClassName().inline);
    return mainAttrs;
  },
  _isUrl: function _isUrl(string) {
    return !!string.match(this.getDefault().regexpIsUrl);
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var loading = void 0;
    if (this.state.loading) {
      loading = _react2.default.createElement(_loading2.default, null);
    }

    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      this._getMainAttrs(),
      loading,
      this.state.visible && _react2.default.createElement('iframe', this._getIframeAttrs()),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render

});

exports.default = Iframe;