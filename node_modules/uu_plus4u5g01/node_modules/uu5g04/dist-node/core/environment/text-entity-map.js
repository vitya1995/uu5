'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var HtmlEntityMap = {
  re: /(&#?[a-z0-9]+;)/g,
  items: {
    '&amp;': '&',
    '&#38;': '&',
    '&apos;': "'",
    '&#39;': "'",
    '&quot;': '"',
    '&#34;': '"',
    '&lt;': '<',
    '&#060;': '<',
    '&gt;': '>',
    '&#062;': '>',
    '&hellip;': '…',
    '&#133;': '…',
    '&mdash;': '—',
    '&#8212;': '—',
    '&pi;': 'π',
    '&#8719;': 'π',
    '&reg;': '®',
    '&#174;': '®',
    '&#8730;': '√',
    '&radic;': '√',
    '&#8734;': '∞',
    '&infin;': '∞',
    '&#160;': ' ',
    '&nbsp;': ' ',
    '&#8592;': '←',
    '&larr;': '←',
    '&#8594;': '→',
    '&rarr;': '→',
    '&#8595;': '?',
    '&darr;': '?',
    '&#169;': '©',
    '&copy;': '©',
    '&trade;': '™',
    '&pound;': '£',
    '&euro;': '€',
    '&prod;': '∏',
    '&sum;': '∑',
    '&int;': '∫',
    '&le;': '≤',
    '&ge;': '≥'
  }
};

var AsciiEmojiMap = {
  //:) :D :O :* :( :| :S :Z :$ :P :/   ;-)     :'-(   ,:-(   ,:-)   O:-)       8-) X-)    :-")  :'-)        :,'-(          ";-(   ]:-)   <3
  re: /(:-[)(DOo*|$SsZzP/@]|;-\)|:[',]-\(|,:-\(|,:-\)|[0oO]:-\)|[B8Xx]-\)|:-"\)|:[',]-[)D]|:(?:,'|',)-\(|";-\(|]:-\)|<\/?3)/g,
  items: {
    ":-)": "😃",
    ';-)': "😉",
    ":-(": "😦",
    ":'-(": "😢",
    ":,-(": "😢",
    ":-D": "😄",
    ":-o": "😮",
    ":-O": "😮",
    ":-*": "😘",
    ",:-(": "😓",
    ",:-)": "😅",
    "0:-)": "😇",
    "O:-)": "😇",
    "o:-)": "😇",
    "8-)": "😎",
    "B-)": "😎",
    ':-")': "😊",
    ":-$": "😒",
    ":'-)": "😂",
    ":'-D": "😂",
    ":,-)": "😂",
    ":,-D": "😂",
    ":,'-(": "😭",
    '";-(': "😭",
    ":-/": "😕",
    ":-@": "😡",
    ":-P": "😛",
    ":-S": "😒",
    ":-Z": "😒",
    ":-s": "😒",
    ":-z": "😒",
    ":-|": "😐",
    "]:-)": "😈",
    "X-)": "😆",
    "x-)": "😆",
    '</3': '💔',
    '<3': '💗'
  }
};

var ExtendedEmojiMap = {
  re: /#\(([a-z\-]+)\)/g,
  items: {
    'baby': '👶',
    'boy': '👦',
    'girl': '👧',
    'man': '👨',
    'woman': '👩',
    'old-man': '👴',
    'old-woman': '👵',
    'cow': '🐄',
    'horse': '🐎',
    'tiger': '🐅',
    'elephant': '🐘',
    'unicorn-face': '🦄',
    'pig': '🐖',
    'pig-face': '🐷',
    'pig-nose': '🐽',
    'rat': '🐀',
    'mouse': '🐁',
    'hamster-face': '🐹',
    'bat': '🦇',
    'chicken': '🐔',
    'dolphin': '🐬',
    'fish': '🐟',
    'crocodile': '🐊',
    'snake': '🐍',
    'whale': '🐋',
    'octopus': '🐙',
    'spider': '🕷',
    'panda-face': '🐼',
    'bear-face': '🐻',
    'boar': '🐗',
    'dog': '🐕',
    'dog-face': '🐶',
    'cat': '🐈',
    'cat-face': '🐱',
    'snail': '🐌',
    'butterfly': '🦋',
    'ant': '🐜',
    'fire': '🔥',
    'skull-with-crossbones': '☠',
    'bomb': '💣',
    'light-bulb': '💡',
    'hammer': '🔨',
    'wrench': '🔧',
    'key': '🔑',
    'gear': '⚙',
    'coffin': '⚰',
    'moai': '🗿',
    'beer': '🍺',
    'volcano': '🌋',
    'pile-of-poo': '💩',
    'shit': '💩',
    'broken-heart': '💔',
    'heart': '❤️',
    'love': '💘',
    'alien': '👽',
    'robot-face': '🤖',
    'skull': '💀',
    'ghost': '👻',
    'cloud': '☁',
    'thumbs-up': '👍',
    'thumbs-down': '👎',
    'index-finger': '☝️',
    'sign-of-the-horns': '🤘',
    'vulcan-salute': '🖖',
    'clapping-hands': '👏',
    'handshake': '🤝',
    'ok-hand': '👌',
    'raised-hand': '✋',
    'five-finger-hand': '🖐',
    'middle-finger': '🖕',
    'raised-fist': '✊',
    'victory-hand': '✌',
    'crossed-fingers': '🤞',
    'writing-hand': '✍️',
    'kiss': '💋',
    'anchor': '⚓',
    'airplane': '✈',
    'sailboat': '⛵',
    'car': '🚗',
    'truck': '🚚',
    'train': '🚆',
    'tractor': '🚜',
    'ship': '🚢',
    'rocket': '🚀',
    'helicopter': '🚁',
    'ball': '⚽',
    'czechia': '🇨🇿',
    'united-states': '🇺🇸',
    'germany': '🇩🇪',
    'ukraine': '🇺🇦',
    'slovakia': '🇸🇰',
    'netherlands': '🇳🇱',
    'spain': '🇪🇸',
    'united-kingdom': '🇬🇧',
    'croatia': '🇭🇷',
    'skin-light': '🏻',
    'skin-medium-light': '🏼',
    'skin-medium': '🏽',
    'skin-medium-dark': '🏾',
    'skin-dark': '🏿'
  }
};

var TextEntityMap = exports.TextEntityMap = {
  _re: null,
  _htmlEntity: true,
  get htmlEntity() {
    return this._htmlEntity;
  },
  set htmlEntity(s) {
    if (s !== this._htmlEntity) {
      this._htmlEntity = s;
      this.recompile();
    }
  },
  _htmlEntityMap: HtmlEntityMap,
  replaceHtmlEntity: function replaceHtmlEntity(text) {
    var _this = this;

    var reg = new RegExp('(\\\\)?' + this._htmlEntityMap.re.source, 'g');
    if (this.htmlEntity) text = text.replace(reg, function (m0, m1, m2) {
      return m1 ? m2 : _this._htmlEntityMap.items[m2] || m2;
    });
    return text;
  },


  _asciiEmoji: true,
  get asciiEmoji() {
    return this._asciiEmoji;
  },
  set asciiEmoji(s) {
    if (s !== this.asciiEmoji) {
      this._asciiEmoji = s;
      this.recompile();
    }
  },
  _asciiEmojiMap: AsciiEmojiMap,
  replaceAsciiEmoji: function replaceAsciiEmoji(text) {
    var _this2 = this;

    var reg = new RegExp('(\\\\)?' + this._asciiEmojiMap.re.source, 'g');
    if (this.asciiEmoji) text = text.replace(reg, function (m0, m1, m2) {
      return m1 ? m2 : _this2._asciiEmojiMap.items[m2] || m2;
    });
    return text;
  },


  _extendedTextEntity: true,
  get extendedTextEntity() {
    return this._extendedTextEntity;
  },
  set extendedTextEntity(s) {
    if (s !== this._extendedTextEntity) {
      this._extendedTextEntity = s;
      this.recompile();
    }
  },
  _extendedTextEntityMapList: [ExtendedEmojiMap],
  _textEntityRegexGroups: {},

  replace: function replace(text) {
    var eteg = this._textEntityRegexGroups;
    var count = this._reGroupsCount;

    return text.replace(this._re, function (match, esc) {
      for (var _len = arguments.length, groups = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        groups[_key - 2] = arguments[_key];
      }

      var r = match;
      if (esc) r = match.slice(1);else for (var i = 0; i < count; i++) {
        if (groups[i]) {
          r = eteg[i].items[groups[i]] || r;break;
        }
      }
      return r;
    });
  },
  addExtendedTextEntityMap: function addExtendedTextEntityMap(map) {
    if (!this._extendedTextEntityMapList.some(function (item) {
      return item === map;
    })) this._extendedTextEntityMapList.push(map);
  },
  removeExtendedTextEntityMap: function removeExtendedTextEntityMap(map) {
    this._extendedTextEntityMapList = this._extendedTextEntityMapList.filter(function (item) {
      return item !== map;
    });
  },


  get extendedTextEntityMapList() {
    return this._extendedTextEntityMapList;
  },

  recompile: function recompile() {
    var _this3 = this;

    if (this.htmlEntity || this.asciiEmoji || this.extendedTextEntity) {
      var reA = [];
      var i = 0;
      this._textEntityRegexGroups = {};
      if (this.htmlEntity) {
        reA.push(this._htmlEntityMap.re.source);
        this._textEntityRegexGroups[i] = this._htmlEntityMap;
        i++;
      }
      if (this.asciiEmoji) {
        reA.push(this._asciiEmojiMap.re.source);
        this._textEntityRegexGroups[i] = this._asciiEmojiMap;
        i++;
      }
      if (this.extendedTextEntity) {
        this._extendedTextEntityMapList.forEach(function (item) {
          reA.push(item.re.source);
          _this3._textEntityRegexGroups[i] = item;
          i++;
        });
      }
      this._reGroupsCount = i;
      this._re = new RegExp('(\\\\)?(?:' + reA.join('|') + ')', 'g');
    } else this._re = null;
  }
};

//precompile regex
TextEntityMap.recompile();