'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeKit = exports.Forms = exports.Bricks = exports.Icons = exports.Environment = exports.Common = undefined;

var _environment = require('./environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

var _common = require('./common/common.js');

var Common = _interopRequireWildcard(_common);

var _eventListener = require('./common/event-listener.js');

var _eventListener2 = _interopRequireDefault(_eventListener);

var _commonLsi = require('./common/common-lsi.js');

var _commonLsi2 = _interopRequireDefault(_commonLsi);

var _icons = require('./environment/icons.js');

var Icons = _interopRequireWildcard(_icons);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UU5 = window.UU5 || {};

var environment = _environment2.default;

exports.Common = Common;

UU5.Common = Common;

if (UU5.Environment) {
  exports.Environment = environment = UU5.Common.Tools.merge(_environment2.default, UU5.Environment);
}

environment.EventListener = new _eventListener2.default();

environment.Lsi.Common = _commonLsi2.default;

exports.Environment = environment;

UU5.Environment = environment;

// import * as Layout from './layout/layout.js';
// export {Layout};
// UU5.Layout = Layout;

exports.Icons = Icons;

UU5.Icons = Icons;

// workaround so that on-demand loaded UU5 modules can insert their own components
// into UU5 exports; i.e. if an application uses following:
//  import * as UU5 from "uu5g04";  // UU5 is a local variable containing new (separate) instance of exports
//  import "uu5g04-forms";
// then uu5g04-forms (UU5 module) wants to add "Forms" key into "root" of uu5g04 exports which
// isn't possible (exports are frozen by SystemJS), so instead uu5g04-forms will inject its components into
// pre-existing "Forms" key within uu5g04 exports
var Bricks = UU5.Bricks = {};
exports.Bricks = Bricks;


var Forms = UU5.Forms = {};
exports.Forms = Forms;


var CodeKit = UU5.CodeKit = {};
exports.CodeKit = CodeKit;

// const Addons = UU5.Addons = {};
// export {Addons};
// ...

window.UU5 = UU5;
exports.default = UU5;