'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VucMixin = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _error = require('./error.js');

var _error2 = _interopRequireDefault(_error);

var _tools = require('./tools.js');

var _tools2 = _interopRequireDefault(_tools);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VucMixin = exports.VucMixin = {

  //@@viewOn:mixins
  mixins: [],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    "UU5.Common.VucMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      calls: {
        authorizeVuc: 'authorizeVuc'
      },
      errors: {
        sysAuthorizeVuc: 'Error of VUC %s during connection to server.',
        notErrorRoute: 'Error route was not set either in props or in Environment.',
        notCall: 'Call %s was not found either in props or in Environment.'
      },
      lsi: function lsi() {
        return _environment2.default.Lsi.Common.vucMixin;
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    authorized: _propTypes2.default.bool,
    calls: _propTypes2.default.object,
    errorRoute: _propTypes2.default.oneOfType([_propTypes2.default.string, // path
    _propTypes2.default.element, _propTypes2.default.shape({
      tag: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
      props: _propTypes2.default.object
    })]),
    params: _propTypes2.default.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      authorized: true,
      calls: null,
      errorRoute: null,
      params: null
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.VucMixin");
    this.constructor.vucTitle && this.setTitle();

    return {
      authorizedFeedback: this.props.authorized ? 'loading' : 'ready',
      profiles: null
    };
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    this.constructor.vucTitle && window.UU5.Environment.EventListener.registerLsi(this.getId(), function () {
      return _this.setTitle();
    });
    this.props.authorized && this._checkAuthorizing();
  },


  componentWillUnmount: function componentWillUnmount() {
    this._unmounted = true;
    this.constructor.vucTitle && window.UU5.Environment.EventListener.unregisterLsi(this.getId());
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonVucMixin: function hasUU5CommonVucMixin() {
    return this.hasMixin("UU5.Common.VucMixin");
  },

  getUU5CommonVucMixinProps: function getUU5CommonVucMixinProps() {
    return {
      // profiles: this.props.profiles
    };
  },

  getUU5CommonVucMixinPropsToPass: function getUU5CommonVucMixinPropsToPass() {
    return this.getUU5CommonVucMixinProps();
  },

  getProfiles: function getProfiles() {
    return this.state.profiles;
  },
  isReady: function isReady() {
    return this.state.authorizedFeedback == 'ready';
  },
  isLoading: function isLoading() {
    return this.state.authorizedFeedback == 'loading';
  },
  isError: function isError() {
    return this.state.authorizedFeedback == 'error';
  },
  getVucChildren: function getVucChildren(getChildren) {
    var result = void 0;

    switch (this.state.authorizedFeedback) {
      case 'loading':
        result = _tools2.default.findComponent('UU5.Bricks.Loading');
        break;
      case 'ready':
        result = getChildren(this.state.profiles);
        break;
      case 'error':
        result = _react2.default.createElement(
          _error2.default,
          null,
          _tools2.default.findComponent('UU5.Bricks.Lsi', { lsi: this.state.message })
        );
        break;
    }

    return result;
  },
  checkAuthorizing: function checkAuthorizing() {
    this._checkAuthorizing();
    return this;
  },
  setTitle: function setTitle(title) {
    title = title || this.constructor.vucTitle;

    if (title) {
      if ((typeof title === 'undefined' ? 'undefined' : _typeof(title)) === 'object') {
        title = _tools2.default.getLsiItemByLanguage(title);
      }

      document.title = title;
    }

    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getAuthorizeVucCall: function _getAuthorizeVucCall() {
    var call = void 0;

    if (this.props.calls) {
      call = this.props.calls[this.getCallName().authorizeVuc];
    } else if (_environment2.default.App && _environment2.default.App.callConfig && _environment2.default.App.callConfig.authorizeVuc) {
      call = _environment2.default.App.callConfig.authorizeVuc;
    }

    return call;
  },
  _checkAuthorizing: function _checkAuthorizing() {
    var _this2 = this;

    var call = this._getAuthorizeVucCall();

    if (call) {
      // data = {}
      var data = { name: this.constructor.vucName };

      call({
        data: data,
        // dtoOut = {profiles: ['..', '..', ...], status: 'ok | error'}
        done: function done(dtoOut) {
          if (!_this2._unmounted) {
            if (dtoOut.data.status === 'error') {
              var errorRoute = _this2.props.errorRoute;
              if (!errorRoute) {
                if (_environment2.default.App && _environment2.default.App.vucConfig && _environment2.default.App.vucConfig.errorRoute) {
                  errorRoute = _environment2.default.App.vucConfig.errorRoute;
                } else {
                  _this2.showError('notErrorRoute', null, {
                    mixinName: "UU5.Common.VucMixin",
                    context: { environment: _environment2.default }
                  });
                }
              }
              if (errorRoute) {
                _environment2.default.setRoute(errorRoute);
              } else {
                _this2.setState({
                  authorizedFeedback: 'error',
                  message: _this2.getLsi('notAuthorized', "UU5.Common.VucMixin")
                });
              }
            } else {
              _this2.setState({ authorizedFeedback: 'ready', profiles: dtoOut.data.profiles || null });
            }
          }
        },
        fail: function fail(dtoOut) {
          if (!_this2._unmounted) {
            _this2.showError('sysAuthorizeVuc', _this2.constructor.vucName || window.location.pathname, {
              mixinName: "UU5.Common.VucMixin",
              context: { dtoOut: dtoOut }
            });
            _this2.setState({
              authorizedFeedback: 'error',
              profiles: dtoOut.data && dtoOut.data.profiles || null,
              message: _this2.getLsi('serverConnection', "UU5.Common.VucMixin")
            });
          }
        }
      });
    } else {
      this.showError('notCall', this.getCall().authorizeVuc, {
        mixinName: "UU5.Common.VucMixin",
        context: { environment: _environment2.default }
      });
    }
  }
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  //@@viewOff:render

};

exports.default = VucMixin;