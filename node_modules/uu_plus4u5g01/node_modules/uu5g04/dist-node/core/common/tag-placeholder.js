'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagPlaceholder = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _commonNs = require('./common-ns.js');

var _commonNs2 = _interopRequireDefault(_commonNs);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _baseMixin = require('./base-mixin.js');

var _baseMixin2 = _interopRequireDefault(_baseMixin);

var _elementaryMixin = require('./elementary-mixin.js');

var _elementaryMixin2 = _interopRequireDefault(_elementaryMixin);

var _tools = require('./tools.js');

var _tools2 = _interopRequireDefault(_tools);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

var _notFoundTag = require('./not-found-tag.js');

var _notFoundTag2 = _interopRequireDefault(_notFoundTag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//import './tag-placeholder.less';

var importLibraryCache = {};

var TagPlaceholder = exports.TagPlaceholder = (0, _createReactClass2.default)({
  displayName: 'TagPlaceholder',


  //@@viewOn:mixins
  mixins: [_baseMixin2.default, _elementaryMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _commonNs2.default.name("TagPlaceholder"),
    classNames: {
      main: _commonNs2.default.css("tag-placeholder")
    },
    errors: {
      serverError: 'Unexpected error: %s.'
    },
    defaults: {
      regexpVersion: /\/\d*\.\d*\.\d*(?:-[a-z]+\d+(?:\.\d){0,2})?\//g,
      regexpSlash: /\//g,
      regexpDigit: /^\d/g
    },
    opt: {
      hoc: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    tagName: _propTypes2.default.string,
    props: _propTypes2.default.object,
    content: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node])
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      tagName: null,
      props: null,
      content: null
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      component: null
    };
  },
  componentDidMount: function componentDidMount() {
    this._findLib();
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var component = nextProps.tagName && _tools2.default.checkTag(nextProps.tagName);
    component ? this._setComponent(component, nextProps.props) : this._findLib(nextProps);

    return this;
  },


  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findLib: function _findLib(props) {
    var _this = this;

    props = props || this.props;
    var tagNameArr = props.tagName.split('.');
    var libraryName = tagNameArr[0] + '.' + tagNameArr[1];
    var libraryReady = function libraryReady(result, error) {
      if (error) {
        var library = _environment2.default.getLibrary(libraryName);
        if (!library || !library.error) {
          _this.showError('serverError', error, {
            component: _this.getTagName(),
            searchedTag: props.tagName,
            library: libraryName
          });
        }
        _this._setLibError(libraryName);
        _this._setComponent(props.tagName, { tagName: props.tagName, props: props.props });
      } else {
        _this._setComponent(props.tagName, props.props);
      }
    };

    _tools2.default.loadLibrary(libraryName, function (libraryJson, error) {
      if (!error && libraryJson.source) {
        _this._importLibrary(libraryJson, libraryReady);
      } else {
        libraryReady(null, error || new Error("Library is missing a source"));
      }
    });

    return this;
  },
  _getSourceUrl: function _getSourceUrl(library) {
    var result = void 0;
    if (library && library.name && library.version) {
      var baseName = library.name.replace('_basic', '').replace('_forms', '');
      var sourceName = library.name.replace('uu_', '');
      result = _environment2.default.CDN_URL + '/' + baseName + '/' + library.version + '/' + sourceName + '.js';
    }
    return result;
  },
  _setComponent: function _setComponent(tagName, props) {
    // props = props || this.props.props;

    var component = tagName && _tools2.default.checkTag(tagName);
    if (!component) {
      component = _notFoundTag2.default;
      props = _tools2.default.merge({}, props);
      props.tagName = props.tagName || tagName;
    }

    component && this.setState({ component: component, props: props });
    return this;
  },
  _setNotFound: function _setNotFound(tagCalls) {
    tagCalls.forEach(function (fce) {
      return fce();
    });
    return this;
  },
  _setLibError: function _setLibError(libCode) {
    var libSettings = _environment2.default.getLibrary(libCode);
    if (libSettings) {
      libSettings.error = true;
    } else {
      _environment2.default.addLibrary(libCode, { error: true });
    }
    return this;
  },
  _getVersionFromUrl: function _getVersionFromUrl(url) {
    var version = null;
    version = url.match(this.getDefault().regexpVersion);
    version && version[0] && (version = version[0].replace(this.getDefault().regexpSlash, ''));
    return version;
  },
  _getVersionObject: function _getVersionObject(version) {
    var ver = version.split('.');
    return {
      major: parseInt(ver[0]),
      minor: parseInt(ver[1]),
      build: parseInt(ver[2])
    };
  },
  _compareDependencies: function _compareDependencies(version, dependency) {
    var result = true;
    var dependencyVersion = void 0;

    if (this.getDefault().regexpDigit.test(dependency)) {
      dependencyVersion = dependency;
    } else {
      dependencyVersion = this._getVersionFromUrl(dependency);
    }

    if (dependencyVersion && version !== dependencyVersion) {

      var ver = this._getVersionObject(version);
      var verDep = this._getVersionObject(dependencyVersion);

      if (ver.major !== verDep.major) {
        // 1.0.0 x 2.0.0 || 1.0.0 x 0.1.1
        result = false;
      } else if (ver.minor < verDep.minor) {
        // 1.0.0 x 1.1.0
        result = false;
      } else if (ver.minor === verDep.minor && ver.build < verDep.build) {
        // 1.0.0 x 1.0.1
        result = false;
      }

      if (!result) {
        this._setDependencyError(version, dependencyVersion);
      }
    }

    return true;
  },
  _setDependencyError: function _setDependencyError(version, dependencyVersion) {
    _tools2.default.error('Wrong dependency.', {
      tag: this.props.tagName,
      ver: version,
      dependencyVersion: dependencyVersion
    });

    return this;
  },
  _updateDependencies: function _updateDependencies(dependencies) {
    var _this2 = this;

    if (dependencies['uu5g04'] && this._compareDependencies(_environment2.default.version, dependencies['uu5g04'])) {
      delete dependencies['uu5g04'];
      if (window.UU5) {
        window.UU5.Bricks && Object.keys(window.UU5.Bricks).length && delete dependencies['uu5g04-bricks'];
        window.UU5.Forms && Object.keys(window.UU5.Forms).length && delete dependencies['uu5g04-forms'];
      }
    }
    if (window.Plus4U5 && dependencies['uu_plus4u5g01'] && this._compareDependencies(window.Plus4U5.Environment.version, dependencies['uu_plus4u5g01'])) {
      delete dependencies['uu_plus4u5g01'];
      window.Plus4U5.App && Object.keys(window.Plus4U5.App).length && delete dependencies['uu_plus4u5g01-app'];
      window.Plus4U5.Bricks && Object.keys(window.Plus4U5.Bricks).length && delete dependencies['uu_plus4u5g01-bricks'];
    }

    Object.keys(dependencies).forEach(function (key) {
      if (_this2.getDefault().regexpDigit.test(dependencies[key])) {
        var library = {
          name: key,
          version: dependencies[key]
        };
        var source = _this2._getSourceUrl(library);
        source && (dependencies[key] = source);
      }
    });

    return dependencies;
  },
  _importLibrary: function _importLibrary(library, callback) {
    var dependencies = library.dependencies;
    var source = library.source;
    if (!source) {
      source = this._getSourceUrl(library);
    }

    var query = library.id;
    var cache = importLibraryCache;
    if (!cache[query]) {
      cache[query] = {
        result: null,
        error: null,
        pendingCallback: [callback]
      };
      if (window.System && window.System.import) {
        if (source) {
          System.config({ map: this._updateDependencies(dependencies) });

          System.import(source).then(function (libraryComponents) {
            cache[query].pendingCallback.forEach(function (fn) {
              return fn(libraryComponents);
            });
          });
        } else {
          _tools2.default.error('System was not found and has not set any source to import.', {
            source: source,
            tagName: this.props.tagName
          });
          this._setLibError(library.code);
          cache[query].pendingCallback.forEach(function (fn) {
            return fn(null, new Error());
          });
        }
      } else {
        _tools2.default.error('System is not defined in window! Cannot import source:', {
          source: source,
          tagName: this.props.tagName
        });
        this._setLibError(library.code);
        cache[query].pendingCallback.forEach(function (fn) {
          return fn(null, new Error());
        });
      }
    } else if (cache[query].result || cache[query].error) {
      callback(cache[query].result, cache[query].error);
    } else {
      cache[query].pendingCallback.push(callback);
    }
    return this;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this.state.component ? _react2.default.createElement(this.state.component, _tools2.default.merge({}, this.state.props, { parent: this.getParent() }), this.props.content) : null;
  }
  //@@viewOff:render

});

exports.default = TagPlaceholder;