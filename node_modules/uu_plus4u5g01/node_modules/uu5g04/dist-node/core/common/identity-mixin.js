'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdentityMixin = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sessionMixin = require('./session-mixin.js');

var _sessionMixin2 = _interopRequireDefault(_sessionMixin);

var _error = require('./error.js');

var _error2 = _interopRequireDefault(_error);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AUTH = 'authenticated';
var NOT_AUTH = 'notAuthenticated';
var PENDING = 'pending';

var IdentityMixin = exports.IdentityMixin = {

  //@@viewOn:mixins
  mixins: [_sessionMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    "UU5.Common.IdentityMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      lsi: {
        login: {
          cs: 'Uživatel je odhlášen...',
          en: 'User is logged out...'
        }
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypess

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.IdentityMixin");

    var identityState = {
      identity: null,
      identityFeedback: PENDING
    };

    var session = this.props.session || _environment2.default.getSession();
    if (session && session.initComplete) {
      identityState.identity = session.getIdentity();
      identityState.identityFeedback = session.isAuthenticated() ? AUTH : NOT_AUTH;
    }

    // state
    return identityState;
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    var session = this.props.session || _environment2.default.getSession();
    if (session) {
      if (!session.initComplete) {
        session.initPromise.then(function () {
          !_this._umnount && _this._onChangeIdentity();
          window.UU5.Environment.EventListener.addIdentityChangeListener(session, _this.getId(), _this._onChangeIdentity);
          //session.addIdentityChangeListener(this._onChangeIdentity);
        });
      } else {
        window.UU5.Environment.EventListener.addIdentityChangeListener(session, this.getId(), this._onChangeIdentity);
        //session.addIdentityChangeListener(this._onChangeIdentity);
      }
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this._umnount = true;
    var session = this.getSession();
    session && window.UU5.Environment.EventListener.removeIdentityChangeListener(session, this.getId());
    //session && session.removeIdentityChangeListener(this._onChangeIdentity);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonIdentityMixin: function hasUU5CommonIdentityMixin() {
    return this.hasMixin("UU5.Common.IdentityMixin");
  },
  getUU5CommonIdentityMixinProps: function getUU5CommonIdentityMixinProps() {
    return {};
  },
  getUU5CommonIdentityMixinPropsToPass: function getUU5CommonIdentityMixinPropsToPass() {
    return this.getUU5CommonIdentityMixinProps();
  },
  isAuthenticated: function isAuthenticated() {
    return this.state.identityFeedback === AUTH;
  },
  isNotAuthenticated: function isNotAuthenticated() {
    return this.state.identityFeedback === NOT_AUTH;
  },
  isPending: function isPending() {
    return this.state.identityFeedback === PENDING;
  },
  getIdentityFeedback: function getIdentityFeedback() {
    return this.state.identityFeedback;
  },
  getIdentity: function getIdentity() {
    return this.state.identity;
  },
  setAuthenticated: function setAuthenticated(isAuth, setStateCallback) {
    this.setState({ identityFeedback: isAuth ? AUTH : NOT_AUTH }, setStateCallback);
    return this;
  },
  changeIdentity: function changeIdentity(setStateCallback) {
    var session = this.getSession();
    session && this.setState({
      identity: session.getIdentity(),
      identityFeedback: this._setAuthenticated(session)
    }, setStateCallback);
    return this;
  },
  getAuthenticatedChild: function getAuthenticatedChild(getChild, opt) {
    var result = void 0;

    if (!this.isAuthenticated()) {
      result = _react2.default.createElement(_error2.default, _extends({}, this.getMainPropsToPass(), { silent: opt.silent, inline: opt.inline, content: opt.message || this.getLsiComponent('login', "UU5.Common.IdentityMixin") }));
    } else if (typeof getChild === 'function') {
      result = getChild();
    }

    return result;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _setAuthenticated: function _setAuthenticated(session) {
    var result = PENDING;
    if (session) {
      result = session.isAuthenticated() ? AUTH : NOT_AUTH;
    }

    return result;
  },
  _onChangeIdentity: function _onChangeIdentity() {
    var session = this.getSession();
    if (session) {
      if (typeof this.onChangeIdentity_ === 'function') {
        this.onChangeIdentity_(session);
      } else {
        this.changeIdentity();
      }
    }
    return this;
  }
  //@@viewOff:componentSpecificHelpers

};

exports.default = IdentityMixin;