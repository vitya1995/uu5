'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorSchemaMixin = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

require('./color-schema.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import './color-schema/default.less';
// import './color-schema/yellow.less';
// import './color-schema/yellow-rich.less';
// import './color-schema/orange.less';
// import './color-schema/orange-rich.less';
// import './color-schema/pink.less';
// import './color-schema/pink-rich.less';
// import './color-schema/red.less';
// import './color-schema/red-rich.less';
// import './color-schema/purple.less';
// import './color-schema/purple-rich.less';
// import './color-schema/cyan.less';
// import './color-schema/cyan-rich.less';
// import './color-schema/blue.less';
// import './color-schema/blue-rich.less';
// import './color-schema/green.less';
// import './color-schema/green-rich.less';
// import './color-schema/brown.less';
// import './color-schema/brown-rich.less';
// import './color-schema/grey.less';
// import './color-schema/grey-rich.less';

var ColorSchemaMixin = exports.ColorSchemaMixin = {

  //@@viewOn:statics
  statics: {
    "UU5.Common.ColorSchemaMixin": {
      classNames: {
        main: 'getMainClassUU5CommonColorSchemaMixin'
      },
      defaults: {
        mainClassPrefix: 'color-schema-'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    // must be function because of dynamic adding color into colorSchema
    colorSchema: function colorSchema(props, propName, componentName) {
      if (props[propName] && !_environment2.default.colorSchemaMap[props[propName]]) {
        return new Error('Invalid prop `' + propName + '` with value `' + props[propName] + '` supplied to' + ' `' + componentName + '`. Validation failed.');
      }
    }
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      colorSchema: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    this.registerMixin("UU5.Common.ColorSchemaMixin");

    // in state, so every component can change color dynamically
    return {};
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonColorSchemaMixin: function hasUU5CommonColorSchemaMixin() {
    return this.hasMixin("UU5.Common.ColorSchemaMixin");
  },

  getColorSchema: function getColorSchema() {
    var colorSchema = this.props.colorSchema || (this.getDefault() ? this.getDefault().colorSchema : null);
    return _environment2.default.getColorSchema(colorSchema);
  },

  getUU5CommonColorSchemaMixinProps: function getUU5CommonColorSchemaMixinProps() {
    return {
      colorSchema: this.props.colorSchema
    };
  },

  getUU5CommonColorSchemaMixinPropsToPass: function getUU5CommonColorSchemaMixinPropsToPass() {
    return {};
  },

  getMainClassUU5CommonColorSchemaMixin: function getMainClassUU5CommonColorSchemaMixin() {
    var colorSchema = this.getColorSchema();
    var result = '';
    if (colorSchema) {
      result = this.getDefault('mainClassPrefix', "UU5.Common.ColorSchemaMixin") + colorSchema;

      if (this.props.colorSchema !== colorSchema) {
        result += ' ' + this.getDefault('mainClassPrefix', "UU5.Common.ColorSchemaMixin") + this.props.colorSchema;
      }
    }

    return result;
  }
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers
};

// FIXME MODULES Commented out due to dependencies "common => forms".
exports.default = ColorSchemaMixin;