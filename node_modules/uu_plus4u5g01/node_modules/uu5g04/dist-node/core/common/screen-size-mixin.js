'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenSizeMixin = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

var _tools = require('./tools.js');

var _tools2 = _interopRequireDefault(_tools);

var _eventListener = require('./event-listener.js');

var _eventListener2 = _interopRequireDefault(_eventListener);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ScreenSizeMixin = exports.ScreenSizeMixin = {

  //@@viewOn:statics
  statics: {
    "UU5.Common.ScreenSizeMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      defaults: {
        screenSizeEvent: 'UU5_Common_screenSize'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.ScreenSizeMixin");
    // state
    return {
      screenSize: this.getScreenSize()
    };
  },

  componentDidMount: function componentDidMount(nextProps) {
    window.UU5.Environment.EventListener.registerScreenSize(this.getId(), this._onChangeScreenSize);
  },

  componentWillUnmount: function componentWillUnmount() {
    window.UU5.Environment.EventListener.unregisterScreenSize(this.getId(), this._onChangeScreenSize);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonScreenSizeMixinProps: function hasUU5CommonScreenSizeMixinProps() {
    return this.hasMixin("UU5.Common.ScreenSizeMixin");
  },

  getUU5CommonScreenSizeMixinProps: function getUU5CommonScreenSizeMixinProps() {
    return {
      screenSize: this.getScreenSize()
    };
  },

  getUU5CommonScreenSizeMixinPropsToPass: function getUU5CommonScreenSizeMixinPropsToPass() {
    return this.getUU5CommonScreenSizeMixinProps();
  },

  getScreenSize: function getScreenSize() {
    return this.state && this.state.screenSize || _tools2.default.getScreenSize();
  },

  isXs: function isXs() {
    return this.getScreenSize() === 'xs';
  },

  isS: function isS() {
    return this.getScreenSize() === 's';
  },

  isM: function isM() {
    return this.getScreenSize() === 'm';
  },

  isL: function isL() {
    return this.getScreenSize() === 'l';
  },

  isXl: function isXl() {
    return this.getScreenSize() === 'xl';
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onChangeScreenSize: function _onChangeScreenSize(e, actualScreenSize) {
    if (typeof this.onChangeScreenSize_ === 'function') {
      this.onChangeScreenSize_(actualScreenSize, e);
    } else {
      this.setState({ screenSize: actualScreenSize });
    }
    return this;
  }
  //@@viewOff:componentSpecificHelpers
};

exports.default = ScreenSizeMixin;