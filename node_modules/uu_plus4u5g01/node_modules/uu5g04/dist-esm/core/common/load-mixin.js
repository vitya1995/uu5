import React from 'react';
import PropTypes from 'prop-types';
import CallsMixin from './calls-mixin.js';
import Error from './error.js';
import Tools from './tools.js';
import Environment from '../environment/environment.js';

export const LoadMixin = {
  //@@viewOn:mixins
  mixins: [CallsMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    "UU5.Common.LoadMixin": {
      defaults: {
        minReloadInterval: 10 * 1000, // 10s
        onLoadCall: 'onLoad',
        onReloadCall: 'onReload'
      },
      errors: {
        onLoad: 'Error during loading data from server by call %s.',
        onReload: 'Error during reloading data from server by call %s.'
      },
      lsi: () => Environment.Lsi.Common.loadMixin
    }
  }, //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uri: PropTypes.string,
    dtoOut: PropTypes.object,
    reloadInterval: PropTypes.number,
    refireLoad: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      uri: null,
      dtoOut: null,
      reloadInterval: 0,
      refireLoad: true
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      loadFeedback: 'loading',
      dtoOut: null,
      errorDtoOut: null
    };
  },

  componentWillMount() {
    if (this.props.dtoOut) {
      this.onLoadSuccess(this.props.dtoOut);
    }
  },

  componentDidMount() {
    if (!this.props.dtoOut) {
      this.setState({
        loadFeedback: 'loading',
        dtoOut: null,
        errorDtoOut: null
      }, () => this._onLoad(this.props));
    }
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled && nextProps.refireLoad) {
      this._onLoad(nextProps);
    }
  },

  componentWillUnmount() {
    this._reloadInterval && Environment.TimeManager.clearInterval(this._reloadInterval);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getUri() {
    return this.props.uri;
  },

  getDtoOut() {
    return this.state.dtoOut;
  },

  getErrorData() {
    return this.state.errorDtoOut;
  },

  getLoadFeedback() {
    return this.state.loadFeedback;
  },

  isLoading() {
    return this.getLoadFeedback() === 'loading';
  },

  isReady() {
    return this.getLoadFeedback() === 'ready';
  },

  isError() {
    return this.getLoadFeedback() === 'error';
  },

  onLoadSuccess(dtoOut, setStateCallback) {
    this.setAsyncState({ loadFeedback: 'ready', dtoOut: dtoOut, errorDtoOut: null }, setStateCallback);
    return this;
  },

  onReloadSuccess(dtoOut, setStateCallback) {
    this.onLoadSuccess(dtoOut, setStateCallback);
    return this;
  },

  onLoadError(dtoOut, setStateCallback) {
    this.setAsyncState({ loadFeedback: 'error', errorDtoOut: dtoOut }, setStateCallback);
    return this;
  },

  onReloadError(dtoOut, setStateCallback) {
    this.onLoadError(dtoOut, setStateCallback);
    return this;
  },

  getLoadFeedbackChildren(getChildren) {
    let children;

    switch (this.getLoadFeedback()) {
      case 'loading':
        children = Tools.findComponent('UU5.Bricks.Loading');
        break;
      case 'ready':
        children = getChildren(this.getDtoOut());
        break;
      case 'error':
        children = <Error>
            {this.getLsiComponent('error', "UU5.Common.LoadMixin")}
          </Error>;
        break;
    }

    return children;
  },

  reload(callName, dtoIn) {
    this.setState({ loadFeedback: 'loading' }, () => {
      this.forceReload(callName, dtoIn);
    });

    return this;
  },

  forceReload(callName, dtoIn) {
    let reloadCall = callName && this.getCall(callName) || this._getOnReloadCall();
    if (reloadCall) {
      let reloadDtoIn = dtoIn || this._getReloadDtoIn(this.props);
      reloadCall(reloadDtoIn);
    }
  },
  //@@viewOff:interface

  //@@viewOn:componentSpecificHelpers
  _getOnLoadCall() {
    return this.getCall(this.getDefault('onLoadCall', "UU5.Common.LoadMixin"));
  },

  _getOnReloadCall() {
    let result;

    let callNames = this.constructor.calls;
    if (callNames) {
      let callName = callNames[this.getDefault('onReloadCall', "UU5.Common.LoadMixin")];

      if (callName) {
        result = this.getCalls()[callName];
      } else {
        result = this._getOnLoadCall();
      }
    } else {
      result = this._getOnLoadCall();
    }

    return result;
  },

  _getLoadDtoIn(props) {
    props = props || this.props;

    let dtoIn = {};

    if (props.uri) {
      dtoIn.uri = props.uri;
    }

    if (typeof this.getOnLoadData_ === 'function') {
      dtoIn.data = this.getOnLoadData_(props);
    }

    dtoIn.done = dtoOut => {
      if (typeof this.onLoadSuccess_ === 'function') {
        this.onLoadSuccess_(dtoOut);
      } else {
        this.onLoadSuccess(dtoOut);
      }
    };

    let callKey = this.getDefault('onLoadCall', "UU5.Common.LoadMixin");
    dtoIn.fail = dtoOut => {
      this.showError('onLoad', this.getCallName(callKey), {
        mixinName: "UU5.Common.LoadMixin",
        context: {
          calls: this.getCalls(),
          dtoOut: dtoOut,
          callKey: callKey,
          uri: dtoIn.uri,
          data: dtoIn.data
        }
      });
      if (typeof this.onLoadError_ === 'function') {
        this.onLoadError_(dtoOut);
      } else {
        this.onLoadError(dtoOut);
      }
    };

    return dtoIn;
  },

  _getReloadDtoIn(props) {
    props = props || this.props;
    let dtoIn = {};

    if (props.uri) {
      dtoIn.uri = props.uri;
    }

    let getData = this.getOnReloadData_ || this.getOnLoadData_;
    if (typeof getData === 'function') {
      dtoIn.data = getData(props);
    }

    dtoIn.done = dtoOut => {
      let loadSuccess = this.onReloadSuccess_ || this.onLoadSuccess_;
      if (typeof loadSuccess === 'function') {
        loadSuccess(dtoOut);
      } else {
        this.onReloadSuccess(dtoOut);
      }
    };

    let calls = this.constructor.calls;
    let callKey = this.getDefault('onReloadCall', "UU5.Common.LoadMixin");
    calls && !calls[callKey] && (callKey = this.getDefault('onLoadCall', "UU5.Common.LoadMixin"));

    dtoIn.fail = dtoOut => {
      this.showError('onReload', this.getCallName(callKey), {
        mixinName: "UU5.Common.LoadMixin",
        context: {
          calls: this.getCalls(),
          dtoOut: dtoOut,
          callKey: callKey,
          uri: dtoIn.uri,
          data: dtoIn.data
        }
      });

      let loadError = this.onReloadError_ || this.onLoadError_;
      if (typeof loadError === 'function') {
        loadError(dtoOut);
      } else {
        this.onReloadError(dtoOut);
      }
    };

    return dtoIn;
  },

  _onLoad(props) {
    let loadCall = this._getOnLoadCall();

    if (loadCall) {
      let dtoIn = this._getLoadDtoIn(props);

      this._reloadInterval && Environment.TimeManager.clearInterval(this._reloadInterval);
      loadCall(dtoIn);

      let reloadInterval = this.props.reloadInterval || this.getOpt('reloadInterval');
      if (reloadInterval) {
        let reloadCall = this._getOnReloadCall();
        reloadCall = reloadCall || loadCall;

        if (reloadCall) {
          let reloadDtoIn = this._getReloadDtoIn(props);
          this._reloadInterval = Environment.TimeManager.setInterval(() => reloadCall(reloadDtoIn), Math.max(reloadInterval, this.getDefault('minReloadInterval', "UU5.Common.LoadMixin")));
        }
      }
    }

    return this;
  }
  //@@viewOff:componentSpecificHelpers
};

export default LoadMixin;