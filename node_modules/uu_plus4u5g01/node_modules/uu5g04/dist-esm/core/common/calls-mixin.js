import React from 'react';
import PropTypes from 'prop-types';
import Environment from '../environment/environment.js';

export const CallsMixin = {

  //@@viewOn:statics
  statics: {
    "UU5.Common.CallsMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      errors: {
        callsNotFound: 'Property calls was not set.',
        staticsCallsNotFound: 'Variable calls was not found in statics.',
        callNameNotFound: 'Call key %s was not found in calls.',
        callNotFound: 'Call %s was not found in calls.'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    calls: PropTypes.oneOfType([PropTypes.string, PropTypes.object])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      calls: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.CallsMixin");
    // state
    return {
      calls: null
    };
  },

  componentWillMount() {
    this._setCalls(this.props.calls);
  },

  componentWillReceiveProps(nextProps) {
    this._setCalls(nextProps.calls);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonCallsMixin() {
    return this.hasMixin("UU5.Common.CallsMixin");
  },

  getUU5CommonCallsMixinProps() {
    return {
      calls: this.getCalls()
    };
  },

  getUU5CommonCallsMixinPropsToPass() {
    return this.getUU5CommonCallsMixinProps();
  },

  getCalls() {
    if (!this.state.calls) {
      this.showError('callsNotFound', null, { mixinName: "UU5.Common.CallsMixin" });
    }
    return this.state.calls;
  },

  setCalls(calls) {
    this._setCalls(calls);
    return this;
  },

  getCall(item, mixinName) {
    let callNames = mixinName ? this.constructor[mixinName] ? this.constructor[mixinName].calls : null : this.constructor.calls;

    let callName = callNames && callNames[item];
    let calls = this.getCalls();
    let call = null;

    if (!callNames) {
      this.showError('staticsCallsNotFound', null, {
        mixinName: "UU5.Common.CallsMixin",
        context: {
          constructor: this.constructor
        }
      });
    } else if (!callName) {
      this.showError('callNameNotFound', item, {
        mixinName: "UU5.Common.CallsMixin",
        context: {
          calls: calls
        }
      });
    } else {
      call = calls[callName];

      if (!call) {
        this.showError('callNotFound', callName, {
          mixinName: "UU5.Common.CallsMixin",
          context: {
            calls: calls
          }
        });
      }
    }

    return call;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _setCalls(calls) {
    if (calls) {
      typeof calls === 'string' && (calls = this.stringToObjectType(calls, 'object', Environment.calls));

      this.setState({ calls: calls });
    }
    return this;
  }
  //@@viewOff:componentSpecificHelpers
};

export default CallsMixin;