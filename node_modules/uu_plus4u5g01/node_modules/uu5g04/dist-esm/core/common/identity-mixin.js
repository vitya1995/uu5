import React from 'react';
import SessionMixin from './session-mixin.js';
import Error from './error.js';
import Environment from '../environment/environment.js';

const AUTH = 'authenticated';
const NOT_AUTH = 'notAuthenticated';
const PENDING = 'pending';

export const IdentityMixin = {

  //@@viewOn:mixins
  mixins: [SessionMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    "UU5.Common.IdentityMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      lsi: {
        login: {
          cs: 'Uživatel je odhlášen...',
          en: 'User is logged out...'
        }
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypess

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.IdentityMixin");

    let identityState = {
      identity: null,
      identityFeedback: PENDING
    };

    let session = this.props.session || Environment.getSession();
    if (session && session.initComplete) {
      identityState.identity = session.getIdentity();
      identityState.identityFeedback = session.isAuthenticated() ? AUTH : NOT_AUTH;
    }

    // state
    return identityState;
  },

  componentDidMount() {
    let session = this.props.session || Environment.getSession();
    if (session) {
      if (!session.initComplete) {
        session.initPromise.then(() => {
          !this._umnount && this._onChangeIdentity();
          window.UU5.Environment.EventListener.addIdentityChangeListener(session, this.getId(), this._onChangeIdentity);
          //session.addIdentityChangeListener(this._onChangeIdentity);
        });
      } else {
        window.UU5.Environment.EventListener.addIdentityChangeListener(session, this.getId(), this._onChangeIdentity);
        //session.addIdentityChangeListener(this._onChangeIdentity);
      }
    }
  },

  componentWillUnmount() {
    this._umnount = true;
    let session = this.getSession();
    session && window.UU5.Environment.EventListener.removeIdentityChangeListener(session, this.getId());
    //session && session.removeIdentityChangeListener(this._onChangeIdentity);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonIdentityMixin() {
    return this.hasMixin("UU5.Common.IdentityMixin");
  },

  getUU5CommonIdentityMixinProps() {
    return {};
  },

  getUU5CommonIdentityMixinPropsToPass() {
    return this.getUU5CommonIdentityMixinProps();
  },

  isAuthenticated() {
    return this.state.identityFeedback === AUTH;
  },

  isNotAuthenticated() {
    return this.state.identityFeedback === NOT_AUTH;
  },

  isPending() {
    return this.state.identityFeedback === PENDING;
  },

  getIdentityFeedback() {
    return this.state.identityFeedback;
  },

  getIdentity() {
    return this.state.identity;
  },

  setAuthenticated(isAuth, setStateCallback) {
    this.setState({ identityFeedback: isAuth ? AUTH : NOT_AUTH }, setStateCallback);
    return this;
  },

  changeIdentity(setStateCallback) {
    let session = this.getSession();
    session && this.setState({
      identity: session.getIdentity(),
      identityFeedback: this._setAuthenticated(session)
    }, setStateCallback);
    return this;
  },

  getAuthenticatedChild(getChild, opt) {
    let result;

    if (!this.isAuthenticated()) {
      result = <Error {...this.getMainPropsToPass()} silent={opt.silent} inline={opt.inline} content={opt.message || this.getLsiComponent('login', "UU5.Common.IdentityMixin")} />;
    } else if (typeof getChild === 'function') {
      result = getChild();
    }

    return result;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _setAuthenticated(session) {
    let result = PENDING;
    if (session) {
      result = session.isAuthenticated() ? AUTH : NOT_AUTH;
    }

    return result;
  },

  _onChangeIdentity() {
    let session = this.getSession();
    if (session) {
      if (typeof this.onChangeIdentity_ === 'function') {
        this.onChangeIdentity_(session);
      } else {
        this.changeIdentity();
      }
    }
    return this;
  }
  //@@viewOff:componentSpecificHelpers
};

export default IdentityMixin;