import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Button from './button.js';
import TabsItem from './tabs-item';

import './tabs.less';

export const Tabs = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Tabs"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'smallBox'),
    classNames: {
      main: ns.css("tabs"),
      ul: ns.css("tabs-list", "tabs-list-"),
      pills: ns.css("tabs-list-pills"),
      justified: ns.css("tabs-list-justified"),
      stacked: ns.css("tabs-list-stacked"),
      content: ns.css("tabs-list-content"),
      size: ns.css("tabs-list-size-"),
      active: ns.css("tabs-list-active")
    },
    defaults: {
      childTagName: 'UU5.Bricks.Tabs.Item'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    type: PropTypes.oneOf(['tabs', 'pills']),
    stacked: PropTypes.bool,
    justified: PropTypes.bool,
    fade: PropTypes.bool,
    activeName: PropTypes.string,
    allowTags: PropTypes.arrayOf(PropTypes.string),
    size: PropTypes.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      type: 'tabs',
      stacked: false,
      justified: false,
      fade: false,
      activeName: null,
      allowTags: [],
      size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      activeName: this.props.activeName
    };
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ activeName: nextProps.activeName });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isTabs() {
    return true;
  },

  setActive(name) {
    this.setState({ activeName: name });
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    let childTagName = UU5.Common.Tools.getChildTagName(child);
    let childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_(child, childIndex) {
    let newChildProps = UU5.Common.Tools.merge({}, child.props);
    newChildProps.id = newChildProps.name || newChildProps.id || this.getId() + '-' + childIndex;

    let active = false;
    if (!this.state.activeName) {
      if (childIndex === 0) {
        active = true;
      }
    } else if (newChildProps.id === this.state.activeName) {
      active = true;
    }

    newChildProps._active = active;
    newChildProps._fade = this.props.fade;

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getItems() {
    let children = this.getChildren();
    let bgStyle = this.props.type === "pills" || this.props.stacked && this.props.justified ? 'filled' : 'transparent';

    let items = children.map((tab, i) => {
      if (!this.state.activeName) {
        if (i === 0) {
          return <li key={i} className={this.getClassName("active")}>
              <Button bgStyle={bgStyle}>
                {tab.props.header}
              </Button>
            </li>;
        }
      } else if ((tab.props.name || tab.props.id) === this.state.activeName) {
        return <li key={i} className={this.getClassName("active")}>
            <Button bgStyle={bgStyle}>
              {tab.props.header}
            </Button>
          </li>;
      }
      return <li key={i}>
          <Button bgStyle={bgStyle} onClick={() => this.setState({ activeName: tab.props.name || tab.props.id })}>
            {tab.props.header}
          </Button>
        </li>;
    });

    return [items, children];
  },

  _buildUlAttributes() {
    let ulClassName = this.getClassName().ul;

    if (this.props.stacked && this.props.justified) {
      ulClassName += 'pills';
      ulClassName += ' ' + this.getClassName().stacked;
    } else if (this.props.stacked && this.props.type === 'pills') {
      ulClassName += 'pills';
      ulClassName += ' ' + this.getClassName('stacked');
    } else if (this.props.stacked && this.props.type !== 'pills') {
      ulClassName += 'stacked';
    } else {
      ulClassName += this.props.type;
    }

    this.props.justified && (ulClassName += ' ' + this.getClassName().justified);

    return ulClassName;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let items = this._getItems();
    const mainAttrs = this.getMainAttrs();
    !this.getColorSchema() && (mainAttrs.className += ' color-schema-blue');
    mainAttrs.className += ' ' + this.getClassName('size') + this.props.size;
    return this.getNestingLevel() ? <div {...mainAttrs}>
            <ul className={this._buildUlAttributes()}>
              {items[0]}
            </ul>

            <div className={this.getClassName().content}>
              {items[1]}
            </div>
          </div> : null;
  }
  //@@viewOff:render
});

Tabs.Item = TabsItem;
export default Tabs;