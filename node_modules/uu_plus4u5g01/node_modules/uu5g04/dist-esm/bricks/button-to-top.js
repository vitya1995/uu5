import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Button from './button.js';
import Icon from './icon.js';

import './button-to-top.less';

export const ButtonToTop = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ColorSchemaMixin, UU5.Common.NestingLevelMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("ButtonToTop"),
    nestingLevel: 'smallBox',
    classNames: {
      main: ns.css("button-to-top")
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    icon: PropTypes.string,
    offset: PropTypes.number,
    scrollDuration: PropTypes.number,
    size: PropTypes.oneOf(['s', 'm', 'l', 'xl']),
    bgStyle: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      icon: 'mdi-chevron-up',
      offset: 150,
      scrollDuration: 800,
      size: "m",
      bgStyle: "inverted"
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      visible: false
    };
  },

  componentDidMount() {
    window.addEventListener('scroll', this._scroll);
  },

  componentWillUnmount() {
    window.removeEventListener('scroll', this._scroll);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _scroll(e) {
    let offset = e.target.scrollingElement ? e.target.scrollingElement.scrollTop : e.target.documentElement.scrollTop;
    if (!this._visible) {
      if (offset >= this.props.offset) {
        this._visible = true;
        this.setState({ visible: true });
      }
    } else if (offset < this.props.offset) {
      this._visible = false;
      this.setState({ visible: false });
    }
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildMainAttrs() {
    let mainProps = this.getMainPropsToPass();
    mainProps.hidden = !this.state.visible;
    mainProps.colorSchema = this.props.colorSchema;
    mainProps.nestingLevel = this.getNestingLevel();
    mainProps.size = this.props.size;
    mainProps.bgStyle = this.props.bgStyle;
    return mainProps;
  },

  //@@viewOn:render
  render() {
    return <Button {...this._buildMainAttrs()} onClick={() => {
      UU5.Common.Tools.scrollToTarget(null, this.props.scrollDuration);
    }}>

        <Icon icon={this.props.icon} />
      </Button>;
  }
  //@@viewOff:render
});

export default ButtonToTop;