import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Link from './link.js';
import Button from './button.js';

import './nav-bar-nav-item.less';

export default createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("NavBar.Nav.Item"),
    classNames: {
      main: ns.css("nav-bar-nav-item")
    },
    defaults: {
      parentTagName: 'UU5.Bricks.NavBar.Nav'
    },
    errors: {
      invalidParent: 'Parent of this component is not NavBar.Nav.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    onClick: PropTypes.func,
    _size: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      onClick: null,
      _size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    this.checkParentTagName(this.getDefault().parentTagName);

    if (!(this.getParent() && this.getParent().isNav)) {
      this.showError("invalidParent");
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  expandChildProps_(child) {
    const newChildProps = UU5.Common.Tools.mergeDeep({}, child.props);
    newChildProps.size = this.props._size;
    newChildProps.bgStyle = 'transparent';
    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onClickHandler: function () {
    var navBar = this.getParent().getParent();
    navBar.close();
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var mainAttrs = this.getMainAttrs();
    mainAttrs.onClick = this._onClickHandler;

    var children = this.getChildren();
    var firstChild = children instanceof Array ? children[0] : children;
    var child;

    if (firstChild.type && firstChild.type.tagName === 'UU5.Bricks.Dropdown') {
      child = children;
      mainAttrs.onClick = null;
    } else {
      child = <Button onClick={this.props.onClick} parent={this} size={this.props._size} bgStyle="transparent">
          {children}
        </Button>;
    }

    return <li {...mainAttrs}>
        {child}
        {this.getDisabledCover()}
      </li>;
  }
  //@@viewOff:render
});