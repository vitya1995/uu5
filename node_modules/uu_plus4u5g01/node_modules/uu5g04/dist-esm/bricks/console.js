//@@viewOn:import
import React from 'react';
import createReactClass from 'create-react-class';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import { Div, Pre } from './factory';
import Text from './text';

import "./console.less";
//@@viewOff:import

export const Console = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Console"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'smallBox'),
    classNames: {
      main: ns.css("console"),
      arrow: ns.css("console-with-arrow")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      content: []
    };
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  info(input, setStateCallback) {
    this._log(input, "info", setStateCallback);
    return this;
  },
  warning(input, setStateCallback) {
    this._log(input, "warning", setStateCallback);
    return this;
  },
  error(input, setStateCallback) {
    this._log(input, "danger", setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _log(input, color, setStateCallback) {
    this.setState(state => {
      const content = state.content.slice();
      content.push({
        content: this._prepareInput(input),
        color: color
      });
      return { content };
    }, setStateCallback);
  },

  _prepareInput(input) {
    if (typeof input === "function") {
      return input.toString().split("{")[0];
    }
    return JSON.stringify(input, null, 2);
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let divs = [];
    for (let i = 0; i < this.state.content.length; i++) {
      divs.push(<Div key={i}>
          <Text className={this.getClassName().arrow} colorSchema={this.state.content[i].color} content={this.state.content[i].content} />
        </Div>);
    }
    return <Pre {...this.getMainPropsToPass()}>
        {divs}
      </Pre>;
  }
  //@@viewOff:render

});

export default Console;