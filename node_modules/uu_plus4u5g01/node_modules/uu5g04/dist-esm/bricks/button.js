import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import './button.less';

export const Button = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin, UU5.Common.ContentMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Button"),
    nestingLevel: 'smallBox',
    classNames: {
      main: ns.css("button"),
      bgStyle: ns.css("button-"),
      text: ns.css("button-text"),
      block: ns.css("button-block"),
      active: 'active',
      size: ns.css("button-")
    },
    defaults: {
      content: 'Button'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    size: PropTypes.oneOf(['s', 'm', 'l', 'xl']),
    displayBlock: PropTypes.bool,
    pressed: PropTypes.bool,
    bgStyle: PropTypes.oneOf(['filled', 'inverted', 'transparent']),
    onClick: PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      size: 'm',
      displayBlock: false,
      pressed: false,
      bgStyle: null, // filled
      onClick: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      pressed: this.props.pressed
    };
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ pressed: nextProps.pressed });
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  setActive(pressed, setStateCallback) {
    this.setState({ pressed: pressed }, setStateCallback);
    return this;
  },

  press(setStateCallback) {
    return this.setActive(true, setStateCallback);
  },

  pressUp(setStateCallback) {
    return this.setActive(false, setStateCallback);
  },

  togglePressed(setStateCallback) {
    this.setState(state => ({ pressed: !state.pressed }), setStateCallback);
    return this;
  },

  isPressed() {
    return this.state.pressed;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onClickHandler(event) {
    this.props.onClick && this.props.onClick(this, event);
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildMainAttrs() {
    let mainAttrs = this.getMainAttrs();

    mainAttrs.className += ' ' + this.getClassName('size') + this.props.size + ' ' + this.getClassName().bgStyle + (this.props.bgStyle || 'filled') + (this.props.displayBlock ? ' ' + this.getClassName('block') : '') + (this.isPressed() ? ' ' + this.getClassName('active') : '');

    this.isDisabled() ? mainAttrs.disabled = true : mainAttrs.onClick = this.props.onClick && this._onClickHandler;

    mainAttrs.type = "button";

    return mainAttrs;
  },

  _getChildren() {
    let children = this.getChildren() || this.getDefault().content;
    let newChildren = [];
    children = Array.isArray(children) ? children : [children];
    children.forEach((child, i) => {
      if (typeof child === "string") {
        child = child.replace(/\n/g, "");
        if (child.length) {
          newChildren.push(<span key={i} className={this.getClassName().text}>{child}</span>);
        }
      } else if (typeof child === "number") {
        newChildren.push(<span key={i} className={this.getClassName().text}>{child}</span>);
      } else {
        newChildren.push(child);
      }
    });

    return newChildren.length > 0 ? newChildren : children;
  },

  //@@viewOn:render
  render() {
    let component;
    component = <button {...this._buildMainAttrs()}>
        {this._getChildren()}
      </button>;

    return this.getNestingLevel() ? component : null;
  }
  //@@viewOff:render
});

export default Button;