import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Modal from './modal.js';

import './box.less';

export const Box = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Box"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'inline'),
    classNames: {
      main: ns.css("box", "text uu5-common-text uu5-common-bg"),
      nestingLevelSmallBox: ns.css("box-nesting-level-small-box uu5-common-padding-s"),
      nestingLevelInline: ns.css("box-nesting-level-inline"),
      modal: ns.css("box-modal"),
      click: ns.css("box-click")
    },
    opt: {
      nestingLeveWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    infoHeader: PropTypes.any,
    infoContent: PropTypes.any,
    disableClick: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      infoHeader: 'Info',
      infoContent: null,
      disableClick: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  openInfo(modalProps, setStateCallback) {
    if (this.props.infoContent || modalProps.content) {
      this.modal.open(modalProps, setStateCallback);
    }
    return this;
  },

  closeInfo(setStateCallback) {
    this.modal.close(true, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs() {
    var attrs = this.getMainAttrs();

    if (this.props.infoContent && !this.props.disableClick) {
      attrs.onClick = () => !this.isDisabled() && this.modal.open();
      attrs.className += ' ' + this.getClassName().click;
    }

    switch (this.getNestingLevel()) {
      case 'inline':
        attrs.className += ' ' + this.getClassName().nestingLevelInline;
        break;
      default:
        attrs.className += ' ' + this.getClassName().nestingLevelSmallBox;
    }

    return attrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let component = null;
    if (this.getNestingLevel()) {
      if (this.getNestingLevel() === "inline") {
        component = <UU5.Bricks.Text {...this.getMainPropsToPass()}>
            {this.getChildren()}
            {this.getDisabledCover()}
          </UU5.Bricks.Text>;
      } else {
        let modal;

        if (this.props.infoContent) {
          modal = <Modal className={this.getClassName().modal} ref_={modal => this.modal = modal} content={this.props.infoContent} header={this.props.infoHeader} parent={this} />;
        }

        component = <div>
            <div {...this._getMainAttrs()}>
              {this.getChildren()}
              {this.getDisabledCover()}
            </div>
            {modal}
          </div>;
      }
    }

    return component;
  }
  //@@viewOff:render
});

export default Box;