import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import { Div } from './factory.js';

import './button-group.less';

export const ButtonGroup = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin, UU5.Common.ContentMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("ButtonGroup"),
    nestingLevel: 'smallBox',
    classNames: {
      main: ns.css("button-group"),
      horizontal: ns.css("button-group-horizontal"),
      vertical: ns.css("button-group-vertical")
      //displayBlock: 'btn-group-justified'
    },
    defaults: {
      childTagNames: ['UU5.Bricks.Button', 'UU5.Bricks.Dropdown', 'UU5.Bricks.ButtonSwitch', 'UU5.Bricks.LanguageSelector']
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    size: PropTypes.string,
    vertical: PropTypes.bool,
    allowTags: PropTypes.arrayOf(PropTypes.string),
    bgStyle: PropTypes.string

    // TODO: not possible for button, but for <a> element
    //displayBlock: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      size: 'm',
      vertical: false,
      allowTags: [],
      bgStyle: undefined
      //displayBlock: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagNames);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_: function (child, i) {
    var newChildProps = child.props;
    newChildProps = UU5.Common.Tools.mergeDeep({}, newChildProps);

    newChildProps.size = this.props.size;
    newChildProps.disabled = this.isDisabled() || newChildProps.disabled;
    newChildProps.bgStyle = newChildProps.bgStyle || this.props.bgStyle;

    var childTagName = UU5.Common.Tools.getChildTagName(child);
    if (childTagName === this.getDefault().childTagNames[1]) {
      var className = newChildProps.className ? newChildProps.className + ' ' : '';
      newChildProps.className = className;
    }

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPropsToPass: function () {
    let newProps = this.getMainPropsToPass();
    newProps.className += ' ' + this.getClassName(this.props.vertical ? 'vertical' : 'horizontal');
    return newProps;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this.getNestingLevel() ? <Div {...this._getPropsToPass()}>
            {this.getChildren()}
          </Div> : null;
  }
  //@@viewOff:render
});

export default ButtonGroup;