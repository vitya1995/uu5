import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Button from './button.js';
import Icon from './icon.js';
import DropdownItem from './dropdown-item.js';

import './dropdown.less';

export const Dropdown = createReactClass({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ColorSchemaMixin, UU5.Common.ContentMixin, UU5.Common.NestingLevelMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Dropdown"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: ns.css("dropdown"),
      dropdown: ns.css("dropdown-dropdown"),
      dropup: ns.css("dropdown-dropup"),
      split: ns.css("dropdown-group"),
      buttonGroup: ns.css("button-group", "button-group-horizontal"),
      pullRight: ns.css("dropdown-right"),
      pullRightMenu: ns.css("dropdown-menu-right"),
      dropdownBtn: ns.css("dropdown-button"),
      buttonCover: ns.css("dropdown-button-cover"),
      menu: ns.css("dropdown-menu"),
      menuList: ns.css("dropdown-menu-list"),
      menuWrapper: ns.css("dropdown-menu-wrapper"),
      open: ns.css("dropdown-open"),
      autoDropup: ns.css("dropdown-dropup"),
      autoDropdown: ns.css("dropdown-dropdown"),
      block: ns.css("dropdown-block")
    },
    defaults: {
      childTagName: 'UU5.Bricks.Dropdown.Item'
    },
    opt: {
      nestingLevelRoot: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    label: PropTypes.any, // content
    size: PropTypes.string,
    onClick: PropTypes.func,
    bgStyle: PropTypes.string,

    // icon props
    iconOpen: PropTypes.string,
    iconClosed: PropTypes.string,
    iconHidden: PropTypes.bool,

    // dropdown props
    items: PropTypes.arrayOf(PropTypes.object // UU5.Bricks.Dropdown.item props
    ),
    pullRight: PropTypes.bool,
    dropup: PropTypes.bool,
    split: PropTypes.bool,

    // link child props
    smoothScroll: PropTypes.number,
    offset: PropTypes.number,

    closedOnLeave: PropTypes.bool,
    allowTags: PropTypes.arrayOf(PropTypes.string),
    disableBackdrop: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      label: 'Dropdown',
      size: 'm',
      onClick: null,
      bgStyle: undefined,
      iconOpen: 'mdi-menu-down',
      iconClosed: 'mdi-menu-down',
      iconHidden: false,
      pullRight: false,
      dropup: false,
      split: false,
      smoothScroll: null,
      offset: null,
      closedOnLeave: false,
      allowTags: [],
      disableBackdrop: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      open: false,
      dropup: this.props.dropup,
      block: false,
      left: 0
    };
  },

  componentWillUnmount() {
    this._removeEvent();
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isDropdown() {
    return true;
  },

  open: function (setStateCallback) {
    this._stopPropagation = true;
    this._addEvent();
    this.setState({ open: true }, setStateCallback);
    return this;
  },

  close: function (setStateCallback) {
    this._removeEvent();
    this.setState({ open: false }, setStateCallback);
    return this;
  },

  toggle: function (setStateCallback) {
    this.setState(function (state) {
      this._stopPropagation = !state.open;
      state.open ? this._removeEvent() : this._addEvent();
      return { open: !state.open };
    }, setStateCallback);
    return this;
  },

  isOpen: function () {
    return this.state.open;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_: function (child) {
    var newChildProps = UU5.Common.Tools.mergeDeep({}, child.props);

    newChildProps.smoothScroll = newChildProps.smoothScroll || this.props.smoothScroll;
    newChildProps.offset = newChildProps.offset || this.props.offset;
    newChildProps.dropup = newChildProps.dropup || this.state.dropup;

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget(item) {
    let result = false;
    let id = this.getId();

    if (item.id === id) {
      result = true;
    } else if (item.parentElement) {
      result = this._findTarget(item.parentElement);
    }

    return result;
  },

  _addEvent() {
    !this.props.disableBackdrop && UU5.Environment.EventListener.addWindowEvent('click', this.getId(), e => {
      let isDropdown = this._findTarget(e.target);

      if (!this._stopPropagation && !isDropdown && this.isOpen()) {
        this.close();
      } else {
        this._stopPropagation = false;
      }
    });
    return this;
  },

  _removeEvent() {
    !this.props.disableBackdrop && UU5.Environment.EventListener.removeWindowEvent('click', this.getId());
    return this;
  },

  _toggle: function (newState, setStateCallback) {
    this.setState(state => {
      state.open ? this._removeEvent() : this._addEvent();
      newState.open = !state.open;
      return newState;
    }, setStateCallback);
    return this;
  },

  _getIcon: function () {
    var icon = null;
    if (!this.props.iconHidden) {
      var iconName = this.isOpen() ? this.props.iconOpen : this.props.iconClosed;
      icon = <Icon icon={iconName} />;
    }
    return icon;
  },

  _getChildren: function () {
    var contentProps = {};

    if (this.props.items) {
      contentProps = {
        content: {
          tag: this.getDefault().childTagName,
          propsArray: this.props.items
        }
      };
    } else if (this.props.children) {
      contentProps = { children: this.props.children };
    }
    contentProps.nestingLevel = this.getNestingLevel();

    return this.buildChildren(contentProps);
  },

  _getButton: function () {
    var dropdown = this;
    var onClick = null;
    if (this.props.split) {
      if (typeof this.props.onClick === 'function') {
        onClick = function (button, event) {
          dropdown.props.onClick(dropdown, event);
        };
      }
    } else {
      onClick = this._onClickHandler;
    }

    var buttonProps = {
      colorSchema: this.getColorSchema(),
      size: this.props.size,
      disabled: this.isDisabled(),
      onClick: onClick,
      bgStyle: this.props.bgStyle
    };

    var icon = null;
    if (!this.props.split) {
      buttonProps.className = this.getClassName().dropdownBtn;
      icon = this._getIcon();
    }
    /*
     return (
     <Button {...buttonProps}>
     <Span content={this.props.label} /> {icon}
     </Button>
     );*/
    let content;
    if (Array.isArray(this.props.label)) {
      content = this.props.label.concat([icon]);
    } else {
      content = [this.props.label, icon];
    }
    return <Button {...buttonProps} content={content} />;
  },

  _getIconButton: function () {
    var iconButton = null;

    if (this.props.split) {
      iconButton = <Button colorSchema={this.getColorSchema()} size={this.props.size} disabled={this.isDisabled()} className={this.getClassName().dropdownBtn} onClick={this._onClickHandler}>
          {this._getIcon()}
        </Button>;
    }

    return iconButton;
  },

  _onClickHandler: function () {
    this._stopPropagation = true;

    let dropdown = ReactDOM.findDOMNode(this);
    let dropdownMenu = ReactDOM.findDOMNode(this._dropdownMenu);
    let dropdownRect = dropdown.getBoundingClientRect();
    let dropdownMenuRect = dropdownMenu.getBoundingClientRect();

    let parent = UU5.Common.Tools.getElementByComputedStyle(document.getElementById(this.getId()), 'overflow', 'hidden');
    let documentClientHeight = document.getElementsByTagName('html')[0].clientHeight;
    let parentHeight = parent ? UU5.Common.Tools.getInnerHeight(parent) : documentClientHeight;

    let documentClientWidth = document.getElementsByTagName('html')[0].clientWidth;
    let parentWidth = parent ? UU5.Common.Tools.getInnerWidth(parent) : documentClientWidth;

    let width = parentWidth < documentClientWidth ? parentWidth : documentClientWidth;
    let left = 0;
    if (width - dropdownMenuRect.left < dropdownMenuRect.width) {
      left = dropdownRect.width - dropdownMenuRect.width;
      if (dropdownMenuRect.left < left * -1) {
        left = dropdownMenuRect.left;
      }
    }
    if (this.props.pullRight) {
      left = null;
      if (dropdown.clientWidth + dropdown.offsetLeft < dropdownMenu.clientWidth) {
        left = 0;
      }
      if (width < dropdownMenu.clientWidth) {
        left = null;
      }
    }

    let fitParent = dropdownRect.height + dropdownMenuRect.height < parentHeight;
    let fitDown = dropdownRect.height + dropdownMenuRect.height + dropdown.offsetTop - window.pageYOffset < (parentHeight < documentClientHeight ? parentHeight : documentClientHeight);
    let fitUp = dropdown.offsetTop - window.pageYOffset > dropdownMenuRect.height;

    if (!fitParent) {
      this._toggle({ dropup: false, block: true, left: left, marginBottom: null });
    } else if (!fitDown && fitUp || this.state.dropup) {
      this._toggle({ dropup: true, block: false, left: left, marginBottom: dropdownRect.height });
    } else if (!this.props.dropup && fitDown) {
      this._toggle({ dropup: false, block: false, left: left, marginBottom: null });
    } else {
      this.toggle();
    }
    return this;
  },

  _getMainAttrs: function () {
    var mainAttrs = this.getMainAttrs();

    mainAttrs.id = this.getId();

    if (this.isOpen()) {
      mainAttrs.className += ' ' + this.getClassName().open;
    }

    this.props.pullRight && (mainAttrs.className += ' ' + this.getClassName().pullRight);

    if (this.props.split) {
      mainAttrs.className += ' ' + this.getClassName().split;
    } else if (this.props.dropup) {
      mainAttrs.className += ' ' + this.getClassName().dropup;
    } else {
      mainAttrs.className += ' ' + this.getClassName().dropdown;
    }

    if (this.state.dropup) {
      mainAttrs.className += ' ' + this.getClassName().autoDropup;
    } else {
      mainAttrs.className += ' ' + this.getClassName().autoDropdown;
    }

    mainAttrs.onMouseLeave = this.props.closedOnLeave ? () => {
      this.close();
    } : null;

    return mainAttrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var menuClass = this.getClassName().menu;
    this.props.pullRight && (menuClass += ' ' + this.getClassName().pullRightMenu);
    this.state.block && (menuClass += ' ' + this.getClassName('block'));

    let style = {
      left: this.state.left + 'px',
      right: 'auto',
      marginBottom: this.state.marginBottom || 0
    };
    if (this.props.pullRight) {
      if (!this.state.open || this.state.left === null) {
        style = {
          right: 0,
          left: 'auto',
          marginBottom: this.state.marginBottom || 0
        };
      }
    }

    let buttonCoverClassName = this.getClassName().buttonCover;
    if (this.props.split) {
      buttonCoverClassName += " " + this.getClassName("buttonGroup");
    }

    return this.getNestingLevel() ? <div {...this._getMainAttrs()}>
            <div className={buttonCoverClassName} id={this.getId() + '-cover'}>
              {this._getButton()}
              {this._getIconButton()}
            </div>

            <div className={this.getClassName('menuWrapper')}>
              <div className={menuClass} ref={dropdownMenu => this._dropdownMenu = dropdownMenu} style={style}>
                <ul className={this.getClassName('menuList')}>
                {this._getChildren()}
                </ul>
              </div>
            </div>

            {this.getDisabledCover()}
          </div> : null;
  }
  //@@viewOff:render
});

Dropdown.Item = DropdownItem;
export default Dropdown;