import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import ContextMenu from "./context-menu.js";
import Link from './link.js';
import Icon from './icon.js';

import './context-menu-item.less';

export const ContextMenuItem = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("ContextMenu.Item"),
    classNames: {
      main: ns.css("context-menu-item"),
      link: ns.css("context-menu-item-link"),
      icon: ns.css("context-menu-item-icon"),
      nestedIcon: ns.css("context-menu-item-nested-icon"),
      space: ns.css("context-menu-item-space"),
      divider: ns.css("context-menu-item-divider")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    label: PropTypes.any, // content
    href: PropTypes.string,
    onClick: PropTypes.func,
    smoothScroll: PropTypes.number,
    offset: PropTypes.number,
    target: PropTypes.string,
    icon: PropTypes.string,
    space: PropTypes.bool,
    divider: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      label: null,
      href: '#',
      onClick: null,
      smoothScroll: null,
      offset: null,
      target: '_self',
      icon: null,
      space: false,
      divider: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getLinkProps() {
    const linkProps = {
      className: this.getClassName().link,
      parent: this,
      disabled: this.isDisabled(),
      colorSchema: "custom"
    };

    if (!this.isDisabled()) {
      linkProps.onClick = this._onItemClick;
      linkProps.href = this.props.href;
      linkProps.smoothScroll = this.props.smoothScroll;
      linkProps.offset = this.props.offset;
      linkProps.target = this.props.target;
    }

    return linkProps;
  },

  _getStandardItem(props) {
    const linkProps = this._getLinkProps();

    this.props.space && !this.props.icon && (props.className += ' ' + this.getClassName('space'));
    let content = [this.props.label];
    this.props.icon && content.unshift(<Icon icon={this.props.icon} className={this.getClassName('icon')} />);
    linkProps.content = content;

    return <li {...props}>
        <Link {...linkProps} />
      </li>;
  },

  _getNestingItem(props) {
    const linkProps = this._getLinkProps();
    linkProps.onClick = null;
    linkProps.href = null;

    this.props.space && !this.props.icon && (props.className += ' ' + this.getClassName('space'));
    let content = [this.props.label];
    this.props.icon && content.unshift(<Icon icon={this.props.icon} className={this.getClassName('icon')} />);
    content.push(<Icon icon="mdi-menu-right" className={this.getClassName('icon')} />);
    linkProps.content = content;

    return <li {...props} onMouseEnter={e => {
      const rect = e.currentTarget.getBoundingClientRect();
      const x = rect.width - 1;
      const y = -1;

      this._nestedMenu.open({ pageX: x, pageY: y });
    }} onMouseLeave={this._onMouseLeaveHandler}>
      <Link {...linkProps} />
      {this._getNestedContextMenu()}
    </li>;
  },

  _onItemClick(target, event) {
    const parent = this.getParentByType('isContextMenu') || this.getParent();
    if (typeof this.props.onClick === 'function') {
      this.props.onClick({ component: parent, target: target, event: event, value: this.props.label });
    } else {
      parent && parent.close();
    }
    return this;
  },

  _getContentItem(props) {
    return <li {...props}>{this.getChildren()}</li>;
  },

  _getDividerItem(props) {
    props.className += ' ' + this.getClassName().divider;
    return <li {...props} />;
  },

  _onMouseLeaveHandler(e) {
    this._nestedMenu.close();
  },

  _getNestedContextMenu() {
    return <ContextMenu key="nestedMenu" ref_={cm => this._nestedMenu = cm} parent={this}>
        {this.getChildren()}
      </ContextMenu>;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let mainAttrs = this.getMainAttrs();
    mainAttrs.id = this.getId();

    let result = null;

    if (this.props.divider) {
      result = this._getDividerItem(mainAttrs);
    } else if (this.getContent() || this.props.children) {
      if (this.props.label) {
        result = this._getNestingItem(mainAttrs);
      } else {
        result = this._getContentItem(mainAttrs);
      }
    } else {
      result = this._getStandardItem(mainAttrs);
    }

    return result;
  }
  //@@viewOff:render
});

export default ContextMenuItem;