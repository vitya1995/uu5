import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "./forms-ns.js";

import ItemsInput from './internal/items-input.js';

import ChoiceMixin from './mixins/choice-mixin.js';
import InputMixin from './mixins/input-mixin.js';

import './file.less';

export const File = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, InputMixin, ChoiceMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("File"),
    classNames: {
      main: ns.css("file"),
      input: ns.css("file-input"),
      close: ns.css("file-close-icon"),
      multiple: ns.css("file-multiple"),
      selected: ns.css("file-selected"),
      list: ns.css("file-list")
    },
    lsi: () => UU5.Environment.Lsi.Forms.message
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
    multiple: PropTypes.bool,
    closeIcon: PropTypes.string,
    selectedIcon: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      //value: null,
      multiple: false,
      icon: 'mdi-cloud-upload',
      closeIcon: 'mdi-window-close',
      selectedIcon: 'mdi-attachment'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: this.state.value, event: null, component: this });
    }
  },

  componentDidMount() {
    let dropZone = document.getElementById(this.getId());
    UU5.Environment.EventListener.createEvent(dropZone, 'dragover', this.getId(), this._handleDragOver);
    UU5.Environment.EventListener.createEvent(dropZone, 'drop', this.getId(), this._handleFileSelect);
    return this;
  },

  componentWillUnmount() {
    let dropZone = document.getElementById(this.getId());
    UU5.Environment.EventListener.deleteEvent(dropZone, 'dragover', this.getId());
    UU5.Environment.EventListener.deleteEvent(dropZone, 'drop', this.getId());
    return this;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  addValue(file, setStateCallback) {
    this.setValue(this._buildNewValue(file), setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  setValue_(value, setStateCallback) {
    if (this._checkRequired({ value: value })) {
      if (typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.setInitial(null, value, setStateCallback);
      }
    }

    return this;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _changeValue(value, e) {
    let opt = { value: value, event: e, component: this };

    if (typeof this.props.onChange === 'function') {
      this.props.onChange(opt);
    } else {
      let result = this.getChangeFeedback(opt);
      this.setState({
        feedback: result.feedback,
        message: result.message,
        value: result.value
      });
    }
    return this;
  },

  _onChange(e) {
    if (!this.isDisabled() && !this.isReadOnly()) {
      this._changeValue(this._buildNewValue(e.target.files), e);
    }
    return this;
  },

  _buildNewValue(file) {
    let newValue = null;
    if (file.length) {
      if (this.props.multiple) {
        newValue = this.state.value ? this.state.value.slice() : [];
        let prevValue = newValue.slice();

        for (let i = 0; i < file.length; i++) {
          if (!prevValue.some(item => {
            return file[i].name === item.name && file[i].size === item.size && file[i].lastModified === item.lastModified;
          })) {
            newValue.push(file[i]);
          }
        }
      } else {
        newValue = file[0];
      }
    } else {
      newValue = file;
    }
    return newValue;
  },

  _getTextInputAttrs() {
    var props = {};

    if (!this.state.isReadOnly && !this.isDisabled()) {
      props.onClick = () => this._open();
    }

    return props;
  },

  _getMainAttrs() {
    let attrs = this._getInputAttrs();
    if (this.props.multiple) {
      attrs.className += ' ' + this.getClassName().multiple;
    }
    if (!this.props.multiple && this.state.value) {
      attrs.className += ' ' + this.getClassName().selected;
    }
    return attrs;
  },

  _validateOnChange(opt) {
    let result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if (typeof result === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },

  _getIcon() {
    return !this.props.multiple && this.state.value ? this.props.selectedIcon : this.props.icon;
  },

  _open() {
    document.getElementById(this.getId() + '-file').click();
    return this;
  },

  _handleFileSelect(e) {
    e.stopPropagation();
    e.preventDefault();

    this.addValue(e.dataTransfer.files);

    return this;
  },

  _handleDragOver(e) {
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.

    return this;
  },

  _getFilesName() {
    let result = '';
    let value = this.state.value;

    if (value) {
      if (Array.isArray(value)) {
        result = value.map((file, i) => {
          return <li key={i}>
              <UU5.Bricks.Icon icon={this.props.selectedIcon} />
              {file.name}
              <UU5.Bricks.Icon className={this.getClassName().close} icon={this.props.closeIcon} mainAttrs={{
              onClick: e => {
                this._changeValue(this.state.value.filter(item => item !== file), e);
              }
            }} />
            </li>;
        });
      } else {
        result = value.name;
      }
    }

    return result;
  },

  _checkRequired(opt) {
    let result = true;
    if (this.props.required && !opt.value) {
      result = false;
      this.setError(this.props.requiredMessage || this.getLsiComponent('requiredMessage'), opt.value);
    }

    return result;
  },

  _getFileInput() {
    return <input value="" type="file" id={this.getId() + '-file'} multiple={this.props.multiple} onChange={this._onChange} className={this.getClassName().input} ref={item => this.inputVal = item} />;
  },
  /*
  <Icon
    mainAttrs={{
      onClick: () => {
        this.setValue(null);
      }
    }}
    className={this.getClassName().close}
    icon={this.props.closeIcon}
  />*/

  _getSingleInput(inputId) {
    return [<ItemsInput id={inputId} name={this.props.name || inputId} value={this._getFilesName()} placeholder={this.props.placeholder} multiple={this.props.multiple} mainAttrs={this.props.inputAttrs} disabled={this.isDisabled() || this.isLoading()} readonly={this.isReadOnly()} loading={this.isLoading()} onItemClick={opt => {
      this.removeItem(opt);
    }} onClick={!this.isReadOnly() && !this.isDisabled() ? () => this._open() : null} icon={this._getIcon()} feedback={this.getFeedback()} />, this.state.value && !this.state.disabled && !this.state.readOnly ? <UU5.Bricks.Icon className={this.getClassName().close} icon={this.props.closeIcon} mainAttrs={{
      onClick: e => {
        this._changeValue(null, e);
      }
    }} /> : null, this._getFileInput()];
  },

  _getMultipleInput(inputId) {
    return [<ItemsInput id={inputId} name={this.props.name || inputId}
    /*value={this._getFilesName()}*/
    placeholder={this.props.placeholder} multiple={this.props.multiple} mainAttrs={this.props.inputAttrs} disabled={this.isDisabled() || this.isLoading()} readonly={this.isReadOnly()} loading={this.isLoading()} onItemClick={opt => {
      this.removeItem(opt);
    }} onClick={!this.isReadOnly() && !this.isDisabled() ? () => this._open() : null} icon={this._getIcon()} feedback={this.getFeedback()} />, <ul className={this.getClassName().list}>
        {this._getFilesName()}
      </ul>, this._getFileInput()];
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let inputId = this.getId() + '-input';
    return <div {...this._getMainAttrs()} id={this.getId()}>
        {this.getLabel(inputId)}
        {this.getInputWrapper(this.props.multiple ? this._getMultipleInput(inputId) : this._getSingleInput(inputId))}
      </div>;
  }
  //@@viewOff:render
});

export default File;