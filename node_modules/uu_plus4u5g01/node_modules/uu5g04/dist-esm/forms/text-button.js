import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "./forms-ns.js";

import InputWrapper from './internal/input-wrapper.js';
import TextInput from './internal/text-input.js';

import TextInputMixin from './mixins/text-input-mixin.js';

import ItemList from './internal/item-list.js';

import './text-button.less';

export const TextButton = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, TextInputMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("TextButton"),
    classNames: {
      main: ns.css("text-button")
    },
    lsi: () => UU5.Environment.Lsi.Forms.message
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: PropTypes.string,
    buttons: PropTypes.arrayOf(PropTypes.shape({
      icon: PropTypes.string,
      onClick: PropTypes.func,
      colorSchema: PropTypes.string
    })),
    pattern: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      value: '',
      buttons: null,
      pattern: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: this.state.value, event: null, component: this });
    }

    return this;
  },

  componentWillReceiveProps(nextProps) {
    if (this.props.controlled) {
      if (nextProps.required && (nextProps.value === '' || nextProps.value === null)) {
        this.setError(nextProps.requiredMessage || this.getLsiComponent('requiredMessage'));
      } else {
        this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value);
      }
    }
    return this;
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  // TODO: tohle je ještě otázka - je potřeba nastavit hodnotu z jiné komponenty (musí být validace) a z onChange (neměla by být validace)
  setValue_(value, setStateCallback) {
    if (this._checkRequired({ value: value })) {
      if (typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.setInitial(null, value, setStateCallback);
      }
    }

    return this;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onFocus(e) {
    let opt = { value: e.target.value, event: e, component: this };

    this._onFocusButton(opt);

    return this;
  },

  _onFocusButton(opt) {
    if (typeof this.props.onFocus === 'function') {
      this.props.onFocus(opt);
    } else {
      let result = this.getFocusFeedback(opt);
      result && this.setFeedback(result.feedback, result.message, result.value);
    }

    return this;
  },

  _validateOnChange(opt) {
    let result = this.onValidate(opt);
    if (result) {
      if (typeof result === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },

  /*_getFeedbackIcon(){
    let icon = this.props.required ? this.props.successIcon : null;
    switch (this.getFeedback()) {
      case 'success':
        icon = this.props.successIcon;
        break;
      case 'warning':
        icon = this.props.warningIcon;
        break;
      case 'error':
        icon = this.props.errorIcon;
        break;
    }
    return icon;
  },*/

  _getButtons() {
    let result = [];
    if (!this.isReadOnly()) {
      this.props.buttons && this.props.buttons.map((button, key) => {
        let newButton = UU5.Common.Tools.merge({
          size: this.props.size
        }, button);
        if (typeof button.onClick === 'function') {
          newButton.onClick = () => {
            this._onFocusButton({ value: this.state.value, component: this });
            button.onClick({ value: this.state.value, component: this });
          };
        }
        if (this.isDisabled()) {
          newButton.disabled = true;
        }
        result.push(newButton);
      });
    }

    return result;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let inputId = this.getId() + '-input';

    return <div {...this._getInputAttrs()}>
        {this.getLabel(inputId)}
        {this.getInputWrapper([<TextInput id={inputId} name={this.props.name || inputId} value={this.state.value} placeholder={this.props.placeholder} type="text" onChange={this.onChange} onBlur={this.onBlur} onFocus={this._onFocus} onKeyDown={this.onKeyDown} mainAttrs={this.props.inputAttrs} disabled={this.isDisabled() || this.isLoading()} readonly={this.isReadOnly()} loading={this.isLoading()} ref_={item => this._textInput = item} />, this.state.autocompleteItems && <ItemList {...this._getItemListProps()}>
              {this._getChildren()}
            </ItemList>, this.state.autocompleteItems && <UU5.Bricks.Backdrop {...this._getBackdropProps()} />], this._getButtons())}
      </div>;
  }
  //@@viewOn:render
});

export default TextButton;