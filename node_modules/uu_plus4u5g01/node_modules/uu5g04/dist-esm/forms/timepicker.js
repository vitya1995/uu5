import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./forms-ns.js";

import TextInput from './internal/text-input.js';
import Time from './time.js';

import TextInputMixin from './mixins/text-input-mixin.js';

import './timepicker.less';

const FORMAT_AM = 'AM';
const FORMAT_PM = 'PM';
const FORMAT_12 = '12';
const FORMAT_24 = '24';
export const Timepicker = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, TextInputMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Timepicker"),
    classNames: {
      main: ns.css("timepicker"),
      open: ns.css("timepicker-open"),
      menu: ns.css("input-menu")
    },
    defaults: {
      regexpFormat1: /^\d{1,2}:?\d{0,2} ?[PpAa]?\.?[Mm]?\.?$/,
      regexpFormat2: /^\d{1,2}:?\d{0,2}$/,
      regexpPm: /(PM|pm|Pm)/,
      regexpAm: /(AM|am|Am)/
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: PropTypes.string,
    iconOpen: PropTypes.string,
    iconClosed: PropTypes.string,
    format: PropTypes.oneOf([FORMAT_24, FORMAT_12]),
    nanMessage: PropTypes.any
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      value: '',
      iconOpen: 'mdi-clock',
      iconClosed: 'mdi-clock',
      format: FORMAT_24,
      nanMessage: 'Please insert a valid time.'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      open: false
    };
  },

  componentWillMount() {
    if (typeof this.props.onValidate === 'function') {
      let result = this._isValidTimeResult({ value: this._formatTime(this._parseTime(this.state.value), true) });
      if (result) {
        if (typeof result === 'object') {
          if (result.feedback) {
            this.setFeedback(result.feedback, result.message, this._formatTime(this._parseTime(result.value), true));
          } else {
            this._validateOnChange({
              value: this._formatTime(this._parseTime(this.state.value), true),
              event: null,
              component: this
            });
          }
        }
      }
    }
    return this;
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      let result = this._isValidTimeResult({ value: nextProps.value });
      if (result) {
        if (typeof result === 'object') {
          if (result.feedback) {
            this.setFeedback(result.feedback, result.message, result.value);
          } else {
            this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value);
          }
        }
      }
    }
    return this;
  },

  componentWillUnmount() {
    this._removeEvent();
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  close(setStateCallback, e) {
    this._removeEvent();
    let opt = { value: this.getValue(), event: e, component: this };
    setStateCallback = typeof setStateCallback === 'function' ? setStateCallback : () => this._onBlurTime(opt);
    this.setState({ open: false }, setStateCallback);
    return this;
  },

  toggle(setStateCallback, e) {
    let opt = { value: this.getValue(), event: e, component: this };
    //setStateCallback = setStateCallback || this.isOpen() ? () => this._onFocusTime(opt) : () => this._onBlurTime(opt);
    // this.setState((state) => ({ open: !state.open }), () => this._onFocusTime(opt));
    this.setState(function (state) {
      state.open ? this._removeEvent() : this._addEvent();
      return { open: !state.open };
    }, () => this._onFocusTime(opt));
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  setValue_(value, setStateCallback) {
    if (this._checkRequired({ value: value })) {
      if (typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.setInitial(null, value, setStateCallback);
      }
    }
    return this;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget(item) {
    let result = false;
    let id = this.getId();

    if (item.id === id) {
      result = true;
    } else if (item.parentElement) {
      result = this._findTarget(item.parentElement);
    }
    return result;
  },

  _addEvent() {
    UU5.Environment.EventListener.addWindowEvent('click', this.getId(), e => {
      let isTimepicker = this._findTarget(e.target);

      if (!this._stopPropagation && !isTimepicker && this.isOpen()) {
        this.close();
      } else {
        this._stopPropagation = false;
      }
    });
    return this;
  },

  _removeEvent() {
    UU5.Environment.EventListener.removeWindowEvent('click', this.getId());
    return this;
  },

  _onChange(e, opt) {
    opt = opt || { value: e.target.value, event: e, component: this };

    if (opt.value === '' || this._parseTime(opt.value)) {
      if (!this.isDisabled() && !this.isReadOnly()) {
        if (typeof this.props.onChange === 'function') {
          this.props.onChange(opt);
        } else {
          if (this.props.validateOnChange) {
            this._validateOnChange(opt);
          } else {
            if (opt.value === '') {
              this.setState({ value: opt.value });
            } else if (this._checkRequired({ value: opt.value })) {
              opt.required = this.props.required;
              let result = this.getChangeFeedback(opt);

              if (!result.value || this.props.format === FORMAT_12 && result.value.match(this.getDefault().regexpFormat1) || this.props.format === FORMAT_24 && result.value.match(this.getDefault().regexpFormat2)) {
                this.setFeedback(result.feedback, result.message, result.value);
              }
            }
          }
        }
      }
    } else {
      this.setState({ value: opt.value });
    }

    return this;
  },

  _onFocus(e) {
    let opt = { value: e.target.value, event: e, component: this };

    this._onFocusTime(opt);

    return this;
  },

  _onFocusTime(opt) {
    if (typeof this.props.onFocus === 'function') {
      this.props.onFocus(opt);
    } else {
      let result = this.getFocusFeedback(opt);
      result && this.setFeedback(result.feedback, result.message, result.value);
    }

    return this;
  },

  _onBlur(e) {
    let opt = { value: e.target.value, event: e, component: this };
    //if (this.isOpen()) {
    //this.close();
    //} else {
    this._onBlurTime(opt);
    //}
    return this;
  },

  _onBlurTime(opt) {
    if (typeof this.props.onBlur === 'function') {
      this.props.onBlur(opt);
    } else {
      if (this._checkRequired({ value: opt.value }) && !this.props.validateOnChange) {
        opt.required = this.props.required;
        let blurResult = this.getBlurFeedback(opt);
        let result = this._isValidTimeResult(blurResult);
        this.setFeedback(result.feedback, result.message, this._formatTime(this._parseTime(blurResult.value), true));
      }
    }
    return this;
  },

  _isValidTimeResult(opt) {
    let result = opt;
    let time = this._parseTime(opt.value);
    if (!time && opt.value) {
      result.feedback = 'error';
      result.message = this.props.nanMessage;
    }
    return result;
  },

  _validateOnChange(opt) {
    let result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if (typeof result === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },

  _getFeedbackIcon() {
    return this.isOpen() ? this.props.iconOpen : this.props.iconClosed;
  },

  _onTimeChange(opt) {
    if (!this.isDisabled() && !this.isReadOnly()) {
      if (typeof this.props.onChange === 'function') {
        this.props.onChange({
          value: this._formatTime(opt.value, true),
          event: opt.event,
          component: this
        });
      } else {
        this.setValue_(this._formatTime(opt.value, true), () => this._onBlurTime({
          value: this._formatTime(opt.value, true),
          component: this
        }));
      }
    }
    return this;
  },

  _getTimeProps(value) {
    if (!this.state.value || this.state.value.trim() === "") {
      value = null;
    }
    return {
      className: this.getClassName().menu,
      value: value,
      ref_: this._refCalendar,
      hidden: !this.isOpen(),
      onChange: this._onTimeChange,
      format: this.props.format,
      controlled: true
    };
  },

  _formatTime(value, fill0) {
    let time = '';
    if (value) {
      if (fill0) {
        time = UU5.Common.Tools.rjust(value.hours, 2, '0') + ':' + UU5.Common.Tools.rjust(value.minutes, 2, '0');
      } else {
        time = value.hours + ':' + value.minutes;
      }
      if (this.props.format === FORMAT_12) {
        time += ' ' + (value.dayPart || FORMAT_AM);
      }
    }
    return time;
  },

  _parseTime(stringTime) {
    stringTime = stringTime ? stringTime.trim() : '';
    let value = null;

    if (typeof stringTime === 'string' && stringTime.trim() !== '') {
      stringTime = stringTime.trim();

      value = {
        hours: 0,
        minutes: 0
      };

      if (stringTime.indexOf(':') !== -1) {
        let dateArray = stringTime.split(':');
        value.hours = parseInt(dateArray[0].trim()) || 0;
        value.minutes = parseInt(dateArray[1].trim()) || 0;
      } else {
        value.hours = parseInt(stringTime) || 0;
      }

      if (value.hours < 0 || value.hours > 23 || value.minutes < 0 || value.minutes > 59) {
        value = null;
      } else if (this.props.format === FORMAT_12) {
        if (value.hours > 12) {
          value.hours -= 12;
        } else if (value.hours == 0) {
          value.hours = 12;
        }

        if (stringTime.match(this.getDefault().regexpPm)) {
          value.dayPart = FORMAT_PM;
        } else if (stringTime.match(this.getDefault().regexpAm)) {
          value.dayPart = FORMAT_AM;
        } else {
          value = null;
        }
      }
    }
    return value;
  },

  _getTextInputAttrs() {
    let props = {};
    if (!this.isReadOnly() && !this.isDisabled()) {
      props.onClick = () => {
        this._touchStart === undefined ? this.open() : this.toggle();
      };

      props.onTouchStart = () => {
        this._touchStart = new Date();
      };

      props.onTouchEnd = e => {
        e.preventDefault();
        if (new Date() - this._touchStart < UU5.Environment.holdTimeout) {
          this._touchStart = 0;
          e.target.click();
          e.target.focus();
        }
      };
    }

    props = UU5.Common.Tools.merge(this.props.inputAttrs, props);

    return props;
  },

  _getMainAttrs() {
    let attrs = this._getInputAttrs();
    attrs.id = this.getId();

    if (this.isOpen()) {
      attrs.className += ' ' + this.getClassName().open;
    }
    return attrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let inputId = this.getId() + '-input';
    let value = this._parseTime(this.state.value);

    return <div {...this._getMainAttrs()}>
        {this.getLabel(inputId)}
        {this.getInputWrapper([<TextInput id={inputId} name={this.props.name || inputId} value={this.state.value || ''} placeholder={this.props.placeholder} type="text" onChange={this._onChange} onBlur={this._onBlur} onFocus={this._onFocus} onKeyDown={this.onKeyDown} mainAttrs={this._getTextInputAttrs() || this.props.inputAttrs} disabled={this.isDisabled() || this.isLoading()} readonly={this.isReadOnly()} icon={this._getFeedbackIcon()} iconClickable={false} loading={this.isLoading()} ref_={item => this._textInput = item} feedback={this.getFeedback()} />, <Time {...this._getTimeProps(value)} />])}

      </div>;
  }
  //@@viewOn:render
});

export default Timepicker;