import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "./forms-ns.js";

import InputMixin from './mixins/input-mixin.js';
import TextInput from './internal/text-input.js';

import './slider.less';

export const Slider = createReactClass({

  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin, InputMixin],

  statics: {
    tagName: ns.name("Slider"),
    classNames: {
      main: ns.css("slider"),
      inputGroup: ns.css("slider-input-group"),
      slider: ns.css("slider-slider"),
      number: ns.css("slider-number"),
      sliderReadOnly: ns.css('slider-slider-read-only')
    },
    defaults: {
      nanMessage: 'Please insert a number'
    }
  },

  propTypes: {
    // TODO
    //position: PropTypes.oneOf(['horizontal', 'vertical']),
    min: PropTypes.number,
    max: PropTypes.number,
    step: PropTypes.number,
    value: PropTypes.number,
    onChange: PropTypes.func,
    onChanged: PropTypes.func
  },

  // Setting defaults
  getDefaultProps() {
    return {
      //position: 'horizontal',
      min: 0,
      max: 10,
      step: 1,
      value: null,
      onChanged: null
    };
  },

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    let value = typeof this.props.value === 'number' ? this.props.value : this.props.min;
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: value, event: null, component: this });
    } else {
      this.setFeedback(this.props.feedback, this.props.message, value);
    }
    return this;
  },

  componentWillReceiveProps(nextProps) {
    if (this.props.controlled) {
      let value = typeof this.props.value === 'number' ? nextProps.value : nextProps.min;
      this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value);
    }
    return this;
  },

  //@@viewOff:standardComponentLifeCycle

  // Interface

  // Overriding Functions
  setValue_(value, setStateCallback) {
    if (typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: value });
    } else {
      this.setInitial(null, value, setStateCallback);
    }

    return this;
  },

  // Component Specific Helpers
  // _onChange(e) {
  //   if (!this.isDisabled()) {
  //     var value = !this.getValue();
  //     var newState = this._validateValue(value);
  //
  //     if (newState) {
  //       this.setState(newState);
  //     } else {
  //       if (this.props.onChange) {
  //         this.props.onChange({ value: value, input: this, event: e });
  //       } else {
  //         this.setState({ value: value });
  //       }
  //     }
  //   }
  //   return this;
  // },

  _validateOnChange(opt) {
    let result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if (typeof result === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },

  _getMainAttrs() {
    return this.getInputMainAttrs();
  },

  _getInputGroupAttrs() {
    return {
      className: this.getClassName().inputGroup
    };
  },

  _getSliderProps() {
    let value = this.props.min;
    if (this.state.value !== null && this.state.value !== undefined) {
      value = typeof this.state.value === 'number' ? this.state.value : parseInt(this.state.value);
    }

    let content = this.getContent() || this.props.children && React.Children.toArray(this.props.children);
    let className = this.getClassName('slider');
    this.isReadOnly() && (className += ' ' + this.getClassName('sliderReadOnly'));

    return {
      name: this.getName(),
      className: className,
      colorSchema: this.props.colorSchema,
      //position: 'horizontal',
      min: this.props.min,
      max: this.props.max,
      step: this.props.step,
      value: value,
      content: content,
      onChange: this._onChange,
      onChanged: this.props.onChanged,
      disabled: this.isDisabled() || this.isReadOnly(),
      size: this.props.size
    };
  },

  _getNumberProps() {
    let value = this.state.value || 0;
    value = value > this.props.max ? this.props.max : value < this.props.min ? this.props.min : value;

    return {
      className: this.getClassName().number,
      min: this.props.min,
      max: this.props.max,
      value: value.toString(),
      onChange: event => {
        this._onChange({ component: this, value: event.target.value, event: event });
      },
      onBlur: opt => {
        if (this.state.value < this.props.min) {
          opt.component.setValue(this.props.min);
        } else if (this.state.value > this.props.max) {
          opt.component.setValue(this.props.max);
        }
      },
      disabled: this.isDisabled(),
      onChangeFeedback: this._onChangeNumberFeedback
    };
  },

  _getOnChanged(value, e) {
    let onChanged;
    if (typeof this.props.onChanged === 'function') {
      onChanged = () => {
        this.props.onChanged({ value: value, component: this, event: e });
      };
    }
    return onChanged;
  },

  _onChange(opt) {
    if (!this.isDisabled()) {
      if (typeof this.props.onChange == 'function') {
        opt.component = this;
        this.props.onChange(opt);
      } else if (typeof this.props.onValidate === 'function') {
        this._validateOnChange(opt);
      } else {
        let result = this._checkNumberResultChange(opt);
        if (result.feedback && result.feedback === 'warning') {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setInitial(null, opt.value, this._getOnChanged(opt.value, opt.event));
        }
      }
    }
    return this;
  },

  _checkNumberResultChange(opt) {
    if (opt.value) {
      opt.value = opt.value.toString();
      let isComma = opt.value.indexOf(',') > 0;

      opt.value = opt.value.trim().replace(new RegExp(this.props.thousandSeparator, 'g'), '');
      opt.value = opt.value.replace(',', '.');
      let isNan = isNaN(opt.value);

      if (isNan && opt.value != '-') {
        opt.value = this.state.value;
        opt.feedback = 'warning';
        opt.message = this.getDefault().nanMessage;
      }

      isComma && (opt.value = opt.value.replace('.', ','));
    }
    return opt;
  },

  _onChangeNumberFeedback(opt) {
    this.setValue(opt.value ? +opt.value : null, opt.callback);
    //this.setFeedback(opt.feedback, opt.message, opt.value ? +opt.value : null, opt.callback);
    return this;
  },

  // _getFeedbackIcon(){
  //   let icon = this.props.required ? this.props.successIcon : null;
  //   switch (this.getFeedback()) {
  //     case 'success':
  //       icon = this.props.successIcon;
  //       break;
  //     case 'warning':
  //       icon = this.props.warningIcon;
  //       break;
  //     case 'error':
  //       icon = this.props.errorIcon;
  //       break;
  //   }
  //   return icon;
  // },

  // Render
  render() {
    let inputId = this.getId() + '-input';
    return <div {...this._getInputAttrs()}>
        {this.getLabel(inputId)}
        {this.getInputWrapper([<UU5.Bricks.Slider {...this._getSliderProps()} />, <TextInput {...this._getNumberProps()} id={inputId} name={this.props.name || inputId} placeholder={this.props.placeholder} type="text" mainAttrs={this.props.inputAttrs} disabled={this.isDisabled() || this.isLoading()} readonly={this.isReadOnly()} loading={this.isLoading()} feedback={this.getFeedback()} />])}
      </div>;
  }
});

export default Slider;