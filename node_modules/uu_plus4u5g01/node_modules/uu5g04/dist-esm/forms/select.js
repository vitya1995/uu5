import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "./forms-ns.js";

import ItemList from './internal/item-list.js';
import ItemsInput from './internal/items-input.js';
import ChoiceMixin from './mixins/choice-mixin.js';
import InputMixin from './mixins/input-mixin.js';

import SelectOption from './select-option.js';

import './select.less';

export const Select = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, InputMixin, ChoiceMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Select"),
    classNames: {
      main: ns.css("select"),
      link: ns.css("select-link"),
      open: ns.css("select-open"),
      multiple: ns.css("select-multiple"),
      selectAllEnabled: ns.css("select-all")
    },
    defaults: {
      childTagName: 'UU5.Forms.Select.option'
    },
    lsi: () => UU5.Common.Tools.merge({}, UU5.Environment.Lsi.Forms.select, UU5.Environment.Lsi.Forms.message)
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
    multiple: PropTypes.bool,
    selectAllEnabled: PropTypes.bool,
    allowTags: PropTypes.array,
    disableBackdrop: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      value: null,
      multiple: false,
      allowTags: [],
      selectAllEnabled: false,
      disableBackdrop: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      open: false
    };
  },

  componentWillMount() {
    let value = [];
    if (this.props.value) {
      value = this._valuesToValuesArray(this.props.value);
    }
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: value, event: null, component: this });
    } else {
      this.setFeedback(this.props.feedback, this.props.message, value);
    }
    return this;
  },

  componentWillReceiveProps(nextProps) {
    let value = this._valuesToValuesArray(nextProps.value, nextProps.children);
    if (nextProps.controlled) {
      if (nextProps.required && this.state.value.length > 0 && (value.length < 1 || value === null)) {
        this.setError(nextProps.requiredMessage || this.getLsiComponent('requiredMessageChoice'));
      } else if (this.props.onValidate && typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.setFeedback(nextProps.feedback, nextProps.message, value);
      }
    }
    return this;
  },

  componentWillUnmount() {
    this._removeEvent();
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isSelect() {
    return true;
  },

  isOpen() {
    return this.state.open;
  },

  open(setStateCallback) {
    this._addEvent();
    this.setState({ open: true }, setStateCallback);
    return this;
  },

  close(setStateCallback) {
    this._removeEvent();
    this.setState({ open: false }, setStateCallback);
    return this;
  },

  toggle(setStateCallback) {
    this.setState(function (state) {
      state.open ? this._removeEvent() : this._addEvent();
      return { open: !state.open };
    }, setStateCallback);
    return this;
  },

  addValue: function (index, setStateCallback) {
    if (this.props.multiple) {
      var indexes = this.getValue() || [];
      var indexPosition = indexes.indexOf(index);
      if (indexPosition === -1) {
        indexes.push(index);
        this.setValue(indexes, setStateCallback);
      } else if (typeof setStateCallback === 'function') {
        setStateCallback();
      }
    } else {
      this.showWarning('notMultiple', 'addValue');
    }
    return this;
  },

  removeValue(opt, setStateCallback) {
    if (this.props.required && this.state.value.length === 1) {
      this.setError(this.props.requiredMessage || this.getLsiComponent('requiredMessageChoice'), null);
    }

    if (typeof this.props.onChange === 'function') {
      opt.component = this;
      this._itemList.getRenderedChildren().forEach(child => {
        let value = child ? child.props.selectedContent || child.props.content || child.props.children || child.props.value : null;
        if (value === opt.value) {
          opt.value = child.props.value;
        }
      });
      this.props.multiple ? this.props.onChange(opt) : this.toggle(() => this.props.onChange(opt));
    } else {
      var values = this.getValue() || [];
      if (opt.index > -1) {
        values.splice(opt.index, 1);
        !values.length && (values = null);
        this.setValue(values, setStateCallback);
      } else if (typeof setStateCallback === 'function') {
        setStateCallback();
      }
    }
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  _valuesToValuesArray(newValue, newChildren) {
    let value = [];
    let children = newChildren || this.getChildren();

    for (let i = 0; i < children.length; i++) {
      let childValue = children[i].props.value;
      if (typeof newValue === 'string') {
        if (newValue === childValue) {
          value.push(i);
        }
      } else if (newValue && newValue.length > 0) {
        if (newValue.indexOf(childValue) > -1) {
          value.push(i);
        }
      }
    }

    return value;
  },

  setValue_(value, setStateCallback) {
    let result = [];
    let children = this.getChildren();
    for (let i = 0; i < children.length; i++) {
      let childValue = children[i].props.value;
      if (typeof value === 'string') {
        if (value === childValue) {
          result.push(i);
        }
      } else if (value && value.length > 0) {
        if (value.indexOf(childValue) > -1) {
          result.push(i);
        }
      }
    }

    this.setState({ value: result || [] }, setStateCallback);
  },

  setFeedback_(feedback, message, value, setStateCallback) {
    if (typeof value === 'string') {
      value = this._valuesToValuesArray(value);
    } else if (Array.isArray(value)) {
      value = value.slice();
    }
    this.setState({
      feedback: feedback,
      message: message,
      value: value || []
    }, setStateCallback);

    return this;
  },

  getValue_(value) {
    value = value || this.state.value;
    let result = [];
    if (value) {
      for (let i = 0; i < value.length; i++) {
        result.push(this._itemList.getRenderedChildren()[value[i]].props.value);
      }
    }
    return this.props.multiple ? result : result[0];
  },

  shouldChildRender_(child) {
    let childTagName = UU5.Common.Tools.getChildTagName(child);
    let childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget(item) {
    let result = false;
    let id = this.getId();

    if (item.id === id) {
      result = true;
    } else if (item.parentElement) {
      result = this._findTarget(item.parentElement);
    }
    return result;
  },

  _addEvent() {
    !this.props.disableBackdrop && UU5.Environment.EventListener.addWindowEvent('click', this.getId(), e => {
      let isSelect = this._findTarget(e.target);

      if (!this._stopPropagation && !isSelect && this.isOpen()) {
        if (!this.props.multiple) {
          this.state.value.length > 0 ? this._onChange({ value: this.state.value }) : this._onChange();
        }
        this.close();
      } else {
        this._stopPropagation = false;
      }
    });
    return this;
  },

  _removeEvent() {
    !this.props.disableBackdrop && UU5.Environment.EventListener.removeWindowEvent('click', this.getId());
    return this;
  },

  _validateOnChange(opt) {
    let result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if (typeof result === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          let value = opt.value.slice();
          this.setState({ value: value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    } else {
      this.setInitial(null, opt.value);
    }
    return this;
  },

  _getBackdropProps() {
    var backdropId = this.getId() + "-backdrop";

    return {
      hidden: !this.isOpen(),
      id: backdropId,
      onClick: () => this._onChange({ open: !this.isOpen() })
    };
  },

  _getTextInputAttrs() {
    var props = {};

    if (!this.state.isReadOnly && !this.isDisabled()) {
      props.onClick = () => {
        this.open();
      };
    }

    return props;
  },

  _getItemListProps() {
    let props = {};
    let multiple = this.props.multiple;

    props.hidden = !this.isOpen();
    props.ref = itemList => this._itemList = itemList;
    props.onChange = opt => this._onChange(opt);

    props.value = this.state.value;
    props.multiple = this.props.multiple;
    props.allowTags = this.props.allowTags;

    return props;
  },

  _onChange(opt) {
    let multiple = this.props.multiple;
    let requiredResult = this._checkRequired(opt && opt.value > -1 ? opt.value : this.state.value);

    if (this.isOpen() && opt && opt.value > -1) {

      let value = [];
      if (opt.value !== null) {
        if (multiple) {
          if (this.state.value && this.state.value.length > 0) {
            for (let i = 0; i < this.state.value.length; i++) {
              value.push(this.state.value[i]);
            }
          }
          if (opt.value !== this.state.value || this.state.value.length === 0) {
            let itemPosition = value.indexOf(opt.value);
            if (itemPosition < 0) {
              value.push(opt.value);
            } else {
              value.splice(itemPosition, 1);
            }
          } else {
            value = [];
          }
        } else {
          value = [opt.value];
        }
      }

      let result = value;

      if (typeof this.props.onChange === 'function') {
        opt.component = this;
        opt.value = this._itemList.getRenderedChildren()[opt.value].props.value;
        multiple ? this.props.onChange(opt) : this.toggle(() => this.props.onChange(opt));
      } else if (!requiredResult) {
        this.setError(this.props.requiredMessage || this.getLsiComponent('requiredMessageChoice'), null, () => this.toggle());
      } else if (typeof this.props.onValidate === 'function') {
        opt.component = this;
        opt.value = multiple ? this._itemList.getRenderedChildren().filter((item, i) => Array.isArray(result) ? result.indexOf(i) !== -1 : result === i).map(item => item.props.value) : this._itemList.getRenderedChildren()[opt.value].props.value;

        result = this.props.onValidate(opt);
        if (result && typeof result === 'object') {
          if (typeof this.props.onChangeFeedback === 'function') {
            this.props.onChangeFeedback({
              feedback: result.feedback,
              message: result.message,
              value: result.value,
              callback: result.setStateCallback,
              component: this
            });
          } else {
            if (multiple) {
              const allItems = this._itemList.getRenderedChildren().map(item => item.props.value);
              result.value = result.value.map(item => allItems.indexOf(item));
              this.setFeedback(result.feedback, result.message, result.value);
            } else {
              this.toggle(() => this.setFeedback(result.feedback, result.message, result.value));
            }
          }
        }
      } else {
        multiple ? this.setInitial(null, result) : this.setInitial(null, result, () => this.toggle());
      }
    } else {
      if (requiredResult) {
        this.toggle(() => this.setInitial(null, this.state.value));
      } else {
        this.setError(this.props.requiredMessage || this.getLsiComponent('requiredMessageChoice'), null, () => this.toggle());
      }
    }
    return this;
  },

  _checkRequired(value) {
    let result = true;
    if ((!value && value !== 0 || value.length < 1) && this.props.required && this.isOpen()) {
      result = false;
    }

    return result;
  },

  _getMainAttrs() {
    let attrs = this._getInputAttrs();
    attrs.id = this.getId();

    if (this.isOpen()) {
      attrs.className += ' ' + this.getClassName().open;
    }

    if (this.props.multiple) {
      attrs.className += ' ' + this.getClassName().multiple;
    }

    if (this.props.selectAllEnabled) {
      attrs.className += ' ' + this.getClassName().selectAllEnabled;
    }

    return attrs;
  },

  _getItemValues(children) {
    let result = [];
    if (this.props.placeholder && children === null) {
      result.push(<UU5.Bricks.Span className={this.getClassName('placeholder')} content={this.props.placeholder} />);
    }
    if (children && this.state.value) {
      for (let i = 0; i < this.state.value.length; i++) {
        let child = children[this.state.value[i]];
        let childContent = child ? child.props.selectedContent || child.props.content || child.props.children || child.props.value : null;
        result.push(childContent);
      }
    }
    return result;
  },

  _getHeader() {
    let result;
    if (this.props.selectAllEnabled && this.props.multiple) {
      let label = this._isSelectedAll() ? this.getLsiComponent('unselectAll') : this.getLsiComponent('selectAll');
      result = <UU5.Bricks.Link content={label} onClick={this._select} className={this.getClassName('link')} colorSchema="grey" />;
    }
    return result;
  },

  _isSelectedAll() {
    let result = false;
    if (this.props.children && this.state.value && this.props.children.length === this.state.value.length) {
      result = true;
    }
    return result;
  },

  _select() {
    let result = [];
    if (this._isSelectedAll()) {} else {
      this.props.children && this.props.children.forEach((item, i) => {
        result.push(i);
      });
    }
    if (typeof this.props.onChange === 'function') {
      let value = this.getValue_(result);
      this.props.onChange({ value: value, component: this });
    } else {
      this.setState({ value: result });
    }
    return this;
  },

  _getChildren() {
    let children = [];
    if (this.props.children) {
      let childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
      React.Children.toArray(this.props.children).forEach(child => {
        let childTagName = UU5.Common.Tools.getChildTagName(child);
        if (childTagNames.indexOf(childTagName) > -1) {
          children.push(child);
        }
      });
    }
    return children;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let inputId = this.getId() + '-input';
    let children = this._getChildren();

    return <div {...this._getMainAttrs()}>
        {this.getLabel(inputId)}
        {this.getInputWrapper([<ItemsInput id={inputId} name={this.props.name || inputId} value={this._getItemValues(children)} placeholder={this.props.placeholder} multiple={this.props.multiple} mainAttrs={this.props.inputAttrs} disabled={this.isDisabled() || this.isLoading()} readonly={this.isReadOnly()} loading={this.isLoading()} onItemClick={!this.isReadOnly() && !this.isDisabled() ? opt => this.removeValue(opt) : null} onClick={!this.isReadOnly() && !this.isDisabled() ? () => this._onChange() : null} icon="mdi-menu-down" feedback={this.getFeedback()} />, <ItemList {...this._getItemListProps()} header={this._getHeader()} parent={this}>
            {children}
          </ItemList>])}
      </div>;
  }
  //@@viewOn:render
});

Select.Option = SelectOption;

export default Select;