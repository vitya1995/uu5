import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "../forms-ns.js";

import './items-input.less';

export default createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.LsiMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("ItemsInput"),
    classNames: {
      main: ns.css("items-input"),
      loading: ns.css("items-loading-icon"),
      value: ns.css("input-form-item-value"),
      item: ns.css("items-input-item uu5-common-bg color-schema-blue"),
      link: ns.css("items-input-item-link"),
      icon: ns.css("items-input-item-icon")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.arrayOf(PropTypes.string), PropTypes.arrayOf(PropTypes.object)]),
    multiple: PropTypes.bool,
    placeholder: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    loading: PropTypes.bool,
    onClick: PropTypes.func,
    onItemClick: PropTypes.func,
    feedback: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      value: '',
      multiple: false,
      placeholder: null,
      loading: false,
      onClick: null,
      onItemClick: null,
      feedback: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  changeValue(index, e, setStateCallback) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange({ value: index, event: e, component: this, setStateCallback: setStateCallback });
    }
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPlaceholder() {
    let placeholder;
    if (this.props.placeholder) {
      if (typeof this.props.placeholder === 'string') {
        placeholder = this.props.placeholder;
      } else if (typeof this.props.placeholder === 'object') {
        placeholder = this.getLsiItem(this.props.placeholder);
      }
    }

    return placeholder;
  },

  _getFeedbackIcon() {
    return this.props.loading ? <span className={this.getClassName().loading} /> : <UU5.Bricks.Icon icon={this.props.icon} />;
  },

  _getItems() {
    let value = this.props.value;
    if (this.props.multiple && this.props.value && this.props.value instanceof Array) {
      value = this.props.value.map((item, key) => {
        return <UU5.Bricks.Span className={this.getClassName("item")} key={key}>
              {React.Children.toArray(item)}
              {!this.props.disabled && !this.props.readonly && <UU5.Bricks.Link className={this.getClassName("link")} onClick={(link, e) => {
            e.stopPropagation();
            this.props.onItemClick({ component: this, event: e, value: item, index: key });
          }}>
                <UU5.Bricks.Icon icon="mdi-close" className={this.getClassName("icon")} />
              </UU5.Bricks.Link>}
            </UU5.Bricks.Span>;
      });
    } else {
      value = React.Children.toArray(this.props.value);
    }

    this.props.value.length < 1 && (value = this._getPlaceholder());
    return value;
  },

  _getMainAttrs() {
    let mainAttrs = this.getMainAttrs();

    switch (this.props.feedback) {
      case "success":
        mainAttrs.className += " color-schema-" + UU5.Environment.getColorSchema("success");
        break;
      case "warning":
        mainAttrs.className += " color-schema-" + UU5.Environment.getColorSchema("warning");
        break;
      case "error":
        mainAttrs.className += " color-schema-" + UU5.Environment.getColorSchema("danger");
        break;
    }

    return mainAttrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return <div {...this._getMainAttrs()} onClick={this.props.onClick}>
        <span className={this.getClassName().value}>
          {this._getItems()}
        </span>
        {this._getFeedbackIcon()}
      </div>;
  }
  //@@viewOn:render
});