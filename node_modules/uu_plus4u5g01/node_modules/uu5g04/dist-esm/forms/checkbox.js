import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "./forms-ns.js";

import InputMixin from './mixins/input-mixin.js';
import Message from './internal/message.js';

import './checkbox.less';

export const Checkbox = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ColorSchemaMixin, InputMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Checkbox"),
    classNames: {
      main: ns.css("checkbox"),
      button: ns.css("checkbox-button"),
      right: ns.css("input-label-right"),
      rightWrapper: ns.css("right-wrapper"),
      radio: ns.css("input-radio"),
      checked: ns.css("checkbox-checked"),
      dot: ns.css("checkbox-dot")
    },
    defaults: {
      onIcon: 'mdi-check'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: PropTypes.bool,
    onIcon: PropTypes.string,
    offIcon: PropTypes.string,
    labelPosition: PropTypes.oneOf(['left', 'right']),
    _radio: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      value: false,
      onIcon: '',
      offIcon: '',
      labelPosition: 'left',
      _radio: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ value: nextProps.value });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onChange(e) {
    let opt = { value: !this.state.value, event: e, component: this };
    if (!this.isDisabled() && !this.isReadOnly()) {
      if (typeof this.props.onChange === 'function') {
        this.props.onChange(opt);
      } else {
        this.setState(state => ({ value: !state.value }));
        return this;
      }
    }
  },

  _getMainAttrs() {
    let mainAttrs = this._getInputAttrs();
    mainAttrs.className += this.state.value ? ' ' + this.getClassName().checked : '';
    if (this.props._radio) {
      mainAttrs.className += ' ' + this.getClassName().radio;
    }

    if (this.props.labelPosition === 'right') {
      mainAttrs.className += ' ' + this.getClassName().right;
    }

    mainAttrs.onClick = e => {
      this._onChange(e);
    };

    return mainAttrs;
  },

  _getIcon() {
    let icon;

    if (this.props._radio && this.state.value && !this.props.onIcon) {
      icon = <span className={this.getClassName('dot')} />;
    } else {
      icon = <UU5.Bricks.Icon icon={this.state.value ? this.props.onIcon || this.getDefault('onIcon') : this.props.offIcon} />;
    }

    return icon;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let inputId = this.getId() + '-input';
    let label = this.getLabel(inputId);

    return <div {...this._getMainAttrs()}>
        {this.props.labelPosition === 'left' && label}
        {this.getInputWrapper(<UU5.Bricks.Div className={this.getClassName("rightWrapper")}>
            <UU5.Bricks.Button className={this.getClassName().button} colorSchema="custom" disabled={this.props.disabled} mainAttrs={this.props.inputAttrs} content={this._getIcon()} />
            {this.props.labelPosition === 'right' && label}
          </UU5.Bricks.Div>)}

      </div>;
  }
  //@@viewOn:render
});

export default Checkbox;