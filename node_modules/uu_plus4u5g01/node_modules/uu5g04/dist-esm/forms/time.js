import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "./forms-ns.js";

import './time.less';

const FORMAT_AM = 'AM';
const FORMAT_PM = 'PM';
const FORMAT_12 = '12';
const FORMAT_24 = '24';
export const Time = createReactClass({

  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin],

  statics: {
    tagName: ns.name("Time"),
    classNames: {
      main: ns.css("time"),
      button: ns.css("time-button"),
      hours: ns.css("time-hours"),
      minutes: ns.css("time-minutes"),
      hoursWrapper: ns.css("time-hours-wrapper"),
      minutesWrapper: ns.css("time-minutes-wrapper"),
      hoursPickerWrapper: ns.css("time-hours-picker-wrapper"),
      minutesPickerWrapper: ns.css("time-minutes-picker-wrapper"),
      timePart: ns.css("time-part"),
      timePartSwitch: ns.css("time-part-switch"),
      am: ns.css("time-am"),
      amSelected: ns.css("time-am-selected uu5-common-text"),
      pm: ns.css("time-pm"),
      pmSelected: ns.css("time-pm-selected uu5-common-text"),
      iconAm: ns.css("time-icon-am"),
      iconPm: ns.css("time-icon-pm"),
      nav: ns.css("time-nav")
    },
    defaults: {
      upIcon: 'mdi-chevron-up',
      downIcon: 'mdi-chevron-down'
    }
  },

  propTypes: {
    value: PropTypes.shape({
      hours: PropTypes.number,
      minutes: PropTypes.number,
      dayPart: PropTypes.oneOf([FORMAT_AM, FORMAT_PM])
    }),
    format: PropTypes.oneOf([FORMAT_12, FORMAT_24]),
    onChange: PropTypes.func
  },

  // Setting defaults
  getDefaultProps: function () {
    return {
      value: null,
      format: null,
      onChange: null
    };
  },

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return this._parseTime();
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.controlled) {
      if (!this.state.hours || !this.state.minutes || !this.state.dayPart || nextProps.value && (this.state.minutes !== nextProps.value.minutes || this.state.hours !== nextProps.value.hours || this.state.dayPart !== nextProps.value.dayPart)) {
        let state = this._parseTime(nextProps);
        this.setState(state);
      }
    }
    return this;
  },

  //@@viewOff:standardComponentLifeCycle

  // Interface

  // Overriding Functions

  // Component Specific Helpers
  _parseTime(props) {
    props = props || this.props;

    let result = {
      hours: this._isFormat12() ? 1 : 0,
      minutes: 0
    };

    if (props.value !== null) {
      result.hours = props.value.hours || result.hours;
      result.minutes = props.value.minutes || result.minutes;

      if (this._isFormat12()) {
        result.pm = props.value && props.value.dayPart === FORMAT_PM;
        result.hours > 12 && (result.hours -= 12);
      }
    } else {
      result = {
        hours: null,
        minutes: null
      };
    }

    return result;
  },

  _getDayPart(pm) {
    return pm ? FORMAT_PM : FORMAT_AM;
  },

  _addDayPart(value, pm) {
    value.dayPart = this._getDayPart(pm);
    return this;
  },

  _isFormat12() {
    return this.props.format === FORMAT_12;
  },

  _changeDayPart(e) {
    if (typeof this.props.onChange === 'function') {
      let value = { hours: this.state.hours, minutes: this.state.minutes };
      this._isFormat12() && this._addDayPart(value, !this.state.pm);

      this.props.onChange({
        value: value,
        event: e,
        component: this
      });
    } else {
      this.setState(state => ({ pm: !state.pm }));
    }

    return this;
  },

  _setTime(time, hours, e) {
    let is12 = this._isFormat12();
    let pm = this.state.pm;
    let value = {
      hours: hours ? time : this.state.hours || 0,
      minutes: hours ? this.state.minutes || 0 : time
    };

    if (typeof this.props.onChange === 'function') {
      is12 && this._addDayPart(value, pm);

      this.props.onChange({
        value: value,
        event: e,
        component: this
      });
    } else {
      is12 && (value.pm = pm);
      this.setState(value);
    }

    return this;
  },

  _getButtons(from, to, selected, hours) {
    let result = [];
    for (let i = from; i <= to; i++) {
      result.push(<UU5.Bricks.Button colorSchema={selected === i ? null : 'default'} className={this.getClassName("button")} bgStyle={selected === i ? 'filled' : 'transparent'} content={UU5.Common.Tools.rjust(i, 2, '0')} key={i} onClick={(component, e) => this._setTime(i, hours, e)} />);
    }
    return result;
  },

  _getHours() {
    return this._isFormat12() ? this._getButtons(1, 12, this.state.hours, true) : this._getButtons(0, 23, this.state.hours, true);
  },

  _getMinutes() {
    return this._getButtons(0, 59, this.state.minutes);
  },

  _scrollUp(id) {
    let element = document.getElementById(id);
    let scrollTop = element.scrollTop;
    element.scrollTop = scrollTop - 32;
    return this;
  },

  _scrollDown(id) {
    let element = document.getElementById(id);
    let scrollTop = element.scrollTop;
    element.scrollTop = scrollTop + 32;
    return this;
  },

  _increaseStart(id) {
    this._increaseTimeout = setTimeout(() => {
      this._increaseTimer = UU5.Environment.TimeManager.setInterval(() => this._scrollUp(id), 100);
    }, 300);
  },

  _increaseEnd() {
    this._increaseTimeout && clearTimeout(this._increaseTimeout);
    this._increaseTimer && UU5.Environment.TimeManager.clearInterval(this._increaseTimer);
  },

  _decreaseStart(id) {
    this._decreaseTimeout = setTimeout(() => {
      this._decreaseTimer = UU5.Environment.TimeManager.setInterval(() => this._scrollDown(id), 100);
    }, 300);
  },

  _decreaseEnd() {
    this._decreaseTimeout && clearTimeout(this._decreaseTimeout);
    this._decreaseTimer && UU5.Environment.TimeManager.clearInterval(this._decreaseTimer);
  },

  _switchDayPart(e) {
    this._buttonSwitch.toggle(() => {
      this.setState(state => {
        let pm = !state.pm;
        let value = {
          hours: state.hours,
          minutes: state.minutes
        };

        if (typeof this.props.onChange === 'function') {
          this._addDayPart(value, pm);

          this.props.onChange({
            value: value,
            event: e,
            component: this
          });
        } else {
          value.pm = pm;
          this.setState(value);
        }
      });
    });
    return this;
  },

  // Render
  render() {
    let idHours = this.getId() + '-hoursPickerWrapper';
    let idMinutes = this.getId() + '-minutesPickerWrapper';
    return <div {...this.getMainAttrs()}>
        <div className={this.getClassName("hoursWrapper")}>
          <UU5.Bricks.Button colorSchema="custom" className={this.getClassName("nav")} onClick={() => this._scrollUp(idHours)} mainAttrs={{
          onMouseDown: () => this._increaseStart(idHours),
          onMouseUp: () => this._increaseEnd(idHours),
          onMouseOut: () => this._increaseEnd(idHours)
        }}>
            <UU5.Bricks.Icon icon={this.getDefault("upIcon")} />
          </UU5.Bricks.Button>
          <div className={this.getClassName("hoursPickerWrapper")} id={idHours}>
            <div className={this.getClassName("hours")}>
              {this._getHours()}
            </div>
          </div>
          <UU5.Bricks.Button colorSchema="custom" className={this.getClassName("nav")} onClick={() => this._scrollDown(idHours)} mainAttrs={{
          onMouseDown: () => this._decreaseStart(idHours),
          onMouseUp: () => this._decreaseEnd(idHours),
          onMouseOut: () => this._decreaseEnd(idHours)
        }}>
            <UU5.Bricks.Icon icon={this.getDefault("downIcon")} />
          </UU5.Bricks.Button>
        </div>

        <div className={this.getClassName("minutesWrapper")}>
          <UU5.Bricks.Button colorSchema="custom" className={this.getClassName("nav")} onClick={() => this._scrollUp(idMinutes)} mainAttrs={{
          onMouseDown: () => this._increaseStart(idMinutes),
          onMouseUp: () => this._increaseEnd(idMinutes),
          onMouseOut: () => this._increaseEnd(idMinutes)
        }}>
            <UU5.Bricks.Icon icon={this.getDefault("upIcon")} />
          </UU5.Bricks.Button>
          <div className={this.getClassName("minutesPickerWrapper")} id={idMinutes}>
            <div className={this.getClassName("minutes")}>
              {this._getMinutes()}
            </div>
          </div>
          <UU5.Bricks.Button colorSchema="custom" className={this.getClassName("nav")} onClick={() => this._scrollDown(idMinutes)} mainAttrs={{
          onMouseDown: () => this._decreaseStart(idMinutes),
          onMouseUp: () => this._decreaseEnd(idMinutes),
          onMouseOut: () => this._decreaseEnd(idMinutes)
        }}>
            <UU5.Bricks.Icon icon={this.getDefault("downIcon")} />
          </UU5.Bricks.Button>
        </div>
        {this._isFormat12() && <div className={this.getClassName("timePart")}>
            <span className={this.state.pm ? this.getClassName("am") : this.getClassName("amSelected")}>AM</span>
            <UU5.Bricks.ButtonSwitch className={this.getClassName("timePartSwitch")} ref_={buttonSwitch => this._buttonSwitch = buttonSwitch} props={{
          onClick: () => this._switchDayPart(),
          content: <UU5.Bricks.Icon icon={this.state.pm ? "mdi-chevron-right" : "mdi-chevron-left"} className={"uu5-common-text " + (this.state.pm ? this.getClassName("iconPm") : this.getClassName("iconAm"))} />
        }} />
            <span className={this.state.pm ? this.getClassName("pmSelected") : this.getClassName("pm")}>PM</span>
          </div>}
      </div>;
  }
});

export default Time;