"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Err = require("../error/Error.js");
var Uri = require("./Uri.js");
var UriParser = require("./UriParser.js");

/**
 * Creates an instance of UriBuilder.
 * 
 * @class UuApp.Uri.UriBuilder
 * @classdesc
 * Class for building uuUri. Typical usage:
 *     
 *     // starting from current location
 *     var uriBuilder = UriBuilder.parse(location.protocol + "//" + location.host + location.pathname);
 *     var uri1 = uriBuilder.setUseCase("sys/init").setParameters({ p1: "v1" }).toUri();
 *     console.log(uri1.toString()); // <gateway>/<product>/<workspace>/sys/init?p1=v1
 *     
 *     // starting anew, using gateway from main HTML page location
 *     var gateway = location.origin || (location.protocol + "//" + location.host);
 *     var uri2 = UriBuilder.set({
 *       gateway: gateway,
 *       product: "uu-demoapp-main",
 *       workspace: "tid123-awid456",
 *       parameters: { p1: "v1", p2: "v2" }
 *     }).toUri(); // <gatewayFromMainPage>/uu-demoapp-main/tid123-awid456?p1=v1&p2=v2
 *     
 *     // parameters example
 *     var uriBuilder = UriBuilder.parse(uri2);
 *     var uri3 = uriBuilder.deleteParameter("p1").mergeParameters({ p3: "v3" }).toUri();
 *     console.log(uri3.toString()); // <gatewayFromMainPage>/uu-demoapp-main/tid123-awid456?p2=v2&p3=v3
 *
 * @see {@link UuApp.Uri.UriBuilder.parse UriBuilder.parse}
 * @see {@link UuApp.Uri.UriBuilder.set UriBuilder.set}
 * @see {@link UuApp.Uri.UriBuilder#toUri UriBuilder#toUri}
 */

function UriBuilder() {
  var _this = this;

  var self = this;
  if (!(self instanceof UriBuilder)) return new (UriBuilder.bind.apply(UriBuilder, arguments))(); // make an instance even if developer forgot to use "new" keyword

  // define properties (setters have validation)
  var priv = { parameters: {} };
  /** @name UuApp.Uri.UriBuilder#scheme */
  /** @name UuApp.Uri.UriBuilder#hostname */
  /** @name UuApp.Uri.UriBuilder#vendor */
  /** @name UuApp.Uri.UriBuilder#app */
  /** @name UuApp.Uri.UriBuilder#subApp */
  /** @name UuApp.Uri.UriBuilder#spp */
  /** @name UuApp.Uri.UriBuilder#tid */
  /** @name UuApp.Uri.UriBuilder#awid */
  /** @name UuApp.Uri.UriBuilder#useCase */
  ["scheme", "hostname", "vendor", "app", "subApp", "spp", "tid", "awid", "useCase"].forEach(function (attr) {
    var validateFn = UriParser["validate" + attr.replace(/^./, function (m) {
      return m.toUpperCase();
    })];
    Object.defineProperty(_this, attr, {
      get: function get() {
        return priv[attr];
      },
      set: function set(value) {
        if (value != null) validateFn(value);
        priv[attr] = value != null ? value : null;
      }
    });
  });
  Object.defineProperties(this, {
    /** @name UuApp.Uri.UriBuilder#port */
    port: {
      get: function get() {
        return priv.port != null ? Number(priv.port) : priv.port;
      }, // convert to number
      set: function set(value) {
        if (value != null) UriParser.validatePort(value);
        priv.port = value != null ? value : null;
      }
    },
    /** @name UuApp.Uri.UriBuilder#gateway */
    gateway: {
      get: function get() {
        return UriBuilder.formatGateway(priv.scheme, priv.hostname, priv.port);
      },
      set: function set(value) {
        var obj = value != null ? UriParser.parseGateway(value) : null;
        priv.scheme = obj && obj.scheme || null;
        priv.hostname = obj && obj.hostname || null;
        priv.port = obj && obj.port != null ? obj.port : null;
      }
    },
    /** @name UuApp.Uri.UriBuilder#product */
    product: {
      get: function get() {
        return UriBuilder.formatProduct(priv.vendor, priv.app, priv.subApp, priv.spp);
      },
      set: function set(value) {
        var obj = value ? UriParser.parseProduct(value) : {};
        priv.vendor = obj.vendor || null;
        priv.app = obj.app || null;
        priv.subApp = obj.subApp || null;
        priv.spp = obj.spp || null;
      }
    },
    /** @name UuApp.Uri.UriBuilder#workspace */
    workspace: {
      get: function get() {
        return UriBuilder.formatWorkspace(priv.tid, priv.awid);
      },
      set: function set(value) {
        var obj = value ? UriParser.parseWorkspace(value) : {};
        priv.tid = obj.tid || null;
        priv.awid = obj.awid || null;
      }
    },
    /**
     * Map containing query parameters. If there're no parameters, empty map is returned (not a null).
     * Note that each access returns new copy of the map (to prevent modification of the map without
     * validating the values / keys).
     * 
     *     // BAD (uri.parameters returns copy; modification is not propagated back to UriBuilder)
     *     uriBuilder.parameters["myParam"] = "value";
     *     
     *     // GOOD
     *     uriBuilder.setParameter("myParam", "value");
     * 
     * @name UuApp.Uri.UriBuilder#parameters
     */
    parameters: {
      get: function get() {
        return Object.assign({}, priv.parameters);
      },
      set: function set(value) {
        priv.parameters = {};
        if (value) for (var k in value) {
          this.setParameter(k, value[k]);
        }
      }
    }
  });

  /**
   * Sets query parameter with given name to given value.
   * 
   * @param {string} name The parameter name.
   * @param {string} value The parameter value.
   * @return This UriBuilder instance for chaining operations.
   * @method UuApp.Uri.UriBuilder#setParameter
   */
  this.setParameter = function (name, value) {
    UriParser.validateParameterName(name);
    UriParser.validateParameterValue(value);
    priv.parameters[name] = value;
    return this;
  };

  /**
   * Removes query parameter with given name.
   * 
   * @param {string} name The parameter name.
   * @return This UriBuilder instance for chaining operations.
   * @method UuApp.Uri.UriBuilder#deleteParameter
   */
  this.deleteParameter = function (name) {
    UriParser.validateParameterName(name);
    delete priv.parameters[name];
    return this;
  };

  /**
   * Removes all query parameters.
   * 
   * @return This UriBuilder instance for chaining operations.
   * @method UuApp.Uri.UriBuilder#clearParameters
   */
  this.clearParameters = function () {
    priv.parameters = {};
    return this;
  };
}

/**
 * Parses URI string (or Uri instance) and resets all fields of this UriBuilder
 * to parsed values.
 * 
 * @param {(string|UuApp.Uri.Uri)} uri URI to parse.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#parse
 */
UriBuilder.prototype.parse = function (uriObj) {
  var uri = typeof uriObj == "string" ? UriParser.parse(uriObj, UriBuilder).toUri() : uriObj;
  this.gateway = uri.gateway;
  this.product = uri.product;
  this.workspace = uri.workspace;
  this.useCase = uri.useCase;
  this.parameters = uri.parameters;
  return this;
};

/**
 * Equivalent to <code>new UriBuilder().parse(uri)</code>.
 * 
 * @param {(string|UuApp.Uri.Uri)} uri URI to parse.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.parse
 * @see UuApp.Uri.UriBuilder#parse
 */
UriBuilder.parse = function (uri) {
  return new UriBuilder().parse(uri);
};

/**
 * Sets fields of this UriBuilder to given values.
 * 
 * @param {...Object} fieldMap Object(s) containing fields to set to this UriBuilder. If more objects are given,
 *   fields in latter ones override fields in former ones.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#set
 * @example
 *   // replace spp, awid & remove useCase
 *   var resUri = UriBuilder.parse(someUri).set({
 *     spp: "async",
 *     awid: "12345",
 *     useCase: null
 *   }).toUri();
 *   
 *   // multiple settings
 *   var defaults = { gateway: "...", product: "uu-demoapp-main", tid: "0", awid: "0" };
 *   var resUri = UriBuilder.set(defaults, {
 *     tid: "12f34", // overrides the one from "defaults" variable
 *     useCase: "getData"
 *   }).toUri();
 */
UriBuilder.prototype.set = function () /* ... */{
  for (var i = 0; i < arguments.length; ++i) {
    var hash = arguments[i];
    if (!hash) continue;
    if ((typeof hash === "undefined" ? "undefined" : _typeof(hash)) != "object") continue;
    for (var k in hash) {
      this[k] = hash[k];
    }
  }
  return this;
};

/**
 * Equivalent to <code>new UriBuilder().set(...)</code>.
 * 
 * @param {...Object} fieldMap Object(s) containing fields to set to the UriBuilder. If more objects are given,
 *   fields in latter ones override fields in former ones.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.set
 * @see UuApp.Uri.UriBuilder#set
 */
UriBuilder.set = function () /* ... */{
  var builder = new UriBuilder();
  return builder.set.apply(builder, arguments);
};

// add chainable setter functions
/**
 * Equivalent to <code>new UriBuilder().setScheme(value)</code>.
 * 
 * @param {string} value Scheme to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setScheme
 * @see UuApp.Uri.UriBuilder#setScheme
 */
/**
 * Chainable setter for scheme.
 * 
 * @param {string} value Scheme to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setScheme
 */
/**
 * Equivalent to <code>new UriBuilder().setHostname(value)</code>.
 * 
 * @param {string} value Hostname to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setHostname
 * @see UuApp.Uri.UriBuilder#setHostname
 */
/**
 * Chainable setter for hostname.
 * 
 * @param {string} value Hostname to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setHostname
 */
/**
 * Equivalent to <code>new UriBuilder().setPort(value)</code>.
 * 
 * @param {(string|number)} value Port to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setPort
 * @see UuApp.Uri.UriBuilder#setPort
 */
/**
 * Chainable setter for port.
 * 
 * @param {string} value Port to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setPort
 */
/**
 * Equivalent to <code>new UriBuilder().setGateway(value)</code>.
 * 
 * @param {string} value Gateway to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setGateway
 * @see UuApp.Uri.UriBuilder#setGateway
 */
/**
 * Chainable setter for gateway.
 * 
 * @param {string} value Gateway to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setGateway
 */

/**
 * Equivalent to <code>new UriBuilder().setVendor(value)</code>.
 * 
 * @param {string} value Vendor to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setVendor
 * @see UuApp.Uri.UriBuilder#setVendor
 */
/**
 * Chainable setter for vendor.
 * 
 * @param {string} value Vendor to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setVendor
 */
/**
 * Equivalent to <code>new UriBuilder().setApp(value)</code>.
 * 
 * @param {string} value Application to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setApp
 * @see UuApp.Uri.UriBuilder#setApp
 */
/**
 * Chainable setter for application.
 * 
 * @param {string} value Application to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setApp
 */
/**
 * Equivalent to <code>new UriBuilder().setSubApp(value)</code>.
 * 
 * @param {string} value Sub-application to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setSubApp
 * @see UuApp.Uri.UriBuilder#setSubApp
 */
/**
 * Chainable setter for sub-application.
 * 
 * @param {string} value Sub-application to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setSubApp
 */
/**
 * Equivalent to <code>new UriBuilder().setSpp(value)</code>.
 * 
 * @param {string} value SPP to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setSpp
 * @see UuApp.Uri.UriBuilder#setSpp
 */
/**
 * Chainable setter for SPP.
 * 
 * @param {string} value SPP to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setSpp
 */
/**
 * Equivalent to <code>new UriBuilder().setProduct(value)</code>.
 * 
 * @param {string} value Product to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setProduct
 * @see UuApp.Uri.UriBuilder#setProduct
 */
/**
 * Chainable setter for product.
 * 
 * @param {string} value Product to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setProduct
 */

/**
 * Equivalent to <code>new UriBuilder().setTid(value)</code>.
 * 
 * @param {string} value Tenant ID to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setTid
 * @see UuApp.Uri.UriBuilder#setTid
 */
/**
 * Chainable setter for tenant ID.
 * 
 * @param {string} value Tenant ID to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setTid
 */
/**
 * Equivalent to <code>new UriBuilder().setAwid(value)</code>.
 * 
 * @param {string} value Workspace ID to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setAwid
 * @see UuApp.Uri.UriBuilder#setAwid
 */
/**
 * Chainable setter for workspace ID.
 * 
 * @param {string} value Workspace ID to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setAwid
 */
/**
 * Equivalent to <code>new UriBuilder().setWorkspace(value)</code>.
 * 
 * @param {string} value Workspace to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setWorkspace
 * @see UuApp.Uri.UriBuilder#setWorkspace
 */
/**
 * Chainable setter for workspace.
 * 
 * @param {string} value Workspace to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setWorkspace
 */

/**
 * Equivalent to <code>new UriBuilder().setUseCase(value)</code>.
 * 
 * @param {string} value Use case to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setUseCase
 * @see UuApp.Uri.UriBuilder#setUseCase
 */
/**
 * Chainable setter for use case.
 * 
 * @param {string} value Use case to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setUseCase
 */
/**
 * Equivalent to <code>new UriBuilder().setParameters(value)</code>.
 * 
 * @param {string} value Parameters to set.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setParameters
 * @see UuApp.Uri.UriBuilder#setParameters
 */
/**
 * Chainable setter for parameters (replaces all parameters).
 * 
 * @param {string} value Parameters to set.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#setParameters
 */
["scheme", "hostname", "port", "gateway", "vendor", "app", "subApp", "spp", "product", "tid", "awid", "workspace", "useCase", "parameters"].forEach(function (attr) {
  var setterFnName = "set" + attr.replace(/^./, function (m) {
    return m.toUpperCase();
  });
  UriBuilder.prototype[setterFnName] = function (value) {
    // "instance" method
    this[attr] = value;
    return this;
  };
  UriBuilder[setterFnName] = function (value) {
    // "static" method
    return new UriBuilder()[setterFnName](value);
  };
});
/**
 * Equivalent to <code>new UriBuilder().setParameter(name, value)</code>.
 * 
 * @param {string} name The parameter name.
 * @param {string} value The parameter value.
 * @return New UriBuilder instance.
 * @method UuApp.Uri.UriBuilder.setParameter
 * @see UuApp.Uri.UriBuilder#setParameter
 */
UriBuilder.setParameter = function (name, value) {
  return new UriBuilder().setParameter(name, value);
};

/**
 * Merges (replaces / adds) provided parameters into the ones already present
 * in this UriBuilder.
 * 
 * @param {Object} map Map with parameters to merge.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#mergeParameters
 */
UriBuilder.prototype.mergeParameters = function (value) {
  if (value) for (var k in value) {
    this.setParameter(k, value[k]);
  }return this;
};

/**
 * Replaces current path with specified absolute path (or adds a relative path to the current path) for this UriBuilder.
 * Works exactly the same way as {@link UuApp.Uri.Uri#join Uri#join} but returns UriBuilder instead of Uri.
 * 
 * @param {...string} path Absolute or relative paths to replace / add.
 * @return This UriBuilder instance.
 * @method UuApp.Uri.UriBuilder#join
 * @see UuApp.Uri.Uri#join
 * @example
 *  // replace path with an absolute path
 *  var srcUri = "https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1";
 *  var uriBuilder = UriBuilder.parse(srcUri);
 *  uriBuilder.join("/vendor2-app2/tid2-awid2"); // https://uuos9.plus4u.net/vendor2-app2/tid2-awid2
 *  
 *  // add relative paths
 *  var uriBuilder = UriBuilder.parse(srcUri);
 *  uriBuilder.join("./sys/init?p=v");         // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/sys/init
 *  var uriBuilder = UriBuilder.parse(srcUri);
 *  uriBuilder.join("+/sys/init?p=v");         // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1/sys/init
 */
UriBuilder.prototype.join = function () /* ... */{
  var uri = this.toUri();
  return this.parse(uri.join.apply(uri, arguments));
};

var uriPriv = Uri.priv;
// delete Uri.priv;
/**
 * Returns Uri instance from current values of this UriBuilder.
 * 
 * @return {UuApp.Uri.Uri} Uri instance from current values of this UriBuilder.
 * @method UuApp.Uri.UriBuilder#toUri
 */
UriBuilder.prototype.toUri = function () {
  var missing = [];
  if (this.scheme == null && (this.hostname != null || this.port != null)) missing.push("scheme");
  if (this.hostname == null && (this.scheme != null || this.port != null)) missing.push("hostname");
  if (this.vendor == null && (this.subApp != null || this.spp != null)) missing.push("vendor");
  if (this.app == null) missing.push("app");
  if (this.subApp == null && this.spp != null) missing.push("subApp");
  if (this.awid == null) missing.push("awid");
  if (missing.length) throw new Err("Missing Uri parts: " + missing.join(", ") + ". Values: " + this.toString());

  uriPriv.allowNew = true;
  try {
    return new Uri(this.scheme, this.hostname, this.port, this.vendor, this.app, this.subApp, this.spp, this.tid, this.awid, this.useCase, this.parameters);
  } finally {
    uriPriv.allowNew = false;
  }
};

/**
 * Formats current values of this UriBuilder into a URI-like string.
 * 
 * @return {string} Formatted string from current values of this UriBuilder.
 * @method UuApp.Uri.UriBuilder#toString
 * @example
 *   var uriBuilder = UriBuilder.parse("https://uuos9.plus4u.net/vendor-app/tid-awid");
 *   uriBuilder.toString(); // https://uuos9.plus4u.net/vendor-app/tid-awid
 */
UriBuilder.prototype.toString = function () {
  return UriBuilder.format(this.toUri());
};

/**
 * Formats current values of this UriBuilder into a URI-like string.
 * 
 * @return {string} Formatted string from current values of this UriBuilder.
 * @method UuApp.Uri.UriBuilder#format
 * @example
 *   var uriBuilder = UriBuilder.parse("https://uuos9.plus4u.net/vendor-app/tid-awid");
 *   uriBuilder.format(); // https://uuos9.plus4u.net/vendor-app/tid-awid
 */
UriBuilder.prototype.format = function () {
  return UriBuilder.format(this.toUri());
};

UriBuilder.format = function (uri) {
  return UriParser.format(uri);
};

UriBuilder.formatGateway = function (scheme, hostname, port) {
  return UriParser.formatGateway(scheme, hostname, port);
};
UriBuilder.formatProduct = function (vendor, app, subApp, spp) {
  return UriParser.formatProduct(vendor, app, subApp, spp);
};
UriBuilder.formatWorkspace = function (tid, awid) {
  return UriParser.formatWorkspace(tid, awid);
};

Uri.prototype.Builder = UriBuilder;

module.exports = UriBuilder;