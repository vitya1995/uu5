"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Error = require("../error/Error.js");

/**
 * Initializes new configuration object from provided key-value map, URL or from another Promise resolving
 * to one of those.
 * 
 * @class UuApp.Util.Config
 * @classdesc
 * "Global" configuration for components such as Client, Logger, ... The configuration
 * is a flat map containing data such as addresses to gateways, logging configuration and others and
 * is typically configured somewhere on server-side. The global configuration is automatically initialized from
 * global **UU5.Environment** variable, if it exists (otherwise it can be initialized by using
 * {@link UuApp.Util.Config.init Config.init} method, e.g.:
 * 
 *     // initialize configuration from URL
 *     UuApp.Util.Config.init("/vendor-app/0-0/getClientConfig");
 * 
 *     // alternatively, configuration can be initialized directly
 *     UuApp.Util.Config.init({
 *       "gatewayUri": "https://uuappg01.plus4u.net",
 *       "logLevel": "DEBUG"
 *     });
 *
 * Note that the intialization via URL is an asynchronous operation, so components will wait until
 * it's downloaded.
 *      
 * Each component describes its own **supported configuration options** in its class description.
 * 
 * @param {(string|Object|Promise)} envOrUrl URL from which to download the key-value map
 *   (using GET method, expecting application/json data). Alternatively, it can be the key-value
 *   map directly or a Promise resolving to it. 
 * @return {Promise} Promise resolved to this instance of Config. Promise is resolved after the key-value map
 *                   is loaded from given URL, or after given Promise is resolved, or immediately if key-value
 *                   map was given directly).
 * @example
 *     // initialize custom configuration from server
 *     var myEnv = new UuApp.Util.Config("/vendor-app/0-0/getClientConfig");
 *     myEnv.initPromise.then(function (env) { // env === myEnv
 *       console.log("'myEnv' is ready. Values:", env.get());
 *       var client = new UuApp.AppClient.Client(env.get()); // pass configuration to UuApp.AppClient.Client (gatewayUri, ...)
 *     });
 *     
 *     // initialize custom configuration with directly specified configuration
 *     var myEnv2 = new UuApp.Util.Config({
 *       "logLevel": "DEBUG"
 *     });
 *     console.log("'myEnv2' is ready. Values:", myEnv2.get());
 * 
 *     // use configuration from the result of another promise
 *     var somePromise = ...; // resolves to key-value map
 *     var myEnv3 = new UuApp.Util.Config(somePromise);
 *     myEnv3.then(function (env) { ... }); // env === myEnv3
 */
function Config(envOrUrl) {
  this._env = {};

  // initialize (but only if not instructed to skip it which is used so that globalConfig can be initialized on-demand)
  if (envOrUrl !== false) initInstance.apply(this, arguments);
}

Config.prototype.initInvoked = false;
/**
 * Whether the configuration has finished loading. For configuration that was
 * initialized by providing key-value map directly, it'll be true from the start.
 * 
 * @type {boolean}
 * @name UuApp.Util.Config#initComplete
 */
Config.prototype.initComplete = false;
/**
 * Promise resolved when configuration has finished loading.
 * 
 * @type {Promise}
 * @name UuApp.Util.Config#initPromise
 */
Config.prototype.initPromise = null;
/**
  * URL from which the configuration has been loaded, or null if it wasn't loaded
  * via URL.
  * 
  * @type {string}
  * @name UuApp.Util.Config#initUrl
  */
Config.prototype.initUrl = null;

/**
 * Returns value of the specified configuration setting. If no name is given,
 * map with all settings is returned.
 * 
 * @param {string} name The setting whose value to return. If not given,
 *   map with all settings is returned.
 * @param {boolean} [recursive=true] Whether to lookup the setting recursively. For example
 *   retrieving value for name "A.B.C.logLevel" would try "A.B.C.logLevel" first,
 *   then "A.B.logLevel", then "A.logLevel" and finally "logLevel".
 * @method UuApp.Util.Config#get
 */
Config.prototype.get = function (name, recursive) {
  if (arguments.length == 0) return this._env;
  if (recursive === false) return this._env[name];
  var parts = name.split(/\./);
  while (parts.length > 1) {
    var v = this._env[parts.join(".")];
    if (v != null) return v;
    parts.splice(parts.length - 2, 1);
  }
  return this._env[parts[0]];
};

// create default (global) configuration instance but don't initialize it - consumer of the library
// must do it via Config.init()
var globalConfig = new Config(false);

/**
 * Initializes default (global) configuration from given URL or by given key-value map.
 * The method accepts the same arguments as the {@link UuApp.Util.Config Config(...)} constructor.
 * 
 * Note that components such as UuApp.AppClient.Client will automatically wait until default configuration
 * is loaded (if .init has been invoked prior to their usage).
 * 
 * @return Promise ({@link UuApp.Util.Config#initPromise Config#initPromise) resolved to the loaded key-value map.
 * @method UuApp.Util.Config.init
 * @example
 *     // initialize default (global) configuration from server
 *     UuApp.Util.Config.init("/vendor-app/0-0/getClientConfig").then(function (env) {
 *       console.log("Components have been configured using environment", env.get());
 *     });
 *     
 *     // initialize default (global) configuration with directly specified data
 *     UuApp.Util.Config.init({
 *       "logLevel": "DEBUG"
 *     });
 */
Config.init = function (envOrUrl) {
  initInstance.apply(globalConfig, Array.prototype.slice.call(arguments));
  initInvokedPromiseResolve();
  globalConfig.initPromise.then(initCompletePromiseResolve, initCompletePromiseReject);
  return globalConfig.initPromise;
};

Object.defineProperties(Config, {
  /**
   * Whether the *global* configuration has started loading.
   * 
   * @type {boolean}
   * @name UuApp.Util.Config.initInvoked
   */
  initInvoked: { get: function get() {
      return globalConfig.initInvoked;
    } },
  /**
   * Whether the *global* configuration has finished loading.
   * 
   * @type {boolean}
   * @name UuApp.Util.Config.initComplete
   */
  initComplete: { get: function get() {
      return globalConfig.initComplete;
    } },
  /**
   * Promise resolved when *global* configuration has finished loading. Note that
   * the field is null prior to Config.init call.
   * 
   * @type {Promise}
   * @name UuApp.Util.Config.initPromise
   */
  initPromise: { get: function get() {
      return globalConfig.initPromise;
    } },
  /**
   * URL from which the configuration has been loaded, or null if it wasn't loaded
   * via URL.
   * 
   * @type {string}
   * @name UuApp.Util.Config.initUrl
   */
  initUrl: { get: function get() {
      return globalConfig.initUrl;
    } }
});

// promise (always non-null) which resolves after Config.init is completed
// (if it never gets called, the promise won't get resolved)
var initCompletePromiseResolve;
var initCompletePromiseReject;
Config.initCompletePromise = new Promise(function (rs, rj) {
  return initCompletePromiseResolve = rs, initCompletePromiseReject = rj;
});

// promise (always non-null) which resolves after Config.init is called,
// even if it wasn't completed yet (if it never gets called, the promise won't get resolved)
var initInvokedPromiseResolve;
var initInvokedPromiseReject;
Config.initInvokedPromise = new Promise(function (rs, rj) {
  return initInvokedPromiseResolve = rs, initInvokedPromiseReject = rj;
});

/**
 * Returns value of the specified setting from *global* configuration. If no name is given,
 * map with all settings is returned.
 * 
 * @param {string} name The setting whose value to return. If not given,
 *   map with all settings is returned.
 * @param {boolean} [recursive=true] Whether to lookup the setting recursively. For example
 *   retrieving value for name "A.B.C.logLevel" would try "A.B.C.logLevel" first,
 *   then "A.B.logLevel", then "A.logLevel" and finally "logLevel".
 * @see UuApp.Util.Config#get
 * @method UuApp.Util.Config.get
 */
Config.get = function () {
  return globalConfig.get.apply(globalConfig, arguments);
};

function initInstance(options) {
  if (this.initInvoked) throw new Error("UuApp.Util.Config can be initialized only once (#init method). " + "If a private / separate environment is needed, use new UuApp.Util.Config().");
  this.initInvoked = true;

  // load environment (sync / async)
  var loadResult;
  if (typeof options == "string") {
    this.initUrl = arguments[0];
    loadResult = load.apply(this, arguments); // it's a URL
  } else if (options != null && typeof options.then === "function") loadResult = { promise: Promise.resolve(options) }; // it's a Promise
  else if (options == null || (typeof options === "undefined" ? "undefined" : _typeof(options)) == "object" || typeof options == "function") loadResult = { immediateResult: options }; // it's a direct value
    else throw new Error("UuApp.Util.Config can be initialized only with object-like structure, but typeof says '" + (typeof options === "undefined" ? "undefined" : _typeof(options)) + "'. Initialized with: " + JSON.stringify(options));

  // process load result
  if (loadResult.immediateResult) {
    this._env = loadResult.immediateResult;
    this.initComplete = true;
    this.initPromise = Promise.resolve(this);
  } else {
    this.initPromise = loadResult.promise.then(function (env) {
      this._env = env;
      this.initComplete = true;
      return this;
    }.bind(this)); // in case of error just propagate it (no error handler here) - we don't want to call services against wrong domains (config contains gateway URIs, ...) 
  }

  return this.initPromise;
}

function load(url, options) {
  var result;
  var p = new Promise(function (resolve, reject) {
    if (!url) return resolve({});
    var opts = options || {};

    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, opts.sync !== true);
    xhr.setRequestHeader("Accept", "application/json");
    xhr.onerror = function (e) {
      return reject(new Error("Unable to load environment configuration from " + url + " - network error."));
    };
    xhr.onload = function (e) {
      if (xhr.status >= 200 && xhr.status < 300) {
        try {
          result = (xhr.responseText ? JSON.parse(xhr.responseText) : null) || {};
          resolve(result || {});
          return;
        } catch (e) {
          reject(new Error("Unable to load environment configuration from " + url + " - not a JSON. Response:\n" + xhr.responseText));
        }
      } else {
        reject(new Error("Unable to load environment configuration from " + url + " - status " + xhr.status + ". Response:\n" + xhr.responseText));
      }
    };
    xhr.send(null);
  });
  return { immediateResult: result, promise: p };
}

// if running in browser with SystemJS loader, use UU_ENVIRONMENT module if it's configured
var inited = false;
if (typeof window != "undefined") {
  if (typeof System != "undefined" && window && System && System.has && System.get && System.normalizeSync) {
    try {
      // for backward compatibility try initialization via module named "UU_ENVIRONMENT"
      var normModule = System.normalizeSync("UU_ENVIRONMENT");
      if (System.has(normModule)) {
        // the module has been already instantiated
        var mod = System.get(normModule);
        Config.init(mod["default"] || mod);
        if (!normModule.match(/\/UU_ENVIRONMENT$/)) globalConfig.initUrl = normModule;
        inited = true;
      } else if (!normModule.match(/\/UU_ENVIRONMENT$/)) {
        // the module is not ready yet but it is defined (has configured URL to be downloaded from)
        Config.init(System.import("UU_ENVIRONMENT"));
        globalConfig.initUrl = normModule;
        inited = true;
      }
    } catch (e) {
      console.error("Failed to initialize configuration from UU_ENVIRONMENT. Error:", e);
    }
  }
  // initialize configuration from UU5.Environment variable
  if (!inited && window.UU5 && window.UU5.Environment) {
    Config.init(window.UU5.Environment);
    inited = true;
  }
}

module.exports = Config;