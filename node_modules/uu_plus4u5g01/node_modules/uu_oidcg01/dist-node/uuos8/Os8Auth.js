"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _IframeComponent = require("../ui/IframeComponent.js");

var _IframeComponent2 = _interopRequireDefault(_IframeComponent);

var _ImplicitFlow = require("../flow/ImplicitFlow.js");

var _ImplicitFlow2 = _interopRequireDefault(_ImplicitFlow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Os8Auth = function () {

  /**
   * @param options.serverUri
   * @param options.clientId
   * @param options.redirectUri
   */
  function Os8Auth(options) {
    _classCallCheck(this, Os8Auth);

    if (!options || !options.serverUri || !options.clientId || !options.redirectUri) throw new Error("Os8Auth must be initialized with options containing serverUri, clientId and redirectUri.");
    this.options = options;
  }

  /**
   * @param parameters
   * @param parameters.subject_token
   */


  _createClass(Os8Auth, [{
    key: "grantExchangeToken",
    value: function grantExchangeToken(parameters) {
      var params = parameters || {};
      if (!params.subject_token) throw new Error("Os8Auth.grantExchangeToken must be called with parameter subject_token.");
      var urlParams = Object.assign({}, params, {
        response_type: "id_token token",
        client_id: this.options.clientId,
        redirect_uri: this.options.redirectUri
      });
      var urlParamsParts = Object.keys(urlParams).filter(function (k) {
        return urlParams[k] != null;
      }).map(function (k) {
        return encodeURIComponent(k) + "=" + encodeURIComponent(urlParams[k] + "");
      });
      var url = this.options.serverUri.replace(/\/*$/, "/") + "exchangeOs8Token" + "?" + urlParamsParts.join("&");

      return new Promise(function (resolve, reject) {
        new _IframeComponent2.default({
          url: url,
          onResult: function onResult(aLoginResult) {
            var authResponse = _ImplicitFlow2.default.getAuthResponseFromCallback(aLoginResult);
            if (!authResponse || authResponse.error) reject(authResponse);else resolve(authResponse);
          }
        }).render();
      });
    }
  }]);

  return Os8Auth;
}();

exports.default = Os8Auth;