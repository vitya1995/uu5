"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _HttpClient = require("../util/HttpClient.js");

var _HttpClient2 = _interopRequireDefault(_HttpClient);

var _PromiseUtil = require("../util/PromiseUtil.js");

var _PromiseUtil2 = _interopRequireDefault(_PromiseUtil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var oidcMetadataCache = {}; // stores Promises

var Discovery = {
  /**
   * @return Promise resolving to OIDC discovery metadata for given issuerUri.
   */
  getMetadata: function getMetadata(aIssuerUri) {
    var issuerUri = aIssuerUri.replace(/\/+$/, ""); // strip trailing slash(es) (this also normalizes it as a key to cache)
    var metadata = oidcMetadataCache[issuerUri];
    if (metadata) return metadata;
    var discoveryEndpoint = Discovery.getMetadataUri(issuerUri);
    return oidcMetadataCache[issuerUri] = _PromiseUtil2.default.wrapForImmediateThen(_HttpClient2.default.get(discoveryEndpoint).catch(function (e) {
      delete oidcMetadataCache[issuerUri]; // don't cache errors so that e.g. clicking a button 2nd time (after network is up again) has chance to work
      throw e;
    }));
  },
  getMetadataUri: function getMetadataUri(aIssuerUri) {
    var issuerUri = aIssuerUri.replace(/\/+$/, ""); // strip trailing slash(es) (this also normalizes it as a key to cache)
    return issuerUri + "/.well-known/openid-configuration";
  }
};

exports.default = Discovery;