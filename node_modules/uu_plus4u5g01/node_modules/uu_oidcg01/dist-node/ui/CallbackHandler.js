"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// login callback handling
var VC_CALLBACK_FN_NAME = "uuOidcCallbackFn"; // !!! Must be in sync with the one in callbacks/oidc-callback.html.

// make sure that callback works correctly even if multiple invocations using visual component below were
// done (e.g. user clicked 2 different buttons for command invocations which each opened a login popup
// and are now displayed both)
if (typeof window != "undefined" && !window[VC_CALLBACK_FN_NAME]) {
  window[VC_CALLBACK_FN_NAME] = function (aLoginResult, aSourceWindow) {
    var loginWindows = window[VC_CALLBACK_FN_NAME].loginWindows;
    // received callback from a popup => find out which component is using the source window and notify it
    for (var i = 0; i < loginWindows.length; ++i) {
      var p = loginWindows[i];
      if (p.state.loginWindow == aSourceWindow) {
        p.component.finalize(aLoginResult);
        return;
      }
    }
    console.warn("Received unexpected callback from window", aSourceWindow, "Passed result was:", aLoginResult, "Ignoring the callback.");
  };
  window[VC_CALLBACK_FN_NAME].loginWindows = [];
}

exports.default = {
  registerForCallback: function registerForCallback(component, state) {
    window[VC_CALLBACK_FN_NAME].loginWindows.push({ component: component, state: state });
  },
  unregisterForCallback: function unregisterForCallback(component) {
    var loginWindows = window[VC_CALLBACK_FN_NAME].loginWindows;
    for (var i = 0; i < loginWindows.length; ++i) {
      // remove self from opened loginWindows
      if (loginWindows[i].component === component) {
        loginWindows.splice(i, 1);
        break;
      }
    }
  }
};