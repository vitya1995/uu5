"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _LoggerFactory = require("../logging/LoggerFactory.js");

var _LoggerFactory2 = _interopRequireDefault(_LoggerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var perfLog = _LoggerFactory2.default.get("UuApp.Perflog.PerfLog", false);

var PerfLog = {
  measureSection: function measureSection(name /*, (optional) attrs, measuredFn*/) {
    var measuredFn = arguments[arguments.length - 1];
    var attrs = arguments.length > 2 ? arguments[1] : null;
    var section = new Section(createSectionId(), name, attrs);
    var r;
    try {
      r = Promise.resolve(measuredFn(section));
    } catch (e) {
      r = Promise.reject(e);
    }
    function close() {
      section.close();
    }
    return r.then(close, close);
  }
};

var Section = function Section(id, name, attrs) {
  this.id = id;
  this.name = name;
  this.attributes = attrs || {};
  this.checkpoints = {};
  this.start = Date.now();
};
Section.prototype.setCheckpoint = function (name) {
  this.checkpoints[name] = Date.now;
};
Section.prototype.close = function () {
  if (this.finish) return;
  this.finish = Date.now();
  this.duration = this.finish - this.start;
  perfLog.info(JSON.stringify(this));
};

var rootId;
function createSectionId() {
  if (!rootId) rootId = createIdSegment();
  var childId = createIdSegment();
  return rootId + "-" + rootId + "-" + childId + "-0000";
}
function createIdSegment() {
  var s = [];
  for (var i = 0; i < 4; ++i) {
    s.push((Math.random() * 65536 | 0).toString(16));
  } // 4 * 4 hexa digits
  return s.join("");
}

exports.default = PerfLog;