"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _documentManager = require("./document-manager.js");

var _documentManager2 = _interopRequireDefault(_documentManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var IconManager = exports.IconManager = function () {
  function IconManager(iconLibraries) {
    _classCallCheck(this, IconManager);

    this.iconLibraries = iconLibraries;
  }

  _createClass(IconManager, [{
    key: "addIcons",
    value: function addIcons(iconsName) {
      var iconsUrl = this.iconLibraries[iconsName];
      this.loadedIcons = this.loadedIcons || {};

      if (iconsUrl && !this.loadedIcons[iconsName]) {
        this.loadedIcons[iconsName] = true;
        _documentManager2.default.addUniqueCss(iconsUrl);
      }
    }
  }]);

  return IconManager;
}();

exports.default = IconManager;