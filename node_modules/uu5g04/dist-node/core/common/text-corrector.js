'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextCorrector = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _commonNs = require('./common-ns.js');

var _commonNs2 = _interopRequireDefault(_commonNs);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _baseMixin = require('./base-mixin');

var _baseMixin2 = _interopRequireDefault(_baseMixin);

var _elementaryMixin = require('./elementary-mixin');

var _elementaryMixin2 = _interopRequireDefault(_elementaryMixin);

var _tools = require('./tools');

var _tools2 = _interopRequireDefault(_tools);

var _environment = require('../environment/environment');

var _environment2 = _interopRequireDefault(_environment);

var _pureRenderMixin = require('./pure-render-mixin');

var _pureRenderMixin2 = _interopRequireDefault(_pureRenderMixin);

require('./text-corrector.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TextCorrector = exports.TextCorrector = (0, _createReactClass2.default)({
  displayName: 'TextCorrector',


  //@@viewOn:mixins
  mixins: [_baseMixin2.default, _elementaryMixin2.default, _pureRenderMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _commonNs2.default.name("TextCorrector"),
    classNames: {
      main: _commonNs2.default.css("text-corrector"),
      error: _commonNs2.default.css("text-corrector-error"),
      highlight: _commonNs2.default.css("text-corrector-highlight")
    },
    defaults: {
      highlightEvent: _tools2.default.events.highlight
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    text: _propTypes2.default.string,
    language: _propTypes2.default.string,
    checkSpaces: _propTypes2.default.bool,
    ignoreGrammar: _propTypes2.default.bool,
    checkHighlight: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      text: '',
      language: null,
      checkSpaces: false,
      ignoreGrammar: false,
      checkHighlight: false
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      text: this._correctSpaces(this.props.text)
    };
  },
  componentDidMount: function componentDidMount() {
    this._switchHighlight(true);
    this._correctText(this.state.text, null, true);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this._correctText(nextProps.text);
  },
  componentWillUnmount: function componentWillUnmount() {
    this._switchHighlight(false);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _correctSpaces: function _correctSpaces(text) {
    var newText = text;
    if (this.props.checkSpaces) {
      newText = this.replaceByHardSpace(text, this.props.language);
    }
    return newText;
  },
  _isValidWord: function _isValidWord(word) {
    var result = true;

    var text = /[A-Za-z]+/i.exec(word);
    if (text) {
      result = text[0].toLowerCase() !== 'vidra';
    }

    return result;
  },
  _isHighlightWord: function _isHighlightWord(word, searchedText) {
    return word.toLowerCase().indexOf(searchedText) > -1;
  },
  _checkWords: function _checkWords(text, searchedTexts) {
    var _this = this;

    var newTextChildren = [];
    var spaceTmp = [];

    var spaceSplitter = text.split(' ');
    spaceSplitter.forEach(function (word) {
      if (word.indexOf(_environment2.default.hardSpace.nbSpace) > -1) {
        var nbspSplitter = word.split(_environment2.default.hardSpace.nbSpace);
        var nbspTmp = [];

        nbspSplitter.forEach(function (word) {
          var newWord = _this._checkWord(word, searchedTexts);
          if (typeof newWord === 'string') {
            nbspTmp.push(newWord);
          } else {
            if (nbspTmp.length) {
              spaceTmp.push(nbspTmp.join(_environment2.default.hardSpace.nbSpace));
              nbspTmp = [];
            }

            if (spaceTmp.length) {
              newTextChildren.push((newTextChildren.length ? ' ' : '') + spaceTmp.join(' ') + _environment2.default.hardSpace.nbSpace);
              spaceTmp = [];
            }

            typeof newTextChildren[newTextChildren.length - 1] !== 'string' && newTextChildren.push(_environment2.default.hardSpace.nbSpace);
            newTextChildren.push(newWord);
          }
        });

        if (nbspTmp.length) {
          spaceTmp.push(nbspTmp.join(_environment2.default.hardSpace.nbSpace));
          nbspTmp = [];
        }
      } else {
        var newWord = _this._checkWord(word, searchedTexts);

        if (typeof newWord === 'string') {
          spaceTmp.push(newWord);
        } else {
          if (spaceTmp.length) {
            newTextChildren.push((newTextChildren.length ? ' ' : '') + spaceTmp.join(' ') + ' ');
            spaceTmp = [];
          }
          _typeof(newTextChildren[newTextChildren.length - 1]) === 'object' && newTextChildren.push(' ');
          newTextChildren.push(newWord);
        }
      }
    });

    if (spaceTmp.length) {
      newTextChildren.push((newTextChildren.length ? ' ' : '') + spaceTmp.join(' '));
      spaceTmp = [];
    }

    return _react2.default.Children.toArray(newTextChildren);
  },
  _checkWord: function _checkWord(word, searchedTexts) {
    var result = word;

    if (this.props.checkHighlight && searchedTexts) {
      var searchedText = this._getSearchedText(word, searchedTexts);
      if (searchedText) {
        // full word
        // result = <span className={this.getClassName().highlight}>{word}</span>;

        var startIndex = word.toLowerCase().indexOf(searchedText.toLowerCase());
        var endIndex = startIndex + searchedText.length - 1;
        var searchedPart = word.substr(startIndex, searchedText.length);
        result = [];

        var highlighter = _react2.default.createElement(
          'span',
          { className: this.getClassName().highlight },
          searchedPart
        );

        if (startIndex > 0) {
          result.push(word.substr(0, endIndex + 1 - searchedPart.length));
        }

        result.push(highlighter);

        if (endIndex < word.length - 1) {
          result.push(word.substr(endIndex + 1, word.length - endIndex - 1));
        }
      }
    }

    if (this.props.checkGrammar && !this._isValidWord(word)) {
      result = _react2.default.createElement(
        'span',
        { className: this.getClassName().error },
        Array.isArray(result) ? _react2.default.Children.toArray(result) : result
      );
    }

    return result;
  },
  _correctText: function _correctText(text, searchedTexts, isDidMount) {
    var newText = text;
    if (!isDidMount && this.props.checkSpaces) {
      newText = this._correctSpaces(text);
    }

    if (this.props.checkGrammar || this.props.checkHighlight && searchedTexts) {
      newText = this._checkWords(newText || text, searchedTexts);
    }

    if (!isDidMount || text !== newText) {
      this.setState({ text: newText, searchedTexts: searchedTexts });
    }

    return this;
  },
  _switchHighlight: function _switchHighlight(start) {
    if (this.props.checkHighlight) {
      if (start) {
        window.UU5.Environment.EventListener.registerHighlight(this.getId(), this._checkHighlight);
      } else {
        window.UU5.Environment.EventListener.unregisterHighlight(this.getId(), this._checkHighlight);
      }
    }
    return this;
  },
  _getSearchedText: function _getSearchedText(text, searchedTexts) {
    var result = null;
    text = text.toLowerCase();
    for (var i = 0; i < searchedTexts.length; i++) {
      if (text.indexOf(searchedTexts[i].toLowerCase()) > -1) {
        result = searchedTexts[i];
        break;
      }
    }
    return result;
  },
  _checkHighlight: function _checkHighlight(searchedTexts) {
    if (searchedTexts && searchedTexts.length > 0) {
      searchedTexts = Array.isArray(searchedTexts) ? searchedTexts : [searchedTexts];
    } else {
      searchedTexts = null;
    }

    if (!searchedTexts || this.state.searchedTexts || this._getSearchedText(this.props.text, searchedTexts)) {
      this._correctText(this.props.text, searchedTexts);
    }

    return this;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return _react2.default.createElement(
      'span',
      this.getMainAttrs(),
      this.state.text,
      this.getDisabledCover()
    );
  }
  //@@viewOff:render

});

exports.default = TextCorrector;