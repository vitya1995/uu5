"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeMixin = undefined;

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _environment = require("../environment/environment.js");

var _environment2 = _interopRequireDefault(_environment);

var _tools = require("./tools.js");

var _tools2 = _interopRequireDefault(_tools);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ResizeMixin = exports.ResizeMixin = {
  //@@viewOn:statics
  statics: {
    "UU5.Common.ResizeMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      defaults: {
        minResizeInterval: 100
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    resizeInterval: _propTypes2.default.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      resizeInterval: undefined
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentDidMount: function componentDidMount() {
    this._startResize();
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (this.props.resizeInterval !== prevProps.resizeInterval) {
      this._resizeMixinInterval && _environment2.default.TimeManager.clearInterval(this._resizeMixinInterval);
      this._startResize();
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this._resizeMixinInterval && _environment2.default.TimeManager.clearInterval(this._resizeMixinInterval);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonResizeMixin: function hasUU5CommonResizeMixin() {
    return this.hasMixin("UU5.Common.ResizeMixin");
  },
  getUU5CommonResizeMixinProps: function getUU5CommonResizeMixinProps() {
    return {
      resizeInterval: this.props.resizeInterval
    };
  },
  getUU5CommonResizeMixinPropsToPass: function getUU5CommonResizeMixinPropsToPass() {
    return {};
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _startResize: function _startResize() {
    var _this = this;

    this._resizeWidth = 0;

    this._resizeMixinInterval = _environment2.default.TimeManager.setInterval(function () {
      var newWidth = _tools2.default.getWidth(_this.findDOMNode());
      var oldWidth = _this._resizeWidth;

      if (oldWidth === newWidth) {
        if (_this._resizeStart) {
          _this._resizeStart = false;
          if (typeof _this.onResizeEnd_ === "function") {
            _this.onResizeEnd_(oldWidth);
          }
        }
      } else {
        _this._resizeWidth = newWidth;

        if (!_this._resizeStart) {
          _this._resizeStart = true;
          if (typeof _this.onResizeStart_ === "function") {
            _this.onResizeStart_(newWidth);
            return;
          }
        }

        // call too if onResizeStart_ is not set
        if (typeof _this.onResize_ === "function") {
          _this.onResize_(oldWidth, newWidth);
        }
      }
    }, this._getResizeInterval());
  },
  _getResizeInterval: function _getResizeInterval() {
    var interval = _environment2.default.resizeInterval;

    if (this.props.resizeInterval) {
      interval = this.props.resizeInterval;
    } else if (this.getOpt() && this.getOpt("resizeInterval")) {
      interval = this.getOpt("resizeInterval");
    }

    return Math.max(interval, this.getDefault("minResizeInterval", "UU5.Common.ResizeMixin"));
  }
  //@@viewOff:componentSpecificHelpers

};

exports.default = ResizeMixin;