'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventListener = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tools = require('./tools.js');

var _tools2 = _interopRequireDefault(_tools);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventListener = exports.EventListener = function () {
  function EventListener() {
    _classCallCheck(this, EventListener);

    this._screenSize = _tools2.default.getScreenSize();

    this._events = {};

    this._listeners = {
      screenSize: {},
      lsi: {},
      highlight: {},
      dateTime: {},
      number: {},
      loadLibs: {}
    };

    window.onresize = this._onScreenSizeChange.bind(this);
    this.addWindowEvent('orientationchange', _tools2.default.generateUUID(), this._onScreenSizeChange.bind(this));
  }

  _createClass(EventListener, [{
    key: 'registerEvent',
    value: function registerEvent(key, id, fce) {
      if (typeof fce === 'function') {
        this._listeners[key] = this._listeners[key] || {};
        this._listeners[key][id] = fce;
      } else {
        this._writeError(key, id, fce);
      }
    }
  }, {
    key: 'triggerEvent',
    value: function triggerEvent() {
      // i.e. arguments = ['lsi', 'cs-cz']
      var _arguments = Array.prototype.slice.call(arguments),
          key = _arguments[0],
          params = _arguments.slice(1);

      for (var id in this._listeners[key]) {
        this._listeners[key][id].apply(null, params);
      }
    }
  }, {
    key: 'unregisterEvent',
    value: function unregisterEvent(key, id) {
      if (this._listeners[key]) {
        delete this._listeners[key][id];
      }
    }
  }, {
    key: 'addEvent',
    value: function addEvent(object, key, id, fce) {
      var _this = this;

      if (typeof fce === 'function') {
        if (!this._events[key]) {
          this._events[key] = this._events[key] || {};
          object.addEventListener(key, function (e) {
            for (var _id in _this._events[key]) {
              _this._events[key][_id](e);
            }
          });
        }

        this._events[key][id] = fce;
      } else {
        this._writeError(key, id, fce);
      }
    }
  }, {
    key: 'removeEvent',
    value: function removeEvent(object, key, id) {
      if (this._events[key] && this._events[key][id]) {
        object.removeEventListener(key, this._events[key][id]);
        delete this._events[key][id];
      }
    }
  }, {
    key: 'createEvent',
    value: function createEvent(object, key, id, fce) {
      var _this2 = this;

      if (typeof fce === 'function') {
        if (!this._events[id] || !this._events[id][key]) {
          this._events[id] = this._events[id] || {};
          this._events[id][key] = this._events[id][key] || {};
          object.addEventListener(key, function (e) {
            return _this2._events[id][key](e);
          });
        }

        this._events[id][key] = fce;
      } else {
        this._writeError(key, id, fce);
      }
    }
  }, {
    key: 'deleteEvent',
    value: function deleteEvent(object, key, id) {
      if (this._events[id] && this._events[id][key]) {
        object.removeEventListener(key, this._events[id][key]);
        delete this._events[id][key];
      }
    }
  }, {
    key: 'addIdentityChangeListener',
    value: function addIdentityChangeListener(session, id, fce) {
      var _this3 = this;

      if (typeof fce === 'function') {
        if (!this._events['identity']) {
          this._events['identity'] = this._events['identity'] || {};
          session.addListener('identityChange', function (e) {
            for (var _id2 in _this3._events['identity']) {
              _this3._events['identity'][_id2](e);
            }
          });
        }

        this._events['identity'][id] = fce;
      } else {
        this._writeError('identity', id, fce);
      }
    }
  }, {
    key: 'removeIdentityChangeListener',
    value: function removeIdentityChangeListener(session, id) {
      if (this._events['identity'] && this._events['identity'][id]) {
        session.removeListener(this._events['identity'][id]);
        delete this._events['identity'][id];
      }
    }
  }, {
    key: 'addWindowEvent',
    value: function addWindowEvent(key, id, fce) {
      this.addEvent(window, key, id, fce);
    }
  }, {
    key: 'removeWindowEvent',
    value: function removeWindowEvent(key, id) {
      this.removeEvent(window, key, id);
    }
  }, {
    key: 'registerLsi',
    value: function registerLsi(id, fce) {
      this.registerEvent('lsi', id, fce);
    }
  }, {
    key: 'triggerLsi',
    value: function triggerLsi(lang) {
      this.triggerEvent('lsi', lang);
    }
  }, {
    key: 'unregisterLsi',
    value: function unregisterLsi(id) {
      this.unregisterEvent('lsi', id);
    }
  }, {
    key: 'registerScreenSize',
    value: function registerScreenSize(id, fce) {
      this.registerEvent('screenSize', id, fce);
    }
  }, {
    key: 'triggerScreenSize',
    value: function triggerScreenSize(e, screenSize) {
      this.triggerEvent('screenSize', e, screenSize);
    }
  }, {
    key: 'unregisterScreenSize',
    value: function unregisterScreenSize(id) {
      this.unregisterEvent('screenSize', id);
    }
  }, {
    key: 'registerHighlight',
    value: function registerHighlight(id, fce) {
      this.registerEvent('highlight', id, fce);
    }
  }, {
    key: 'triggerHighlight',
    value: function triggerHighlight(searchedTexts) {
      this.triggerEvent('highlight', searchedTexts);
    }
  }, {
    key: 'unregisterHighlight',
    value: function unregisterHighlight(id) {
      this.unregisterEvent('highlight', id);
    }
  }, {
    key: 'registerDateTime',
    value: function registerDateTime(id, fce) {
      this.registerEvent('dateTime', id, fce);
    }
  }, {
    key: 'triggerDateTime',
    value: function triggerDateTime(opt) {
      this.triggerEvent('dateTime', opt);
    }
  }, {
    key: 'unregisterDateTime',
    value: function unregisterDateTime(id) {
      this.unregisterEvent('dateTime', id);
    }
  }, {
    key: 'registerNumber',
    value: function registerNumber(id, fce) {
      this.registerEvent('number', id, fce);
    }
  }, {
    key: 'triggerNumber',
    value: function triggerNumber(opt) {
      this.triggerEvent('number', opt);
    }
  }, {
    key: 'unregisterNumber',
    value: function unregisterNumber(id) {
      this.unregisterEvent('number', id);
    }
  }, {
    key: 'registerLoadLibs',
    value: function registerLoadLibs(id, fce) {
      this.registerEvent('loadLibs', id, fce);
    }
  }, {
    key: 'triggerLoadLibs',
    value: function triggerLoadLibs(markers) {
      this.triggerEvent('loadLibs', markers);
    }
  }, {
    key: 'unregisterLoadLibs',
    value: function unregisterLoadLibs(id) {
      this.unregisterEvent('loadLibs', id);
    }
  }, {
    key: '_onScreenSizeChange',
    value: function _onScreenSizeChange(e) {
      var actualScreenSize = _tools2.default.getScreenSize();
      if (actualScreenSize !== this._screenSize) {
        this._screenSize = actualScreenSize;
        this.triggerScreenSize(e, actualScreenSize);
      }
    }
  }, {
    key: '_writeError',
    value: function _writeError(key, id, fce) {
      _tools2.default.error('In event "' + key + '" parameter is not function.', {
        component: 'EventListener',
        id: id,
        function: fce,
        key: key
      });
    }
  }]);

  return EventListener;
}();

exports.default = EventListener;