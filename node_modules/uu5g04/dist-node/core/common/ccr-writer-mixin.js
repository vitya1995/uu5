'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CcrWriterMixin = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

var _ccrReaderMixin = require('./ccr-reader-mixin.js');

var _ccrReaderMixin2 = _interopRequireDefault(_ccrReaderMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CcrWriterMixin = exports.CcrWriterMixin = {

  //@@viewOn:mixins
  mixins: [_ccrReaderMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    "UU5.Common.CcrWriterMixin": {
      requiredMixins: ["UU5.Common.CcrReaderMixin"],
      warnings: {
        keyNotRegistered: 'Component with key %s was not registered.'
      },
      errors: {
        alreadyRegistered: 'Component with ccr key %s is already registered.',
        unregisterNotThis: 'Component with ccr key %s is not this component, cannot be unregistered.'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    ccrKey: _propTypes2.default.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      ccrKey: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.CcrWriterMixin");
    // state
    return null;
  },

  componentWillMount: function componentWillMount() {
    this.getCcrKey() && this._registerToCcrByKey(this.getCcrKey());
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.getCcrKey(nextProps) && this.getCcrKey(nextProps) !== this.getCcrKey()) {
      this.getCcrKey() && this.isCcrRegisteredByKey(this.getCcrKey()) && this._unregisterFromCcrByKey(this.getCcrKey());
      this._registerToCcrByKey(this.getCcrKey(nextProps));
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this.getCcrKey() && this.isCcrRegisteredByKey(this.getCcrKey()) && this._unregisterFromCcrByKey(this.getCcrKey());
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonCcrWriterMixin: function hasUU5CommonCcrWriterMixin() {
    return this.hasMixin("UU5.Common.CcrWriterMixin");
  },

  getUU5CommonCcrWriterMixinProps: function getUU5CommonCcrWriterMixinProps() {
    return {
      ccrKey: this.getCcrKey()
    };
  },

  getUU5CommonCcrWriterMixinPropsToPass: function getUU5CommonCcrWriterMixinPropsToPass() {
    return {};
  },

  getCcrKey: function getCcrKey(props) {
    props = props || this.props;
    return props.ccrKey || this.getOpt('ccrKey') || null;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _registerToCcrByKey: function _registerToCcrByKey(key) {
    var component = this.getCcrByKeyRegister()[key];
    if (_environment2.default.ccrStrict && component && component !== this) {
      this.showError('alreadyRegistered', key, {
        mixinName: "UU5.Common.CcrWriterMixin",
        context: {
          registeredComponent: {
            tagName: component.getTagName(),
            id: component.getId(),
            component: component
          }
        }
      });
    }
    this.getCcrByKeyRegister()[key] = this;
    return this;
  },

  _unregisterFromCcrByKey: function _unregisterFromCcrByKey(key) {
    var component = this.getCcrByKeyRegister()[key];
    if (!component) {
      this.showWarning('keyNotRegistered', key, {
        mixinName: "UU5.Common.CcrWriterMixin"
      });
    } else if (component !== this) {
      _environment2.default.ccrStrict && this.showError('unregisterNotThis', key, {
        mixinName: "UU5.Common.CcrWriterMixin",
        context: {
          registeredComponent: {
            tagName: component.getTagName(),
            id: component.getId(),
            component: component
          }
        }
      });
    } else {
      delete this.getCcrByKeyRegister()[key];
    }
    return this;
  }
  //@@viewOff:componentSpecificHelpers
};

exports.default = CcrWriterMixin;