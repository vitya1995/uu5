'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LevelMixin = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LevelMixin = exports.LevelMixin = {

  //@@viewOn:statics
  statics: {
    "UU5.Common.LevelMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      defaults: {
        minLevel: 0,
        maxLevel: 6
      },
      warnings: {
        levelMismatch: 'Component level %s is lower than parent level %s.',
        levelMax: 'Maximum level of component is 6 but is set %d.'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    level: _propTypes2.default.oneOf(['0', '1', '2', '3', '4', '5', '6', 0, 1, 2, 3, 4, 5, 6])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      level: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.LevelMixin");
    // state
    return {
      level: this.checkLevel()
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.getLevel() !== nextProps.level && this.setState({ level: this.checkLevel() });
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonLevelMixin: function hasUU5CommonLevelMixin() {
    return this.hasMixin("UU5.Common.LevelMixin");
  },

  getLevel: function getLevel() {
    return this.state.level;
  },

  getUU5CommonLevelMixinProps: function getUU5CommonLevelMixinProps() {
    return {
      level: this.props.level
    };
  },

  getUU5CommonLevelMixinPropsToPass: function getUU5CommonLevelMixinPropsToPass() {
    return this.getUU5CommonLevelMixinProps();
  },

  shouldIncreaseLevel: function shouldIncreaseLevel(parentLevelComponent) {
    return !parentLevelComponent || parentLevelComponent && parentLevelComponent.getOpt('dummyLevel') ? false : this.getOpt('increaseLevel') || this.getHeader && this.getHeader() || this.getFooter && this.getFooter();
  },

  checkLevel: function checkLevel() {
    var level = typeof this.props.level === 'string' ? parseInt(this.props.level) : this.props.level;
    var maxLevel = this.getDefault('maxLevel', "UU5.Common.LevelMixin");
    var parentLevelComponent = this.getParentByType('hasUU5CommonLevelMixin');
    var calculatedLevel = parentLevelComponent ? parentLevelComponent.getLevel() : this.getDefault('minLevel', "UU5.Common.LevelMixin");
    this.shouldIncreaseLevel(parentLevelComponent) && calculatedLevel++;
    level = level || calculatedLevel;

    //check level hierarchy
    if (level < calculatedLevel) {
      this.showWarning('levelMismatch', [level, calculatedLevel], {
        mixinName: "UU5.Common.LevelMixin",
        context: {
          parent: {
            tagName: parentLevelComponent ? parentLevelComponent.getTagName() : null,
            component: parentLevelComponent
          }
        }
      });
    }

    //check maxLevel
    if (level > maxLevel) {
      this.showWarning('levelMax', level, {
        mixinName: "UU5.Common.LevelMixin",
        context: {
          parent: {
            tagName: parentLevelComponent && parentLevelComponent.getTagName(),
            component: parentLevelComponent
          }
        }
      });
      level = maxLevel;
    }
    return level;
  }
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

};

exports.default = LevelMixin;