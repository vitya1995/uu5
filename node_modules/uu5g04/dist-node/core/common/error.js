'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Error = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _commonNs = require('./common-ns.js');

var _commonNs2 = _interopRequireDefault(_commonNs);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

var _baseMixin = require('./base-mixin.js');

var _baseMixin2 = _interopRequireDefault(_baseMixin);

var _elementaryMixin = require('./elementary-mixin.js');

var _elementaryMixin2 = _interopRequireDefault(_elementaryMixin);

var _nestingLevelMixin = require('./nesting-level-mixin.js');

var _nestingLevelMixin2 = _interopRequireDefault(_nestingLevelMixin);

var _contentMixin = require('./content-mixin.js');

var _contentMixin2 = _interopRequireDefault(_contentMixin);

var _div = require('./div.js');

var _div2 = _interopRequireDefault(_div);

var _pureRenderMixin = require('./pure-render-mixin.js');

var _pureRenderMixin2 = _interopRequireDefault(_pureRenderMixin);

require('./error.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Error = exports.Error = (0, _createReactClass2.default)({
  displayName: 'Error',


  //@@viewOn:mixins
  mixins: [_baseMixin2.default, _elementaryMixin2.default, _nestingLevelMixin2.default, _contentMixin2.default, _pureRenderMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _commonNs2.default.name("Error"),
    nestingLevelList: _environment2.default.getNestingLevelList('smallBox', 'inline'),
    classNames: {
      main: _commonNs2.default.css("error"),
      silent: _commonNs2.default.css("error-silent"),
      nestingLevelSmallBox: _commonNs2.default.css("error-small-box"),
      nestingLevelInline: _commonNs2.default.css("error-inline"),
      icon: _commonNs2.default.css("error-icon"),
      mainWrapper: _commonNs2.default.css("error-main-wrapper"),
      iconWrapper: _commonNs2.default.css("error-icon-wrapper"),
      content: _commonNs2.default.css("error-content"),
      preWrapper: _commonNs2.default.css("error-pre-wrapper"),
      pre: _commonNs2.default.css("error-pre"),
      errorDetails: _commonNs2.default.css("error-details"),
      errorDetailsButton: _commonNs2.default.css("error-details-button"),
      errorDetailsBody: _commonNs2.default.css("error-details-body"),
      errorInfo: _commonNs2.default.css("error-info")
    },
    defaults: {
      content: 'Error'
    },
    opt: {
      nestingLevelWrapper: true
    },
    lsi: function lsi() {
      return _environment2.default.Lsi.Common.error;
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    errorData: _propTypes2.default.object,
    errorDataSpace: _propTypes2.default.number, // TODO: set deprecated
    error: _propTypes2.default.shape({
      stack: _propTypes2.default.string,
      name: _propTypes2.default.string,
      message: _propTypes2.default.string
    }),
    silent: _propTypes2.default.bool,
    inline: _propTypes2.default.bool,
    moreInfo: _propTypes2.default.bool,
    errorInfo: _propTypes2.default.any // any - contact info link (ex. link to helpdesk)
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      errorData: null,
      errorDataSpace: null, // TODO: set deprecated
      error: null,
      silent: false,
      inline: false,
      moreInfo: false,
      errorInfo: null
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      errorDetails: false
    };
  },


  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs: function _getMainAttrs() {
    var attrs = this.getMainAttrs();

    switch (this.props.inline ? "inline" : this.getNestingLevel()) {
      case 'inline':
        attrs.className += ' ' + this.getClassName('nestingLevelInline');
        break;
      default:
        attrs.className += ' ' + this.getClassName('nestingLevelSmallBox');
    }

    if (this.props.silent) {
      attrs.className += ' ' + this.getClassName('silent');
    }

    return attrs;
  },
  _getContent: function _getContent() {
    var message = this.props.content || this.props.children || this.getDefault().content;
    var errorData = void 0;

    if (this.props.errorData && !this.props.moreInfo) {
      errorData = _react2.default.createElement(
        'div',
        { className: this.getClassName("preWrapper"), key: 'errorData' },
        _react2.default.createElement(
          'pre',
          { className: this.getClassName("pre") },
          JSON.stringify(this.props.errorData, null, 2)
        )
      );
    }

    return errorData ? [message, errorData] : message;
  },
  _getMoreInfoContent: function _getMoreInfoContent(message) {
    var content = this._getErrorDetailContent(message);
    var className = this.getClassName("errorDetails");
    this.props.silent && (className += ' ' + this.getClassName("silent"));

    return _react2.default.createElement(
      'div',
      { className: className, key: 'errorDetails' },
      _react2.default.createElement(
        'a',
        { className: this.getClassName("errorDetailsButton"), onClick: this._errorDetailsToggle },
        this.getLsiComponent(this.state.errorDetails ? 'hideErrorDetails' : 'showErrorDetails'),
        this.state.errorDetails ? _react2.default.createElement('span', { className: "mdi mdi-menu-up " + this.getClassName("icon") }) : _react2.default.createElement('span', { className: "mdi mdi-menu-down " + this.getClassName("icon") })
      ),
      _react2.default.createElement(
        'div',
        { className: this.getClassName("errorDetailsBody"), style: { display: this.state.errorDetails ? 'block' : 'none' } },
        _react2.default.createElement(_div2.default, { className: this.getClassName("errorInfo"), style: { display: this.props.errorInfo ? 'block' : 'none' }, content: this.props.errorInfo }),
        _react2.default.createElement(
          'div',
          { className: this.getClassName("preWrapper") },
          _react2.default.createElement(
            'pre',
            { className: this.getClassName("pre") },
            JSON.stringify(content, null, 2)
          )
        )
      )
    );
  },
  _getErrorDetailContent: function _getErrorDetailContent(message) {
    var session = _environment2.default.getSession();
    var navigator = window.navigator || {};

    var errorMessage = message.toString();
    this.props.error && this.props.error.message && (errorMessage = this.props.error.message);

    var stackTrace = this.props.error ? this.props.error.stack : new window.Error().stack;

    return {
      message: errorMessage,
      data: this.props.errorData,
      stackTrace: stackTrace.split('\n'),
      uuIdentity: session ? session.uuIdentity : null,
      url: window.location.href,
      time: new Date().toISOString(),
      navigator: {
        appCodeName: navigator.appCodeName,
        appName: navigator.appName,
        appVersion: navigator.appVersion,
        connection: navigator.connection,
        cookieEnabled: navigator.cookieEnabled,
        doNotTrack: navigator.doNotTrack,
        hardwareConcurrency: navigator.hardwareConcurrency,
        language: navigator.language,
        languages: navigator.languages,
        maxTouchPoints: navigator.maxTouchPoints,
        onLine: navigator.onLine,
        platform: navigator.platform,
        product: navigator.product,
        productSub: navigator.productSub,
        userAgent: navigator.userAgent,
        vendor: navigator.vendor,
        vendorSub: navigator.vendorSub
      },
      libs: this._getRuntimeLibraries()
    };
  },
  _getRuntimeLibraries: function _getRuntimeLibraries() {
    var libraries = {};
    libraries[_environment2.default.name] = _environment2.default.version;

    var runtimeLibraries = _environment2.default.getRuntimeLibraries();
    Object.keys(runtimeLibraries).forEach(function (key) {
      libraries[key] = runtimeLibraries[key].version;
    });

    return libraries;
  },
  _errorDetailsToggle: function _errorDetailsToggle() {
    this.setState(function (state) {
      return { errorDetails: !state.errorDetails };
    });
    return this;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var component = void 0;
    switch (this.props.inline ? "inline" : this.getNestingLevel()) {
      case 'smallBox':
        component = _react2.default.createElement(
          'div',
          this._getMainAttrs(),
          _react2.default.createElement(
            'div',
            { className: this.getClassName("mainWrapper") },
            _react2.default.createElement(
              'div',
              { className: this.getClassName("iconWrapper") },
              _react2.default.createElement('span', { className: "mdi mdi-alert-circle " + this.getClassName("icon") })
            ),
            _react2.default.createElement(
              'div',
              { className: this.getClassName().content },
              this._getContent()
            )
          ),
          this.props.moreInfo && this._getMoreInfoContent(this.props.content || this.props.children || this.getDefault().content),
          this.getDisabledCover()
        );
        break;
      case 'inline':
        component = _react2.default.createElement(
          'span',
          this._getMainAttrs(),
          this._getContent(),
          this.getDisabledCover()
        );
        break;
      default:
        component = null;
    }

    return component;
  }
  //@@viewOff:render
});

exports.default = Error;