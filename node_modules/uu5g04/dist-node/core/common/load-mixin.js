'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadMixin = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _callsMixin = require('./calls-mixin.js');

var _callsMixin2 = _interopRequireDefault(_callsMixin);

var _error = require('./error.js');

var _error2 = _interopRequireDefault(_error);

var _tools = require('./tools.js');

var _tools2 = _interopRequireDefault(_tools);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LoadMixin = exports.LoadMixin = {
  //@@viewOn:mixins
  mixins: [_callsMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    "UU5.Common.LoadMixin": {
      defaults: {
        minReloadInterval: 10 * 1000, // 10s
        onLoadCall: 'onLoad',
        onReloadCall: 'onReload'
      },
      errors: {
        onLoad: 'Error during loading data from server by call %s.',
        onReload: 'Error during reloading data from server by call %s.'
      },
      lsi: function lsi() {
        return _environment2.default.Lsi.Common.loadMixin;
      }
    }
  }, //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uri: _propTypes2.default.string,
    dtoOut: _propTypes2.default.object,
    reloadInterval: _propTypes2.default.number,
    refireLoad: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      uri: null,
      dtoOut: null,
      reloadInterval: 0,
      refireLoad: true
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      loadFeedback: 'loading',
      dtoOut: null,
      errorDtoOut: null
    };
  },
  componentWillMount: function componentWillMount() {
    if (this.props.dtoOut) {
      this.onLoadSuccess(this.props.dtoOut);
    }
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    if (!this.props.dtoOut) {
      this.setState({
        loadFeedback: 'loading',
        dtoOut: null,
        errorDtoOut: null
      }, function () {
        return _this._onLoad(_this.props);
      });
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled && nextProps.refireLoad) {
      this._onLoad(nextProps);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this._reloadInterval && _environment2.default.TimeManager.clearInterval(this._reloadInterval);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getUri: function getUri() {
    return this.props.uri;
  },
  getDtoOut: function getDtoOut() {
    return this.state.dtoOut;
  },
  getErrorData: function getErrorData() {
    return this.state.errorDtoOut;
  },
  getLoadFeedback: function getLoadFeedback() {
    return this.state.loadFeedback;
  },
  isLoading: function isLoading() {
    return this.getLoadFeedback() === 'loading';
  },
  isReady: function isReady() {
    return this.getLoadFeedback() === 'ready';
  },
  isError: function isError() {
    return this.getLoadFeedback() === 'error';
  },
  onLoadSuccess: function onLoadSuccess(dtoOut, setStateCallback) {
    this.setAsyncState({ loadFeedback: 'ready', dtoOut: dtoOut, errorDtoOut: null }, setStateCallback);
    return this;
  },
  onReloadSuccess: function onReloadSuccess(dtoOut, setStateCallback) {
    this.onLoadSuccess(dtoOut, setStateCallback);
    return this;
  },
  onLoadError: function onLoadError(dtoOut, setStateCallback) {
    this.setAsyncState({ loadFeedback: 'error', errorDtoOut: dtoOut }, setStateCallback);
    return this;
  },
  onReloadError: function onReloadError(dtoOut, setStateCallback) {
    this.onLoadError(dtoOut, setStateCallback);
    return this;
  },
  getLoadFeedbackChildren: function getLoadFeedbackChildren(getChildren) {
    var children = void 0;

    switch (this.getLoadFeedback()) {
      case 'loading':
        children = _tools2.default.findComponent('UU5.Bricks.Loading');
        break;
      case 'ready':
        children = getChildren(this.getDtoOut());
        break;
      case 'error':
        children = _react2.default.createElement(
          _error2.default,
          null,
          this.getLsiComponent('error', "UU5.Common.LoadMixin")
        );
        break;
    }

    return children;
  },
  reload: function reload(callName, dtoIn) {
    var _this2 = this;

    this.setState({ loadFeedback: 'loading' }, function () {
      _this2.forceReload(callName, dtoIn);
    });

    return this;
  },
  forceReload: function forceReload(callName, dtoIn) {
    var reloadCall = callName && this.getCall(callName) || this._getOnReloadCall();
    if (reloadCall) {
      var reloadDtoIn = dtoIn || this._getReloadDtoIn(this.props);
      reloadCall(reloadDtoIn);
    }
  },

  //@@viewOff:interface

  //@@viewOn:componentSpecificHelpers
  _getOnLoadCall: function _getOnLoadCall() {
    return this.getCall(this.getDefault('onLoadCall', "UU5.Common.LoadMixin"));
  },
  _getOnReloadCall: function _getOnReloadCall() {
    var result = void 0;

    var callNames = this.constructor.calls;
    if (callNames) {
      var callName = callNames[this.getDefault('onReloadCall', "UU5.Common.LoadMixin")];

      if (callName) {
        result = this.getCalls()[callName];
      } else {
        result = this._getOnLoadCall();
      }
    } else {
      result = this._getOnLoadCall();
    }

    return result;
  },
  _getLoadDtoIn: function _getLoadDtoIn(props) {
    var _this3 = this;

    props = props || this.props;

    var dtoIn = {};

    if (props.uri) {
      dtoIn.uri = props.uri;
    }

    if (typeof this.getOnLoadData_ === 'function') {
      dtoIn.data = this.getOnLoadData_(props);
    }

    dtoIn.done = function (dtoOut) {
      if (typeof _this3.onLoadSuccess_ === 'function') {
        _this3.onLoadSuccess_(dtoOut);
      } else {
        _this3.onLoadSuccess(dtoOut);
      }
    };

    var callKey = this.getDefault('onLoadCall', "UU5.Common.LoadMixin");
    dtoIn.fail = function (dtoOut) {
      _this3.showError('onLoad', _this3.getCallName(callKey), {
        mixinName: "UU5.Common.LoadMixin",
        context: {
          calls: _this3.getCalls(),
          dtoOut: dtoOut,
          callKey: callKey,
          uri: dtoIn.uri,
          data: dtoIn.data
        }
      });
      if (typeof _this3.onLoadError_ === 'function') {
        _this3.onLoadError_(dtoOut);
      } else {
        _this3.onLoadError(dtoOut);
      }
    };

    return dtoIn;
  },
  _getReloadDtoIn: function _getReloadDtoIn(props) {
    var _this4 = this;

    props = props || this.props;
    var dtoIn = {};

    if (props.uri) {
      dtoIn.uri = props.uri;
    }

    var getData = this.getOnReloadData_ || this.getOnLoadData_;
    if (typeof getData === 'function') {
      dtoIn.data = getData(props);
    }

    dtoIn.done = function (dtoOut) {
      var loadSuccess = _this4.onReloadSuccess_ || _this4.onLoadSuccess_;
      if (typeof loadSuccess === 'function') {
        loadSuccess(dtoOut);
      } else {
        _this4.onReloadSuccess(dtoOut);
      }
    };

    var calls = this.constructor.calls;
    var callKey = this.getDefault('onReloadCall', "UU5.Common.LoadMixin");
    calls && !calls[callKey] && (callKey = this.getDefault('onLoadCall', "UU5.Common.LoadMixin"));

    dtoIn.fail = function (dtoOut) {
      _this4.showError('onReload', _this4.getCallName(callKey), {
        mixinName: "UU5.Common.LoadMixin",
        context: {
          calls: _this4.getCalls(),
          dtoOut: dtoOut,
          callKey: callKey,
          uri: dtoIn.uri,
          data: dtoIn.data
        }
      });

      var loadError = _this4.onReloadError_ || _this4.onLoadError_;
      if (typeof loadError === 'function') {
        loadError(dtoOut);
      } else {
        _this4.onReloadError(dtoOut);
      }
    };

    return dtoIn;
  },
  _onLoad: function _onLoad(props) {
    var loadCall = this._getOnLoadCall();

    if (loadCall) {
      var dtoIn = this._getLoadDtoIn(props);

      this._reloadInterval && _environment2.default.TimeManager.clearInterval(this._reloadInterval);
      loadCall(dtoIn);

      var reloadInterval = this.props.reloadInterval || this.getOpt('reloadInterval');
      if (reloadInterval) {
        var reloadCall = this._getOnReloadCall();
        reloadCall = reloadCall || loadCall;

        if (reloadCall) {
          var reloadDtoIn = this._getReloadDtoIn(props);
          this._reloadInterval = _environment2.default.TimeManager.setInterval(function () {
            return reloadCall(reloadDtoIn);
          }, Math.max(reloadInterval, this.getDefault('minReloadInterval', "UU5.Common.LoadMixin")));
        }
      }
    }

    return this;
  }
  //@@viewOff:componentSpecificHelpers

};

exports.default = LoadMixin;