'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LsiMixin = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _tools = require('./tools.js');

var _tools2 = _interopRequireDefault(_tools);

var _environment = require('../environment/environment.js');

var _environment2 = _interopRequireDefault(_environment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LsiMixin = exports.LsiMixin = {

  //@@viewOn:statics
  statics: {
    "UU5.Common.LsiMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      lsiEvent: _tools2.default.events.lsi
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    language: _propTypes2.default.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      language: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    // initialize
    this.registerMixin("UU5.Common.LsiMixin");
    // state
    return {
      language: this.props.language || _tools2.default.getLanguages()[0].location || _tools2.default.getLanguages()[0].language
    };
  },

  componentDidMount: function componentDidMount() {
    window.UU5.Environment.EventListener.registerLsi(this.getId(), this._changeLanguage);
  },

  componentWillUnmount: function componentWillUnmount() {
    window.UU5.Environment.EventListener.unregisterLsi(this.getId(), this._changeLanguage);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonLsiMixin: function hasUU5CommonLsiMixin() {
    return this.hasMixin("UU5.Common.LsiMixin");
  },

  getUU5CommonLsiMixinProps: function getUU5CommonLsiMixinProps() {
    return {
      language: this.props.language
    };
  },

  getUU5CommonLsiMixinPropsToPass: function getUU5CommonLsiMixinPropsToPass() {
    return this.getUU5CommonLsiMixinProps();
  },

  getLanguages: function getLanguages() {
    return _tools2.default.getLanguages();
  },

  getLanguage: function getLanguage() {
    return this.state.language;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  // TODO: 'cs-CZ,en;q=0.8...' is set to state and never will be used, necessary is doing setState and render the component
  _setLanguage: function _setLanguage(language, setStateCallback) {
    this.setState({ language: language }, setStateCallback);
    return this;
  },

  _changeLanguage: function _changeLanguage(language) {
    if (this.getLanguage() !== language) {
      if (typeof this.onChangeLanguage_ === 'function') {
        this.onChangeLanguage_(language);
      } else {
        this._setLanguage(language);
      }
    }
  }
  //@@viewOff:componentSpecificHelpers
};

exports.default = LsiMixin;