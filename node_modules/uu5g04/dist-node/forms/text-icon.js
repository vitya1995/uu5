'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextIcon = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _formsNs = require('./forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

var _textInput = require('./internal/text-input.js');

var _textInput2 = _interopRequireDefault(_textInput);

var _textInputMixin = require('./mixins/text-input-mixin.js');

var _textInputMixin2 = _interopRequireDefault(_textInputMixin);

var _itemList = require('./internal/item-list.js');

var _itemList2 = _interopRequireDefault(_itemList);

require('./text-icon.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TextIcon = exports.TextIcon = (0, _createReactClass2.default)({
  displayName: 'TextIcon',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, _textInputMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _formsNs2.default.name("TextIcon"),
    classNames: {
      main: _formsNs2.default.css("text-icon"),
      clickable: _formsNs2.default.css("text-icon-clickable"),
      left: _formsNs2.default.css("text-icon-left"),
      right: _formsNs2.default.css("text-icon-right")
    },
    errors: {
      validateError: 'Validated result is not object.'
    },
    lsi: function lsi() {
      return UU5.Environment.Lsi.Forms.message;
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: _propTypes2.default.string,
    password: _propTypes2.default.bool,
    icon: _propTypes2.default.string,
    iconPosition: _propTypes2.default.oneOf(['left', 'right']),
    onClick: _propTypes2.default.func,
    pattern: _propTypes2.default.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      value: '',
      password: false,
      icon: null,
      iconPosition: 'right',
      onClick: null,
      pattern: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function componentWillMount() {
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: this.state.value, event: null, component: this });
    }

    return this;
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.controlled) {
      if (nextProps.required && (nextProps.value === '' || nextProps.value === null)) {
        this.setError(nextProps.requiredMessage || this.getLsiComponent('requiredMessage'));
      } else {
        this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value);
      }
    }
    return this;
  },


  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  // TODO: tohle je ještě otázka - je potřeba nastavit hodnotu z jiné komponenty (musí být validace) a z onChange (neměla by být validace)
  setValue_: function setValue_(value, setStateCallback) {
    if (this._checkRequired({ value: value })) {
      if (typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.setInitial(null, value, setStateCallback);
      }
    }

    return this;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _validateOnChange: function _validateOnChange(opt) {
    var result = this.onValidate(opt);
    if (result) {
      if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },
  _getMainAttrs: function _getMainAttrs() {
    var result = this._getInputAttrs();
    result.className += ' ' + (this.props.iconPosition === 'left' ? this.getClassName().left : this.getClassName().right);
    return result;
  },
  _iconOnClick: function _iconOnClick() {
    var result = void 0;
    if (typeof this.props.onClick === 'function') {
      result = this.props.onClick({ value: this.state.value, component: this });
    }
    return result;
  },


  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _this = this;

    var inputId = this.getId() + '-input';

    return _react2.default.createElement(
      'div',
      this._getMainAttrs(),
      this.getLabel(inputId),
      this.getInputWrapper([_react2.default.createElement(_textInput2.default, { id: inputId, name: this.props.name || inputId, value: this.state.value, placeholder: this.props.placeholder, type: this.props.password ? 'password' : this.props.type || 'text', onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown, mainAttrs: this.props.inputAttrs, disabled: this.isDisabled() || this.isLoading(), readonly: this.isReadOnly(), icon: this.props.icon, iconOnClick: this._iconOnClick, loading: this.isLoading(), feedback: this.getFeedback(), ref_: function ref_(item) {
          return _this._textInput = item;
        } }), this.state.autocompleteItems && _react2.default.createElement(
        _itemList2.default,
        this._getItemListProps(),
        this._getChildren()
      ), this.state.autocompleteItems && _react2.default.createElement(UU5.Bricks.Backdrop, this._getBackdropProps())])
    );
  }
  //@@viewOn:render
});

exports.default = TextIcon;