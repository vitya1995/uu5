'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Number = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _formsNs = require('./forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

var _textInput = require('./internal/text-input.js');

var _textInput2 = _interopRequireDefault(_textInput);

var _textInputMixin = require('./mixins/text-input-mixin.js');

var _textInputMixin2 = _interopRequireDefault(_textInputMixin);

var _itemList = require('./internal/item-list.js');

var _itemList2 = _interopRequireDefault(_itemList);

require('./number.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Number = exports.Number = (0, _createReactClass2.default)({
  displayName: 'Number',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, _textInputMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _formsNs2.default.name("Number"),
    classNames: {
      main: _formsNs2.default.css("number")
    },
    defaults: {
      regexpNumberParts: /\B(?=(\d{3})+(?!\d))/g
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    step: _propTypes2.default.number,
    min: _propTypes2.default.number,
    max: _propTypes2.default.number,
    decimals: _propTypes2.default.number,
    decimalSeparator: _propTypes2.default.string,
    thousandSeparator: _propTypes2.default.string,
    rounded: _propTypes2.default.bool,
    nanMessage: _propTypes2.default.any,
    lowerMessage: _propTypes2.default.any,
    upperMessage: _propTypes2.default.any,
    buttonHidden: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      value: null,
      step: 1,
      min: null,
      max: null,
      decimals: null,
      decimalSeparator: ',',
      thousandSeparator: null,
      rounded: false,
      nanMessage: 'Please insert a number',
      lowerMessage: 'Please type in bigger number.',
      upperMessage: 'Please type in smaller number.',
      buttonHidden: false
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle

  componentWillMount: function componentWillMount() {
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      var result = this._setNumberResult({ value: this.state.value });
      if (result) {
        if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
          if (result.feedback) {
            this.setFeedback(result.feedback, result.message, result.value);
          } else {
            this._validateOnChange({ value: this.state.value, event: null, component: this });
          }
        }
      }
    } else {
      // this.setInitial(null, this.state.value)
    }
    return this;
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.controlled) {
      var result = this._setNumberResult({ value: nextProps.value });
      if (result) {
        if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
          if (result.feedback) {
            this.setFeedback(result.feedback, result.message, result.value);
          } else {
            this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value);
          }
        }
      }
    }
    return this;
  },


  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  // TODO: tohle je ještě otázka - je potřeba nastavit hodnotu z jiné komponenty (musí být validace) a z onChange (neměla by být validace)
  setValue_: function setValue_(value, setStateCallback) {
    if (this._checkRequired({ value: value })) {
      if (typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.props.required ? this.setSuccess(null, value, setStateCallback) : this.setInitial(null, value, setStateCallback);
      }
    }

    return this;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _checkNumberResultChange: function _checkNumberResultChange(opt) {
    if (opt.value) {
      opt.value = opt.value.toString();
      var isComma = opt.value.indexOf(',') > 0;

      opt.value = opt.value.trim().replace(new RegExp(this.props.thousandSeparator, 'g'), '');
      opt.value = opt.value.replace(',', '.');
      var isNan = isNaN(opt.value);

      if (isNan && opt.value != '-') {
        opt.value = this.state.value;
        opt.feedback = 'warning';
        opt.message = this.props.nanMessage;
      }

      isComma && (opt.value = opt.value.replace('.', ','));
    }
    return opt;
  },
  _checkNumberResult: function _checkNumberResult(opt) {
    if (opt.value) {
      opt = this._checkNumberResultChange(opt);
      var isComma = opt.value && opt.value.indexOf(',') > 0;

      opt.value = opt.value.replace(new RegExp(this.props.thousandSeparator, 'g'), '');
      opt.value = opt.value.replace(',', '.');

      var number = parseFloat(opt.value);

      if ((this.props.min || this.props.min === 0) && number < this.props.min) {
        opt.value = this.props.min.toString();
        opt.feedback = 'error';
        opt.message = this.props.lowerMessage;
      }

      if ((this.props.max || this.props.max === 0) && number > this.props.max) {
        opt.value = this.props.max.toString();
        opt.feedback = 'error';
        opt.message = this.props.upperMessage;
      }

      isComma && (opt.value = opt.value.replace('.', ','));
    }
    return opt;
  },
  _setNumberResult: function _setNumberResult(opt) {
    var result = this._checkNumberResult(opt);
    if (opt.value) {
      var number = opt.value.replace(this.props.decimalSeparator, '.').replace(',', '.');

      if (this.props.rounded && number) {
        var exp = this.props.decimals ? -1 * this.props.decimals : 0;
        number = UU5.Common.Tools.round10(parseFloat(number), exp).toString();
      }

      var numberParts = number.split('.');

      if (this.props.thousandSeparator) {
        numberParts[0] = numberParts[0].replace(this.getDefault().regexpNumberParts, this.props.thousandSeparator);
      }
      if (numberParts.length > 1) {
        if (this.props.decimals && this.props.decimals < numberParts[1].length) {
          numberParts[1] = numberParts[1].slice(0, this.props.decimals - numberParts[1].length);
        }
        result.value = numberParts[0] + this.props.decimalSeparator + numberParts[1];
      } else {
        result.value = numberParts[0];
      }
    }
    return result;
  },
  _onChange: function _onChange(e) {
    var opt = { value: e.target.value, event: e, component: this };
    var checkNumberResult = this._checkNumberResultChange(opt);

    if (checkNumberResult.feedback && checkNumberResult.feedback === 'warning') {
      this.setFeedback(checkNumberResult.feedback, checkNumberResult.message, checkNumberResult.value);
    } else {
      if (!this.isDisabled() && !this.isReadOnly()) {
        if (typeof this.props.onChange === 'function') {
          this.props.onChange(opt);
        } else {
          if (this.props.validateOnChange) {
            this._validateOnChange(opt);
          } else {
            if (this._checkRequired({ value: opt.value })) {
              opt.required = this.props.required;
              var result = this.getChangeFeedback(opt);
              this.setFeedback(result.feedback, result.message, result.value);
            }
          }
        }
      }
    }

    return this;
  },
  _onBlur: function _onBlur(e) {
    var opt = { value: e.target.value, event: e, component: this };

    var separator = this.props.decimalSeparator;
    opt.value = opt.value ? parseFloat(opt.value.replace(separator, ".")).toString().replace(".", separator) : opt.value;

    if (typeof this.props.onBlur === 'function') {
      this.props.onBlur(opt);
    } else {
      var blurResult = this.getBlurFeedback(opt);
      var setNumberResult = this._setNumberResult(blurResult);
      if (this._checkRequired({ value: setNumberResult.value }) && !this.props.validateOnChange) {
        setNumberResult.required = this.props.required;
        if (setNumberResult.feedback && setNumberResult.feedback) {
          this.setFeedback(setNumberResult.feedback, setNumberResult.message, setNumberResult.value);
        }
      } else {
        this.setFeedback(setNumberResult.feedback, setNumberResult.message, setNumberResult.value);
      }
    }

    return this;
  },
  _onFocus: function _onFocus(e) {
    var opt = { value: e.target.value, event: e, component: this };
    if (typeof this.props.onFocus === 'function') {
      this.props.onFocus(opt);
    } else {
      var result = this.getFocusFeedback(opt);
      if (result) {
        this.setFeedback(result.feedback, result.message, result.value);
      } else {
        this.setFeedback(this.state.feedback, this.state.message, String(this.state.value).replace(new RegExp(this.props.thousandSeparator, 'g'), ''));
      }
    }

    return this;
  },
  _validateOnChange: function _validateOnChange(opt) {
    var result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },


  /*_getFeedbackIcon(){
    let icon = this.props.required ? this.props.successIcon : null;
    switch (this.getFeedback()) {
      case 'success':
        icon = this.props.successIcon;
        break;
      case 'warning':
        icon = this.props.warningIcon;
        break;
      case 'error':
        icon = this.props.errorIcon;
        break;
    }
    return icon;
  },*/

  _decrease: function _decrease(e) {
    var _this = this;

    //TODO: optimize
    var value = this.state.value || 0;
    var number = parseFloat(value.toString().replace(this.props.decimalSeparator, '.'));
    var valueDecimals = value.toString().split(this.props.decimalSeparator)[1] ? value.toString().split(this.props.decimalSeparator)[1].length : 0;
    var stepDecimals = this.props.step.toString().split('.')[1] ? this.props.step.toString().split('.')[1].length : 0;
    if (valueDecimals > 0 || stepDecimals > 0) {
      var pow = Math.pow(10, valueDecimals > stepDecimals ? valueDecimals : stepDecimals);
      number = (number * pow - this.props.step * pow) / pow;
    } else {
      number -= this.props.step;
    }

    var result = this._setNumberResult({ value: number.toString() });

    if (typeof this.props.onChange === 'function') {
      this.props.onChange({
        value: result.value,
        event: e,
        component: this
      });
    } else {
      if (result.feedback === 'error') {
        this.setValue_(result.value, function () {
          return _this._decreaseEnd();
        });
      } else {
        this.setValue_(result.value);
      }
    }
    return this;
  },
  _increase: function _increase(e) {
    var _this2 = this;

    //TODO: optimize
    var value = this.state.value || 0;
    var number = parseFloat(value.toString().replace(this.props.decimalSeparator, '.'));
    var valueDecimals = value.toString().split(this.props.decimalSeparator)[1] ? value.toString().split(this.props.decimalSeparator)[1].length : 0;
    var stepDecimals = this.props.step.toString().split('.')[1] ? this.props.step.toString().split('.')[1].length : 0;
    if (valueDecimals > 0 || stepDecimals > 0) {
      var pow = Math.pow(10, valueDecimals > stepDecimals ? valueDecimals : stepDecimals);
      number = (number * pow + this.props.step * pow) / pow;
    } else {
      number += this.props.step;
    }
    var result = this._setNumberResult({ value: number.toString() });

    if (typeof this.props.onChange === 'function') {
      this.props.onChange({
        value: result.value,
        event: e,
        component: this
      });
    } else {
      if (result.feedback === 'error') {
        this.setValue_(result.value, function () {
          return _this2._increaseEnd();
        });
      } else {
        this.setValue_(result.value);
      }
    }
    return this;
  },
  _isDisabled: function _isDisabled(type) {
    var result = false;

    if (this.state.value) {
      var value = this.state.value || 0;
      var number = parseFloat(value.toString().replace(this.props.decimalSeparator, '.'));
      if (type === 'min' && this.props.min) {
        if (number <= this.props.min) {
          result = true;
        }
      } else if (type === 'max' && this.props.max) {
        if (number >= this.props.max) {
          result = true;
        }
      }
    }
    return result;
  },
  _increaseStart: function _increaseStart(e) {
    var _this3 = this;

    this._increaseTimeout = setTimeout(function () {
      _this3._increaseTimer = UU5.Environment.TimeManager.setInterval(function () {
        return _this3._increase(e);
      }, 100);
    }, 300);
  },
  _increaseEnd: function _increaseEnd() {
    this._increaseTimeout && clearTimeout(this._increaseTimeout);
    this._increaseTimer && UU5.Environment.TimeManager.clearInterval(this._increaseTimer);
  },
  _decreaseStart: function _decreaseStart(e) {
    var _this4 = this;

    this._decreaseTimeout = setTimeout(function () {
      _this4._decreaseTimer = UU5.Environment.TimeManager.setInterval(function () {
        return _this4._decrease(e);
      }, 100);
    }, 300);
  },
  _decreaseEnd: function _decreaseEnd() {
    this._decreaseTimeout && clearTimeout(this._decreaseTimeout);
    this._decreaseTimer && UU5.Environment.TimeManager.clearInterval(this._decreaseTimer);
  },


  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _this5 = this;

    var inputId = this.getId() + '-input';
    var buttons = !this.isReadOnly() && !this.props.buttonHidden ? [{
      icon: 'mdi-minus',
      disabled: this.isDisabled() || this._isDisabled('min'),
      onClick: function onClick(component, e) {
        return _this5._decrease(e);
      },
      colorSchema: 'default',
      size: this.props.size,
      mainAttrs: { onMouseDown: this._decreaseStart, onMouseUp: this._decreaseEnd, onMouseOut: this._decreaseEnd }
    }, {
      icon: 'mdi-plus',
      disabled: this.isDisabled() || this._isDisabled('max'),
      onClick: function onClick(component, e) {
        return _this5._increase(e);
      },
      colorSchema: 'default',
      size: this.props.size,
      mainAttrs: { onMouseDown: this._increaseStart, onMouseUp: this._increaseEnd, onMouseOut: this._increaseEnd }
    }] : null;

    return _react2.default.createElement(
      'div',
      this._getInputAttrs(),
      this.getLabel(inputId),
      this.getInputWrapper([_react2.default.createElement(_textInput2.default, { id: inputId, name: this.props.name || inputId, value: this.state.value ? this.state.value.toString() : '', placeholder: this.props.placeholder, type: 'text', onChange: this._onChange, onBlur: this._onBlur, onFocus: this._onFocus, onKeyDown: this.onKeyDown, mainAttrs: this.props.inputAttrs, disabled: this.isDisabled() || this.isLoading(), readonly: this.isReadOnly(), loading: this.isLoading(), ref_: function ref_(item) {
          return _this5._textInput = item;
        }, feedback: this.getFeedback() }), _react2.default.createElement(
        _itemList2.default,
        this._getItemListProps(),
        this._getChildren()
      ), _react2.default.createElement(UU5.Bricks.Backdrop, this._getBackdropProps())], buttons)
    );
  }
  //@@viewOn:render

});

exports.default = Number;