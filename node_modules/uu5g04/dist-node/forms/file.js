'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.File = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('../create-react-class.js');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _formsNs = require('./forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

var _itemsInput = require('./internal/items-input.js');

var _itemsInput2 = _interopRequireDefault(_itemsInput);

var _choiceMixin = require('./mixins/choice-mixin.js');

var _choiceMixin2 = _interopRequireDefault(_choiceMixin);

var _inputMixin = require('./mixins/input-mixin.js');

var _inputMixin2 = _interopRequireDefault(_inputMixin);

require('./file.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var File = exports.File = (0, _createReactClass2.default)({
  displayName: 'File',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, _inputMixin2.default, _choiceMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _formsNs2.default.name("File"),
    classNames: {
      main: _formsNs2.default.css("file"),
      input: _formsNs2.default.css("file-input"),
      close: _formsNs2.default.css("file-close-icon"),
      multiple: _formsNs2.default.css("file-multiple"),
      selected: _formsNs2.default.css("file-selected"),
      list: _formsNs2.default.css("file-list")
    },
    lsi: function lsi() {
      return UU5.Environment.Lsi.Forms.message;
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
    multiple: _propTypes2.default.bool,
    closeIcon: _propTypes2.default.string,
    selectedIcon: _propTypes2.default.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      //value: null,
      multiple: false,
      icon: 'mdi-cloud-upload',
      closeIcon: 'mdi-window-close',
      selectedIcon: 'mdi-attachment'
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function componentWillMount() {
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: this.state.value, event: null, component: this });
    }
  },
  componentDidMount: function componentDidMount() {
    var dropZone = document.getElementById(this.getId());
    UU5.Environment.EventListener.createEvent(dropZone, 'dragover', this.getId(), this._handleDragOver);
    UU5.Environment.EventListener.createEvent(dropZone, 'drop', this.getId(), this._handleFileSelect);
    return this;
  },
  componentWillUnmount: function componentWillUnmount() {
    var dropZone = document.getElementById(this.getId());
    UU5.Environment.EventListener.deleteEvent(dropZone, 'dragover', this.getId());
    UU5.Environment.EventListener.deleteEvent(dropZone, 'drop', this.getId());
    return this;
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  addValue: function addValue(file, setStateCallback) {
    this.setValue(this._buildNewValue(file), setStateCallback);
    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  setValue_: function setValue_(value, setStateCallback) {
    if (this._checkRequired({ value: value })) {
      if (typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.setInitial(null, value, setStateCallback);
      }
    }

    return this;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _changeValue: function _changeValue(value, e) {
    var opt = { value: value, event: e, component: this };

    if (typeof this.props.onChange === 'function') {
      this.props.onChange(opt);
    } else {
      var result = this.getChangeFeedback(opt);
      this.setState({
        feedback: result.feedback,
        message: result.message,
        value: result.value
      });
    }
    return this;
  },
  _onChange: function _onChange(e) {
    if (!this.isDisabled() && !this.isReadOnly()) {
      this._changeValue(this._buildNewValue(e.target.files), e);
    }
    return this;
  },
  _buildNewValue: function _buildNewValue(file) {
    var newValue = null;
    if (file.length) {
      if (this.props.multiple) {
        newValue = this.state.value ? this.state.value.slice() : [];
        var prevValue = newValue.slice();

        var _loop = function _loop(i) {
          if (!prevValue.some(function (item) {
            return file[i].name === item.name && file[i].size === item.size && file[i].lastModified === item.lastModified;
          })) {
            newValue.push(file[i]);
          }
        };

        for (var i = 0; i < file.length; i++) {
          _loop(i);
        }
      } else {
        newValue = file[0];
      }
    } else {
      newValue = file;
    }
    return newValue;
  },
  _getTextInputAttrs: function _getTextInputAttrs() {
    var _this = this;

    var props = {};

    if (!this.state.isReadOnly && !this.isDisabled()) {
      props.onClick = function () {
        return _this._open();
      };
    }

    return props;
  },
  _getMainAttrs: function _getMainAttrs() {
    var attrs = this._getInputAttrs();
    if (this.props.multiple) {
      attrs.className += ' ' + this.getClassName().multiple;
    }
    if (!this.props.multiple && this.state.value) {
      attrs.className += ' ' + this.getClassName().selected;
    }
    return attrs;
  },
  _validateOnChange: function _validateOnChange(opt) {
    var result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },
  _getIcon: function _getIcon() {
    return !this.props.multiple && this.state.value ? this.props.selectedIcon : this.props.icon;
  },
  _open: function _open() {
    document.getElementById(this.getId() + '-file').click();
    return this;
  },
  _handleFileSelect: function _handleFileSelect(e) {
    e.stopPropagation();
    e.preventDefault();

    this.addValue(e.dataTransfer.files);

    return this;
  },
  _handleDragOver: function _handleDragOver(e) {
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.

    return this;
  },
  _getFilesName: function _getFilesName() {
    var _this2 = this;

    var result = '';
    var value = this.state.value;

    if (value) {
      if (Array.isArray(value)) {
        result = value.map(function (file, i) {
          return _react2.default.createElement(
            'li',
            { key: i },
            _react2.default.createElement(UU5.Bricks.Icon, { icon: _this2.props.selectedIcon }),
            file.name,
            _react2.default.createElement(UU5.Bricks.Icon, { className: _this2.getClassName().close, icon: _this2.props.closeIcon, mainAttrs: {
                onClick: function onClick(e) {
                  _this2._changeValue(_this2.state.value.filter(function (item) {
                    return item !== file;
                  }), e);
                }
              } })
          );
        });
      } else {
        result = value.name;
      }
    }

    return result;
  },
  _checkRequired: function _checkRequired(opt) {
    var result = true;
    if (this.props.required && !opt.value) {
      result = false;
      this.setError(this.props.requiredMessage || this.getLsiComponent('requiredMessage'), opt.value);
    }

    return result;
  },
  _getFileInput: function _getFileInput() {
    var _this3 = this;

    return _react2.default.createElement('input', { value: '', type: 'file', id: this.getId() + '-file', multiple: this.props.multiple, onChange: this._onChange, className: this.getClassName().input, ref: function ref(item) {
        return _this3.inputVal = item;
      } });
  },

  /*
  <Icon
    mainAttrs={{
      onClick: () => {
        this.setValue(null);
      }
    }}
    className={this.getClassName().close}
    icon={this.props.closeIcon}
  />*/

  _getSingleInput: function _getSingleInput(inputId) {
    var _this4 = this;

    return [_react2.default.createElement(_itemsInput2.default, { id: inputId, name: this.props.name || inputId, value: this._getFilesName(), placeholder: this.props.placeholder, multiple: this.props.multiple, mainAttrs: this.props.inputAttrs, disabled: this.isDisabled() || this.isLoading(), readonly: this.isReadOnly(), loading: this.isLoading(), onItemClick: function onItemClick(opt) {
        _this4.removeItem(opt);
      }, onClick: !this.isReadOnly() && !this.isDisabled() ? function () {
        return _this4._open();
      } : null, icon: this._getIcon(), feedback: this.getFeedback() }), this.state.value && !this.state.disabled && !this.state.readOnly ? _react2.default.createElement(UU5.Bricks.Icon, { className: this.getClassName().close, icon: this.props.closeIcon, mainAttrs: {
        onClick: function onClick(e) {
          _this4._changeValue(null, e);
        }
      } }) : null, this._getFileInput()];
  },
  _getMultipleInput: function _getMultipleInput(inputId) {
    var _this5 = this;

    return [_react2.default.createElement(_itemsInput2.default, { id: inputId, name: this.props.name || inputId
      /*value={this._getFilesName()}*/
      , placeholder: this.props.placeholder, multiple: this.props.multiple, mainAttrs: this.props.inputAttrs, disabled: this.isDisabled() || this.isLoading(), readonly: this.isReadOnly(), loading: this.isLoading(), onItemClick: function onItemClick(opt) {
        _this5.removeItem(opt);
      }, onClick: !this.isReadOnly() && !this.isDisabled() ? function () {
        return _this5._open();
      } : null, icon: this._getIcon(), feedback: this.getFeedback() }), _react2.default.createElement(
      'ul',
      { className: this.getClassName().list },
      this._getFilesName()
    ), this._getFileInput()];
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var inputId = this.getId() + '-input';
    return _react2.default.createElement(
      'div',
      _extends({}, this._getMainAttrs(), { id: this.getId() }),
      this.getLabel(inputId),
      this.getInputWrapper(this.props.multiple ? this._getMultipleInput(inputId) : this._getSingleInput(inputId))
    );
  }
  //@@viewOff:render

});

exports.default = File;