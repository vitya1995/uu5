'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkboxes = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _formsNs = require('./forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

var _inputMixin = require('./mixins/input-mixin.js');

var _inputMixin2 = _interopRequireDefault(_inputMixin);

var _groupMixin = require('./mixins/group-mixin.js');

var _groupMixin2 = _interopRequireDefault(_groupMixin);

var _checkbox = require('./checkbox.js');

var _checkbox2 = _interopRequireDefault(_checkbox);

require('./checkboxes.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Checkboxes = exports.Checkboxes = (0, _createReactClass2.default)({
  displayName: 'Checkboxes',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, _inputMixin2.default, _groupMixin2.default],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _formsNs2.default.name("Checkboxes"),
    classNames: {
      main: _formsNs2.default.css("checkboxes"),
      inline: _formsNs2.default.css("inputs-inline")
    },
    defaults: {
      onIcon: 'mdi-check'
    },
    lsi: function lsi() {
      return UU5.Environment.Lsi.Forms.message;
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function componentWillMount() {
    var value = this._getInitialValue();

    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: value, event: null, component: this });
    } else {
      this.setState({ value: value });
    }

    return this;
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.controlled) {
      if (nextProps.value !== undefined) {
        var newState = this.state.value;
        nextProps.value.forEach(function (value) {
          newState[value.name] = value.value;
        });

        if (this.props.onValidate && typeof this.props.onValidate === 'function') {
          this._validateOnChange({ value: newState, event: null, component: this });
        } else {
          this.setState({ value: newState });
        }
      }
    }
  },


  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  reset_: function reset_(setStateCallback) {
    var value = this._getInitialValue();
    this.setState({
      message: this.props.message,
      feedback: this.props.feedback,
      value: value,
      readOnly: this.props.readOnly
    }, setStateCallback);
  },
  getValue_: function getValue_() {
    return this._getValue();
  },
  setValue_: function setValue_(value, setStateCallback) {
    var newValue = value;
    //console.log(`set value ${value}`)

    this.setState({ value: newValue }, setStateCallback);

    return this;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getInitialValue: function _getInitialValue(props) {
    props = props || this.props;
    var value = {};

    props.value.forEach(function (checkbox, i) {
      value[checkbox.name || i.toString()] = checkbox.value || false;
    });

    return value;
  },
  _onChange: function _onChange(opt) {
    opt.value = !opt.value;

    if (!this.isDisabled() && !this.isReadOnly()) {
      if (typeof this.props.onChange === 'function') {
        var result = this._checkRequired(opt);

        result.value = this._getValue(result.value);

        if (result && (typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object' && result.feedback === 'error') {
          result.value = this.getValue_(result.value);
          this.setError(result.message, result.value);
        } else if (typeof this.props.onValidate === 'function') {
          result = this.props.onValidate(result);
        } else {
          result = this.props.onChange(result);
        }

        if (result && (typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
          if (typeof this.props.onChangeFeedback === 'function') {
            this.props.onChangeFeedback({
              feedback: result.feedback,
              message: result.message,
              value: result.value,
              callback: result.setStateCallback,
              component: this
            });
          } else {
            result.value = this._getValue(result.value);
            this.setFeedback(result.feedback, result.message, result.value);
          }
        } else {
          //TODO: not accessible - verify!!!!
          this._setValue(opt);
        }
      } else {
        this._setValue(opt);
      }
    }

    return this;
  },
  _validateOnChange: function _validateOnChange(opt) {
    opt.value && (opt.value = this._getValue(opt.value));
    var result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;

    if (result) {
      if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
        if (result.feedback) {
          result.value = this._getValue(result.value);
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          //TODO: verify opt.value - must be object
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }

    return this;
  },
  _getValue: function _getValue(value) {
    var _this = this;

    var newValue = {};
    value = value || this.state.value;
    value && Object.keys(value).forEach(function (key) {
      for (var i = 0; i < _this.props.value.length; i++) {
        var item = UU5.Common.Tools.merge({}, _this.props.value[i]);
        if (item.name === key) {
          newValue[key] = value[key];
        }
      }
    });
    return newValue;
  },
  _setValue: function _setValue(opt) {
    var result = this._checkRequired(opt);

    if (result && (typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object' && result.feedback === 'error') {
      this.setError(result.message, result.value);
    } else if (typeof this.props.onValidate === 'function') {
      result.value = this._getValue(result.value);
      result = this.props.onValidate(result);
      result.value = this._getValue(result.value);
      this.setFeedback(result.feedback, result.message, result.value);
    } else {
      this.setInitial('', result.value);
    }

    return this;
  },
  _checkRequired: function _checkRequired(opt) {
    var newState = this._getNewState(opt);

    opt.value = newState;

    if (this.props.required) {
      if (this._isSelected(newState)) {
        if (typeof this.props.onChange !== 'function') {
          opt = { feedback: 'initial', message: '', value: newState };
        }
      } else {
        opt = { feedback: 'error', message: this.props.requiredMessage || this.getLsiComponent('requiredMessageGroup'), value: newState };
      }
    }
    return opt;
  },
  _getNewState: function _getNewState(opt) {
    var _this2 = this;

    var newState = UU5.Common.Tools.merge({}, this.state.value);

    Object.keys(this.state.value).forEach(function (key) {
      var value = _this2.state.value[key];
      if (key === opt.component.getName()) {
        value = !opt.value;
      }
      newState[key] = value;
    });

    return newState;
  },
  _isSelected: function _isSelected(newState) {
    var value = newState ? UU5.Common.Tools.merge({}, this.state.value, newState) : this.state.value;

    return Object.keys(value).map(function (name) {
      return value[name];
    }).indexOf(true) > -1;
  },
  _getCheckboxes: function _getCheckboxes() {
    var _this3 = this;

    return this.props.value.map(function (box, key) {
      var checkboxProps = UU5.Common.Tools.merge({}, box);
      var disabled = _this3.props.disabled ? true : !!box.disabled;

      return _react2.default.createElement(_checkbox2.default, { key: key, value: _this3.state.value && _this3.state.value[checkboxProps.name], label: box.label, onChange: _this3._onChange, name: box.name, size: _this3.props.size, labelPosition: _this3.props.labelPosition, disabled: disabled, onIcon: box.onIcon || _this3.props.onIcon || _this3.getDefault().onIcon, offIcon: box.offIcon || _this3.props.offIcon });
    });
  },
  _getMainAttrs: function _getMainAttrs() {
    var attrs = this._getInputAttrs();

    if (this.props.inline) {
      attrs.className += ' ' + this.getClassName().inline;
    }

    return attrs;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var inputId = this.getId() + '-input';
    return _react2.default.createElement(
      'div',
      this._getMainAttrs(),
      this.getLabel(inputId),
      this.getInputWrapper([this._getCheckboxes()])
    );
  }
  //@@viewOn:render

});

exports.default = Checkboxes;