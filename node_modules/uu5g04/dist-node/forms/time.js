'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Time = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('../create-react-class.js');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _formsNs = require('./forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

require('./time.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FORMAT_AM = 'AM';
var FORMAT_PM = 'PM';
var FORMAT_12 = '12';
var FORMAT_24 = '24';
var Time = exports.Time = (0, _createReactClass2.default)({
  displayName: 'Time',


  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin],

  statics: {
    tagName: _formsNs2.default.name("Time"),
    classNames: {
      main: _formsNs2.default.css("time"),
      button: _formsNs2.default.css("time-button"),
      hours: _formsNs2.default.css("time-hours"),
      minutes: _formsNs2.default.css("time-minutes"),
      hoursWrapper: _formsNs2.default.css("time-hours-wrapper"),
      minutesWrapper: _formsNs2.default.css("time-minutes-wrapper"),
      hoursPickerWrapper: _formsNs2.default.css("time-hours-picker-wrapper"),
      minutesPickerWrapper: _formsNs2.default.css("time-minutes-picker-wrapper"),
      timePart: _formsNs2.default.css("time-part"),
      timePartSwitch: _formsNs2.default.css("time-part-switch"),
      am: _formsNs2.default.css("time-am"),
      amSelected: _formsNs2.default.css("time-am-selected uu5-common-text"),
      pm: _formsNs2.default.css("time-pm"),
      pmSelected: _formsNs2.default.css("time-pm-selected uu5-common-text"),
      iconAm: _formsNs2.default.css("time-icon-am"),
      iconPm: _formsNs2.default.css("time-icon-pm"),
      nav: _formsNs2.default.css("time-nav")
    },
    defaults: {
      upIcon: 'mdi-chevron-up',
      downIcon: 'mdi-chevron-down'
    }
  },

  propTypes: {
    value: _propTypes2.default.shape({
      hours: _propTypes2.default.number,
      minutes: _propTypes2.default.number,
      dayPart: _propTypes2.default.oneOf([FORMAT_AM, FORMAT_PM])
    }),
    format: _propTypes2.default.oneOf([FORMAT_12, FORMAT_24]),
    onChange: _propTypes2.default.func
  },

  // Setting defaults
  getDefaultProps: function getDefaultProps() {
    return {
      value: null,
      format: null,
      onChange: null
    };
  },

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return this._parseTime();
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      if (!this.state.hours || !this.state.minutes || !this.state.dayPart || nextProps.value && (this.state.minutes !== nextProps.value.minutes || this.state.hours !== nextProps.value.hours || this.state.dayPart !== nextProps.value.dayPart)) {
        var state = this._parseTime(nextProps);
        this.setState(state);
      }
    }
    return this;
  },

  //@@viewOff:standardComponentLifeCycle

  // Interface

  // Overriding Functions

  // Component Specific Helpers
  _parseTime: function _parseTime(props) {
    props = props || this.props;

    var result = {
      hours: this._isFormat12() ? 1 : 0,
      minutes: 0
    };

    if (props.value !== null) {
      result.hours = props.value.hours || result.hours;
      result.minutes = props.value.minutes || result.minutes;

      if (this._isFormat12()) {
        result.pm = props.value && props.value.dayPart === FORMAT_PM;
        result.hours > 12 && (result.hours -= 12);
      }
    } else {
      result = {
        hours: null,
        minutes: null
      };
    }

    return result;
  },
  _getDayPart: function _getDayPart(pm) {
    return pm ? FORMAT_PM : FORMAT_AM;
  },
  _addDayPart: function _addDayPart(value, pm) {
    value.dayPart = this._getDayPart(pm);
    return this;
  },
  _isFormat12: function _isFormat12() {
    return this.props.format === FORMAT_12;
  },
  _changeDayPart: function _changeDayPart(e) {
    if (typeof this.props.onChange === 'function') {
      var value = { hours: this.state.hours, minutes: this.state.minutes };
      this._isFormat12() && this._addDayPart(value, !this.state.pm);

      this.props.onChange({
        value: value,
        event: e,
        component: this
      });
    } else {
      this.setState(function (state) {
        return { pm: !state.pm };
      });
    }

    return this;
  },
  _setTime: function _setTime(time, hours, e) {
    var is12 = this._isFormat12();
    var pm = this.state.pm;
    var value = {
      hours: hours ? time : this.state.hours || 0,
      minutes: hours ? this.state.minutes || 0 : time
    };

    if (typeof this.props.onChange === 'function') {
      is12 && this._addDayPart(value, pm);

      this.props.onChange({
        value: value,
        event: e,
        component: this
      });
    } else {
      is12 && (value.pm = pm);
      this.setState(value);
    }

    return this;
  },
  _getButtons: function _getButtons(from, to, selected, hours) {
    var _this = this;

    var result = [];

    var _loop = function _loop(i) {
      result.push(_react2.default.createElement(UU5.Bricks.Button, { colorSchema: selected === i ? null : 'default', className: _this.getClassName("button"), bgStyle: selected === i ? 'filled' : 'transparent', content: UU5.Common.Tools.rjust(i, 2, '0'), key: i, onClick: function onClick(component, e) {
          return _this._setTime(i, hours, e);
        } }));
    };

    for (var i = from; i <= to; i++) {
      _loop(i);
    }
    return result;
  },
  _getHours: function _getHours() {
    return this._isFormat12() ? this._getButtons(1, 12, this.state.hours, true) : this._getButtons(0, 23, this.state.hours, true);
  },
  _getMinutes: function _getMinutes() {
    return this._getButtons(0, 59, this.state.minutes);
  },
  _scrollUp: function _scrollUp(id) {
    var element = document.getElementById(id);
    var scrollTop = element.scrollTop;
    element.scrollTop = scrollTop - 32;
    return this;
  },
  _scrollDown: function _scrollDown(id) {
    var element = document.getElementById(id);
    var scrollTop = element.scrollTop;
    element.scrollTop = scrollTop + 32;
    return this;
  },
  _increaseStart: function _increaseStart(id) {
    var _this2 = this;

    this._increaseTimeout = setTimeout(function () {
      _this2._increaseTimer = setInterval(function () {
        return _this2._scrollUp(id);
      }, 100);
    }, 300);
  },
  _increaseEnd: function _increaseEnd() {
    this._increaseTimeout && clearTimeout(this._increaseTimeout);
    this._increaseTimer && clearInterval(this._increaseTimer);
  },
  _decreaseStart: function _decreaseStart(id) {
    var _this3 = this;

    this._decreaseTimeout = setTimeout(function () {
      _this3._decreaseTimer = setInterval(function () {
        return _this3._scrollDown(id);
      }, 100);
    }, 300);
  },
  _decreaseEnd: function _decreaseEnd() {
    this._decreaseTimeout && clearTimeout(this._decreaseTimeout);
    this._decreaseTimer && clearInterval(this._decreaseTimer);
  },
  _switchDayPart: function _switchDayPart(e) {
    var _this4 = this;

    this._buttonSwitch.toggle(function () {
      _this4.setState(function (state) {
        var pm = !state.pm;
        var value = {
          hours: state.hours,
          minutes: state.minutes
        };

        if (typeof _this4.props.onChange === 'function') {
          _this4._addDayPart(value, pm);

          _this4.props.onChange({
            value: value,
            event: e,
            component: _this4
          });
        } else {
          value.pm = pm;
          _this4.setState(value);
        }
      });
    });
    return this;
  },


  // Render
  render: function render() {
    var _this5 = this;

    var idHours = this.getId() + '-hoursPickerWrapper';
    var idMinutes = this.getId() + '-minutesPickerWrapper';
    return _react2.default.createElement(
      'div',
      this.getMainAttrs(),
      _react2.default.createElement(
        'div',
        { className: this.getClassName("hoursWrapper") },
        _react2.default.createElement(
          UU5.Bricks.Button,
          { colorSchema: 'custom', className: this.getClassName("nav"), onClick: function onClick() {
              return _this5._scrollUp(idHours);
            }, mainAttrs: {
              onMouseDown: function onMouseDown() {
                return _this5._increaseStart(idHours);
              },
              onMouseUp: function onMouseUp() {
                return _this5._increaseEnd(idHours);
              },
              onMouseOut: function onMouseOut() {
                return _this5._increaseEnd(idHours);
              }
            } },
          _react2.default.createElement(UU5.Bricks.Icon, { icon: this.getDefault("upIcon") })
        ),
        _react2.default.createElement(
          'div',
          { className: this.getClassName("hoursPickerWrapper"), id: idHours },
          _react2.default.createElement(
            'div',
            { className: this.getClassName("hours") },
            this._getHours()
          )
        ),
        _react2.default.createElement(
          UU5.Bricks.Button,
          { colorSchema: 'custom', className: this.getClassName("nav"), onClick: function onClick() {
              return _this5._scrollDown(idHours);
            }, mainAttrs: {
              onMouseDown: function onMouseDown() {
                return _this5._decreaseStart(idHours);
              },
              onMouseUp: function onMouseUp() {
                return _this5._decreaseEnd(idHours);
              },
              onMouseOut: function onMouseOut() {
                return _this5._decreaseEnd(idHours);
              }
            } },
          _react2.default.createElement(UU5.Bricks.Icon, { icon: this.getDefault("downIcon") })
        )
      ),
      _react2.default.createElement(
        'div',
        { className: this.getClassName("minutesWrapper") },
        _react2.default.createElement(
          UU5.Bricks.Button,
          { colorSchema: 'custom', className: this.getClassName("nav"), onClick: function onClick() {
              return _this5._scrollUp(idMinutes);
            }, mainAttrs: {
              onMouseDown: function onMouseDown() {
                return _this5._increaseStart(idMinutes);
              },
              onMouseUp: function onMouseUp() {
                return _this5._increaseEnd(idMinutes);
              },
              onMouseOut: function onMouseOut() {
                return _this5._increaseEnd(idMinutes);
              }
            } },
          _react2.default.createElement(UU5.Bricks.Icon, { icon: this.getDefault("upIcon") })
        ),
        _react2.default.createElement(
          'div',
          { className: this.getClassName("minutesPickerWrapper"), id: idMinutes },
          _react2.default.createElement(
            'div',
            { className: this.getClassName("minutes") },
            this._getMinutes()
          )
        ),
        _react2.default.createElement(
          UU5.Bricks.Button,
          { colorSchema: 'custom', className: this.getClassName("nav"), onClick: function onClick() {
              return _this5._scrollDown(idMinutes);
            }, mainAttrs: {
              onMouseDown: function onMouseDown() {
                return _this5._decreaseStart(idMinutes);
              },
              onMouseUp: function onMouseUp() {
                return _this5._decreaseEnd(idMinutes);
              },
              onMouseOut: function onMouseOut() {
                return _this5._decreaseEnd(idMinutes);
              }
            } },
          _react2.default.createElement(UU5.Bricks.Icon, { icon: this.getDefault("downIcon") })
        )
      ),
      this._isFormat12() && _react2.default.createElement(
        'div',
        { className: this.getClassName("timePart") },
        _react2.default.createElement(
          'span',
          { className: this.state.pm ? this.getClassName("am") : this.getClassName("amSelected") },
          'AM'
        ),
        _react2.default.createElement(UU5.Bricks.ButtonSwitch, { className: this.getClassName("timePartSwitch"), ref_: function ref_(buttonSwitch) {
            return _this5._buttonSwitch = buttonSwitch;
          }, props: {
            onClick: function onClick() {
              return _this5._switchDayPart();
            },
            content: _react2.default.createElement(UU5.Bricks.Icon, { icon: this.state.pm ? "mdi-chevron-left" : "mdi-chevron-right", className: "uu5-common-text " + (this.state.pm ? this.getClassName("iconPm") : this.getClassName("iconAm")) })
          } }),
        _react2.default.createElement(
          'span',
          { className: this.state.pm ? this.getClassName("pmSelected") : this.getClassName("pm") },
          'PM'
        )
      )
    );
  }
});

exports.default = Time;