'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

require('uu5g04-bricks');

var _formsNs = require('./forms-ns.js');

var _formsNs2 = _interopRequireDefault(_formsNs);

var _inputMixin = require('./mixins/input-mixin.js');

var _inputMixin2 = _interopRequireDefault(_inputMixin);

var _textInput = require('./internal/text-input.js');

var _textInput2 = _interopRequireDefault(_textInput);

require('./slider.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Slider = exports.Slider = (0, _createReactClass2.default)({
  displayName: 'Slider',


  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin, _inputMixin2.default],

  statics: {
    tagName: _formsNs2.default.name("Slider"),
    classNames: {
      main: _formsNs2.default.css("slider"),
      inputGroup: _formsNs2.default.css("slider-input-group"),
      slider: _formsNs2.default.css("slider-slider"),
      number: _formsNs2.default.css("slider-number"),
      sliderReadOnly: _formsNs2.default.css('slider-slider-read-only')
    },
    defaults: {
      nanMessage: 'Please insert a number'
    }
  },

  propTypes: {
    // TODO
    //position: PropTypes.oneOf(['horizontal', 'vertical']),
    min: _propTypes2.default.number,
    max: _propTypes2.default.number,
    step: _propTypes2.default.number,
    value: _propTypes2.default.number,
    onChange: _propTypes2.default.func,
    onChanged: _propTypes2.default.func
  },

  // Setting defaults
  getDefaultProps: function getDefaultProps() {
    return {
      //position: 'horizontal',
      min: 0,
      max: 10,
      step: 1,
      value: null,
      onChanged: null
    };
  },


  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function componentWillMount() {
    var value = typeof this.props.value === 'number' ? this.props.value : this.props.min;
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: value, event: null, component: this });
    } else {
      this.setFeedback(this.props.feedback, this.props.message, value);
    }
    return this;
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.controlled) {
      var value = typeof this.props.value === 'number' ? nextProps.value : nextProps.min;
      this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value);
    }
    return this;
  },


  //@@viewOff:standardComponentLifeCycle

  // Interface

  // Overriding Functions
  setValue_: function setValue_(value, setStateCallback) {
    if (typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: value });
    } else {
      this.setInitial(null, value, setStateCallback);
    }

    return this;
  },


  // Component Specific Helpers
  // _onChange(e) {
  //   if (!this.isDisabled()) {
  //     var value = !this.getValue();
  //     var newState = this._validateValue(value);
  //
  //     if (newState) {
  //       this.setState(newState);
  //     } else {
  //       if (this.props.onChange) {
  //         this.props.onChange({ value: value, input: this, event: e });
  //       } else {
  //         this.setState({ value: value });
  //       }
  //     }
  //   }
  //   return this;
  // },

  _validateOnChange: function _validateOnChange(opt) {
    var result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },
  _getMainAttrs: function _getMainAttrs() {
    return this.getInputMainAttrs();
  },
  _getInputGroupAttrs: function _getInputGroupAttrs() {
    return {
      className: this.getClassName().inputGroup
    };
  },
  _getSliderProps: function _getSliderProps() {
    var value = this.props.min;
    if (this.state.value !== null && this.state.value !== undefined) {
      value = typeof this.state.value === 'number' ? this.state.value : parseInt(this.state.value);
    }

    var content = this.getContent() || this.props.children && _react2.default.Children.toArray(this.props.children);
    var className = this.getClassName('slider');
    this.isReadOnly() && (className += ' ' + this.getClassName('sliderReadOnly'));

    return {
      name: this.getName(),
      className: className,
      colorSchema: this.props.colorSchema,
      //position: 'horizontal',
      min: this.props.min,
      max: this.props.max,
      step: this.props.step,
      value: value,
      content: content,
      onChange: this._onChange,
      onChanged: this.props.onChanged,
      disabled: this.isDisabled() || this.isReadOnly(),
      size: this.props.size
    };
  },
  _getNumberProps: function _getNumberProps() {
    var _this = this;

    var value = this.state.value || 0;
    value = value > this.props.max ? this.props.max : value < this.props.min ? this.props.min : value;

    return {
      className: this.getClassName().number,
      min: this.props.min,
      max: this.props.max,
      value: value.toString(),
      onChange: function onChange(event) {
        _this._onChange({ component: _this, value: event.target.value, event: event });
      },
      onBlur: function onBlur(opt) {
        if (_this.state.value < _this.props.min) {
          opt.component.setValue(_this.props.min);
        } else if (_this.state.value > _this.props.max) {
          opt.component.setValue(_this.props.max);
        }
      },
      disabled: this.isDisabled(),
      onChangeFeedback: this._onChangeNumberFeedback
    };
  },
  _getOnChanged: function _getOnChanged(value, e) {
    var _this2 = this;

    var onChanged = void 0;
    if (typeof this.props.onChanged === 'function') {
      onChanged = function onChanged() {
        _this2.props.onChanged({ value: value, component: _this2, event: e });
      };
    }
    return onChanged;
  },
  _onChange: function _onChange(opt) {
    if (!this.isDisabled()) {
      if (typeof this.props.onChange == 'function') {
        opt.component = this;
        this.props.onChange(opt);
      } else if (typeof this.props.onValidate === 'function') {
        this._validateOnChange(opt);
      } else {
        var result = this._checkNumberResultChange(opt);
        if (result.feedback && result.feedback === 'warning') {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setInitial(null, opt.value, this._getOnChanged(opt.value, opt.event));
        }
      }
    }
    return this;
  },
  _checkNumberResultChange: function _checkNumberResultChange(opt) {
    if (opt.value) {
      opt.value = opt.value.toString();
      var isComma = opt.value.indexOf(',') > 0;

      opt.value = opt.value.trim().replace(new RegExp(this.props.thousandSeparator, 'g'), '');
      opt.value = opt.value.replace(',', '.');
      var isNan = isNaN(opt.value);

      if (isNan && opt.value != '-') {
        opt.value = this.state.value;
        opt.feedback = 'warning';
        opt.message = this.getDefault().nanMessage;
      }

      isComma && (opt.value = opt.value.replace('.', ','));
    }
    return opt;
  },
  _onChangeNumberFeedback: function _onChangeNumberFeedback(opt) {
    this.setValue(opt.value ? +opt.value : null, opt.callback);
    //this.setFeedback(opt.feedback, opt.message, opt.value ? +opt.value : null, opt.callback);
    return this;
  },


  // _getFeedbackIcon(){
  //   let icon = this.props.required ? this.props.successIcon : null;
  //   switch (this.getFeedback()) {
  //     case 'success':
  //       icon = this.props.successIcon;
  //       break;
  //     case 'warning':
  //       icon = this.props.warningIcon;
  //       break;
  //     case 'error':
  //       icon = this.props.errorIcon;
  //       break;
  //   }
  //   return icon;
  // },

  // Render
  render: function render() {
    var inputId = this.getId() + '-input';
    return _react2.default.createElement(
      'div',
      this._getInputAttrs(),
      this.getLabel(inputId),
      this.getInputWrapper([_react2.default.createElement(UU5.Bricks.Slider, this._getSliderProps()), _react2.default.createElement(_textInput2.default, _extends({}, this._getNumberProps(), { id: inputId, name: this.props.name || inputId, placeholder: this.props.placeholder, type: 'text', mainAttrs: this.props.inputAttrs, disabled: this.isDisabled() || this.isLoading(), readonly: this.isReadOnly(), loading: this.isLoading(), feedback: this.getFeedback() }))])
    );
  }
});

exports.default = Slider;