'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panel = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _panelHeader = require('./panel-header.js');

var _panelHeader2 = _interopRequireDefault(_panelHeader);

var _panelBody = require('./panel-body.js');

var _panelBody2 = _interopRequireDefault(_panelBody);

require('./panel.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Panel = exports.Panel = (0, _createReactClass2.default)({
  displayName: 'Panel',

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ColorSchemaMixin, UU5.Common.SectionMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Panel"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("panel"),
      expanded: _bricksNs2.default.css("panel-expanded"),
      size: _bricksNs2.default.css("panel-size-")
    },
    defaults: {
      parentTagName: 'UU5.Bricks.Accordion',
      header: 'noHeader',
      body: 'noBody'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    expanded: _propTypes2.default.bool,
    alwaysExpanded: _propTypes2.default.bool,
    iconExpanded: _propTypes2.default.string,
    iconCollapsed: _propTypes2.default.string,
    onClick: _propTypes2.default.func,
    disableHeaderClick: _propTypes2.default.bool,
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      expanded: false,
      alwaysExpanded: false,
      iconExpanded: null,
      iconCollapsed: null,
      onClick: null,
      disableHeaderClick: false,
      size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      expanded: this.props.alwaysExpanded || this.props.expanded
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      if (nextProps.alwaysExpanded) {
        !this.isExpanded() && this.setState({ expanded: true });
      } else if (nextProps.expanded !== this.props.expanded && nextProps.expanded !== this.isExpanded()) {
        // new expanded != this.props.expanded because if hide or disable accordion, default props to panel set again but state in panel can be different!!!
        this._setExpandedValue(nextProps, nextProps.expanded);
      }
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isPanel: function isPanel() {
    return true;
  },


  setExpandedValue: function setExpandedValue(expanded, setStateCallback) {
    this._setExpandedValue(this.props, expanded, setStateCallback);
    return this;
  },

  expand: function expand(setStateCallback) {
    this.setExpandedValue(true, setStateCallback);
    return this;
  },

  collapse: function collapse(setStateCallback) {
    this.setExpandedValue(false, setStateCallback);
    return this;
  },

  toggle: function toggle(setStateCallback) {
    if (this.isExpandable()) {
      this.setState(function (state) {
        return { expanded: !state.expanded };
      }, setStateCallback);
    }
    return this;
  },

  isExpanded: function isExpanded() {
    return this.state.expanded;
  },

  isExpandable: function isExpandable(props) {
    return !this.isDisabled() && !(props || this.props).alwaysExpanded;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  buildHeaderChild_: function buildHeaderChild_(headerTypes) {
    var headerType = this.getHeaderType(headerTypes);

    var headerChild;
    if (headerType === 'contentOfStandardHeader') {
      headerChild = _react2.default.createElement(_panelHeader2.default, { content: headerTypes.header });
      headerChild = this.cloneChild(headerChild, this.expandHeaderProps(headerChild));
    }

    return headerChild;
  },

  expandHeaderProps_: function expandHeaderProps_(headerChild) {
    var headerProps = headerChild.props;
    var newProps = {};

    // default values is used if child is set as react element so null or undefined will not set!!!
    for (var key in headerProps) {
      headerProps[key] !== null && headerProps[key] !== undefined && (newProps[key] = headerProps[key]);
    }

    return UU5.Common.Tools.merge(newProps, {
      key: newProps.id,
      _onClick: this._onClickToggle,
      _icon: this.isExpanded() ? this.props.iconExpanded : this.props.iconCollapsed,
      _disableHeaderClick: this.props.disableHeaderClick
    });
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _setExpandedValue: function _setExpandedValue(props, expanded, setStateCallback) {
    if (this.isExpandable(props)) {
      if (this.isExpanded() === expanded) {
        typeof setStateCallback === 'function' && setStateCallback();
      } else {
        this.setState({ expanded: expanded }, setStateCallback);
      }
    }
    return this;
  },

  _findChildByTagName: function _findChildByTagName(tagName) {
    var children = Array.isArray(this.props.children) ? this.props.children : [this.props.children];

    var result = children.filter(function (child) {
      return child.type && child.type.tagName === tagName;
    });

    return result[0] || null;
  },

  _onClickToggle: function _onClickToggle(e) {
    var _this = this;

    var panel = this;
    this.toggle(function () {
      var onClick;

      if (typeof _this.props.onClick === 'function') {
        onClick = function onClick() {
          return panel.props.onClick(_this);
        };
      }

      if (onClick) {
        onClick(_this);
      }
    });
    return this;
  },


  _getBodyId: function _getBodyId() {
    return this.getId() + '-body';
  },

  _getBodyChild: function _getBodyChild() {
    var bodyContent = this.getContent();
    !this.props.children && !bodyContent && (bodyContent = this.getDefault().body);

    var bodyId = this._getBodyId();

    var bodyProps = {
      controlled: true,
      id: bodyId,
      key: bodyId,
      content: bodyContent,
      _expanded: this.isExpanded()
    };

    return this.buildChildren({
      children: _react2.default.createElement(_panelBody2.default, bodyProps, _react2.default.Children.toArray(this.props.children))
    });
  },

  _getBodyHeight: function _getBodyHeight() {
    return this.getRenderedChildById(this._getBodyId()).getFullHeight();
  },

  _checkParentTag: function _checkParentTag() {
    return this.getParent() && this.getParent().getTagName() === this.getDefault().parentTagName;
  },

  //@@viewOff:componentSpecificHelpers

  // Render
  _buildChildren: function _buildChildren() {
    var header = this.getHeader() || this.getDefault().header;
    var headerChild = this.buildHeaderChild({ header: header });
    var bodyChild = this._getBodyChild();

    return [headerChild, bodyChild];
  },

  //@@viewOn:render
  render: function render() {
    var mainProps = this.getMainAttrs();
    this.isExpanded() && (mainProps.className += ' ' + this.getClassName().expanded);
    mainProps.className += ' ' + this.getClassName('size') + this.props.size;

    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      mainProps,
      this._buildChildren(),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render
});

exports.default = Panel;