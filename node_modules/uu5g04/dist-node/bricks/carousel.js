"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Carousel = undefined;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require("create-react-class");

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require("uu5g04");

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require("./bricks-ns.js");

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require("./carousel.less");

var _carouselItem = require("./carousel-item.js");

var _carouselItem2 = _interopRequireDefault(_carouselItem);

var _icon = require("./icon.js");

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } //@@viewOn:import


//@@viewOff:import

var Carousel = exports.Carousel = (0, _createReactClass2.default)({
  displayName: "Carousel",

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin, UU5.Common.SwipeMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Carousel"),
    classNames: {
      main: _bricksNs2.default.css("carousel"),
      controls: _bricksNs2.default.css("carousel-controls"),
      indicators: _bricksNs2.default.css("carousel-indicators"),
      active: _bricksNs2.default.css("carousel-indicators-active"),
      leftArrow: _bricksNs2.default.css("carousel-left"),
      rightArrow: _bricksNs2.default.css("carousel-right"),
      lastArrow: _bricksNs2.default.css("carousel-last")
    },
    defaults: {
      minAngle: 22.5,
      childTagName: 'UU5.Bricks.Carousel.Item',
      colorSchema: 'default'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    hideControls: _propTypes2.default.bool,
    hideIndicators: _propTypes2.default.bool,
    activeIndex: _propTypes2.default.number,
    nextIcon: _propTypes2.default.string,
    prevIcon: _propTypes2.default.string,
    displayedItems: _propTypes2.default.number,
    type: _propTypes2.default.oneOf(['circular', 'final', 'rewind']),
    interval: _propTypes2.default.number,
    stepByOne: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      hideControls: false,
      hideIndicators: false,
      activeIndex: 0,
      nextIcon: 'mdi-chevron-right',
      prevIcon: 'mdi-chevron-left',
      displayedItems: 1,
      type: 'final',
      interval: 5000,
      stepByOne: false
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      activeIndex: this.props.activeIndex,
      rowHeight: 0,
      renderedChildren: []
    };
  },
  componentWillMount: function componentWillMount() {
    var children = this.getChildren();
    this.setState({
      children: children,
      tmpChildren: children
    });
  },
  componentDidMount: function componentDidMount() {
    this._prepareChildren();
    if (this.props.interval > 0) {
      this._autoChange = true;
      this._startAutoSlide();
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.interval > 0 && !this._autoChange) {
      this._autoChange = true;
      this._startAutoSlide();
    }
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var _this = this;

    if (!this.props.children) return;

    if (this.props !== prevProps) {
      this._resetShifts();
      this._newProps = true;

      if (this.props.controlled) {
        var children = this.getChildren();
        this.setState({
          activeIndex: this.props.activeIndex,
          children: children,
          tmpChildren: children,
          renderedChildren: []
        }, function () {
          return _this._prepareChildren();
        });
      } else {
        this._prepareChildren();
      }
    } else {
      var indexHasChanged = this.state.activeIndex !== prevState.activeIndex;
      if (this._newProps) {
        this._newProps = false;
      } else if (indexHasChanged) {
        this._swipeRenderedChild();
      } else if (this.state.hadSwiped) {
        this._removeRenderedChild();
      }
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  setActiveIndex: function setActiveIndex(activeIndex, setStateCallback) {
    this._addRenderedChild(activeIndex, setStateCallback);
    return this;
  },
  getActiveIndex: function getActiveIndex() {
    return this.state.activeIndex;
  },
  setNext: function setNext(setStateCallback) {
    if (this.props.type === 'final' && this.getActiveIndex() >= this._getSlidesLength() - 1) return this;

    var nextIndex = this._getSlidesLength() - 1 < this.getActiveIndex() + 1 ? 0 : this.getActiveIndex() + 1;
    this._addRenderedChild(nextIndex, setStateCallback);

    return this;
  },
  setPrevious: function setPrevious(setStateCallback) {
    if (this.props.type === 'final' && this.getActiveIndex() <= 0) return this;

    var previousIndex = this.getActiveIndex() === 0 ? this._getSlidesLength() - 1 : this.getActiveIndex() - 1;
    this._addRenderedChild(previousIndex, setStateCallback);

    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function shouldChildRender_(child) {
    return this.getDefault().childTagName === UU5.Common.Tools.getChildTagName(child);
  },
  expandChildProps_: function expandChildProps_(child) {
    var newChildProps = UU5.Common.Tools.mergeDeep({}, child.props);
    newChildProps.style = newChildProps.style || {};
    newChildProps.style.width = 100 / this.props.displayedItems + '%';
    return newChildProps;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMaxHeight: function _getMaxHeight() {
    var maxHeight = 0;
    this.eachRenderedChild(function (child) {
      if (child) {
        var height = UU5.Common.Tools.getOuterHeight(child, true);
        maxHeight = height > maxHeight ? height : maxHeight;
      }
    });
    return maxHeight;
  },
  _prepareChildren: function _prepareChildren() {
    var steps = this.props.stepByOne ? 1 : this.props.displayedItems;
    var properties = {
      index: this.props.activeIndex * steps,
      position: 0,
      height: this._getMaxHeight(),
      noOfElements: this.props.displayedItems
    };

    this.setState({
      activeIndex: this.props.activeIndex,
      tmpChildren: [],
      renderedChildren: this._getContent(properties),
      rowHeight: properties.height
    });
  },
  _pauseAutoSlide: function _pauseAutoSlide() {
    UU5.Environment.TimeManager.clearInterval(this._interval);
  },
  _startAutoSlide: function _startAutoSlide() {
    var _this2 = this;

    this._interval = UU5.Environment.TimeManager.setInterval(function () {
      return _this2.setNext();
    }, this.props.interval);
  },
  _clickHandler: function _clickHandler(func) {
    var lastSlide = new Date();
    if (!this.lastSlide || lastSlide - this.lastSlide > 750) {
      func && func();
      this.lastSlide = lastSlide;
    }
    return this;
  },
  _addRenderedChild: function _addRenderedChild(nextIndex, setStateCallback) {
    var newRenderedChildren = this.state.renderedChildren.slice();
    var prevIndex = this.state.activeIndex;
    var isDirectionRight = nextIndex - prevIndex >= 0;
    var steps = this.props.stepByOne ? 1 : this.props.displayedItems;
    var no = Math.abs(nextIndex - prevIndex) * steps;

    if (this.props.type === 'circular' && nextIndex === 0 && prevIndex === this._getSlidesLength() - 1) {
      newRenderedChildren.push.apply(newRenderedChildren, _toConsumableArray(this._getContent({
        index: this.props.stepByOne ? this.props.displayedItems - 1 : 0,
        position: this.props.displayedItems,
        noOfElements: steps,
        newShift: 1
      })));

      isDirectionRight = true;
    } else if (this.props.type === 'circular' && prevIndex === 0 && nextIndex === this._getSlidesLength() - 1) {
      newRenderedChildren.unshift.apply(newRenderedChildren, _toConsumableArray(this._getContent({
        index: nextIndex * steps,
        position: -1 * steps,
        noOfElements: steps,
        newShift: -1
      })));

      isDirectionRight = false;
    } else {
      if (isDirectionRight) {
        newRenderedChildren.push.apply(newRenderedChildren, _toConsumableArray(this._getContent({
          index: (prevIndex + 1) * steps + (this.props.displayedItems - steps),
          position: this.props.displayedItems,
          noOfElements: no
        })));
      } else {
        newRenderedChildren.unshift.apply(newRenderedChildren, _toConsumableArray(this._getContent({
          index: nextIndex * steps,
          position: -1 * no,
          noOfElements: no
        })));
      }
    }

    this.setState({
      activeIndex: nextIndex,
      renderedChildren: newRenderedChildren,
      isDirectionRight: isDirectionRight,
      hadSwiped: false
    }, setStateCallback);
  },
  _swipeRenderedChild: function _swipeRenderedChild() {
    var _this3 = this;

    setTimeout(function () {
      var newRenderedChildren = _this3.state.renderedChildren.slice();
      var size = _this3.state.renderedChildren.length;

      newRenderedChildren = newRenderedChildren.map(function (item, i) {
        var newPosition = _this3.state.isDirectionRight ? (i - (size - _this3.props.displayedItems)) * 100 : i * 100;
        var newProps = {
          style: UU5.Common.Tools.mergeDeep({}, item.props.style, _this3._getChildrenStyle(newPosition)),
          position: newPosition
        };
        return _react2.default.cloneElement(item, newProps);
      });

      _this3.setState({
        renderedChildren: newRenderedChildren,
        hadSwiped: true
      });
    }, 50);
  },
  _removeRenderedChild: function _removeRenderedChild() {
    var _this4 = this;

    setTimeout(function () {
      var newRenderedChildren = _this4.state.renderedChildren.filter(function (item) {
        return item.props.position >= 0 && item.props.position < 100 * _this4.props.displayedItems;
      });
      _this4.setState({
        renderedChildren: newRenderedChildren,
        hadSwiped: false
      });
    }, 500);
  },
  _getSlidesLength: function _getSlidesLength() {
    var children = this.state.children ? this.state.children : this.getChildren();
    var length = children ? children.length : 0;

    return this.props.stepByOne && this.props.displayedItems > 1 ? this.props.type === 'circular' ? length : Math.ceil(length - (this.props.displayedItems - 1)) : Math.ceil(length / this.props.displayedItems);
  },
  _resetShifts: function _resetShifts() {
    this._shiftCirc = null;
    this._shiftFin = null;
  },
  _getContent: function _getContent(properties) {
    var displayedItems = this.props.displayedItems;
    var children = this.state.children;
    var noOfElements = properties.noOfElements;
    var startPosition = properties.position;
    this._shiftCirc = this._shiftCirc || 0;
    var rest = Math.ceil(children.length / displayedItems) * displayedItems - children.length;

    if (properties.newShift && !this.props.stepByOne) {
      this._shiftCirc += properties.newShift;
    }

    if (this._shiftFin) {
      if (properties.index === 0) {
        noOfElements -= this._shiftFin;
        startPosition += this._shiftFin;
        this._shiftFin = null;
      } else {
        properties.index -= this._shiftFin;
      }
    }

    var childrenToRender = [];
    for (var i = 0; i < noOfElements; ++i) {
      var index = properties.index + i;
      if (this.props.type === 'circular') {
        index += this._shiftCirc * rest;

        if (index >= children.length || index < 0) {
          index = (index + 10000 * children.length) % children.length;
        }
      }

      if (index < children.length) {
        var position = (startPosition + i) * 100;
        var newProps = UU5.Common.Tools.mergeDeep({}, children[index].props);
        newProps.position = position;
        newProps.key = this._getKey(children[index].key);
        newProps.style = UU5.Common.Tools.mergeDeep({}, newProps.style, this._getChildrenStyle(position, displayedItems, properties.height));
        childrenToRender.push(_react2.default.cloneElement(children[index], newProps));
      } else {
        if (this.props.type !== 'circular' && !this._shiftFin && !this.props.stepByOne) {
          this._shiftFin = noOfElements - i;
        }
      }
    }

    return childrenToRender;
  },
  _getKey: function _getKey(key) {
    this.state.renderedChildren && this.state.renderedChildren.forEach(function (item) {
      if (key === item.key) {
        key += '-copy';
      }
    });
    return key;
  },
  _getChildrenStyle: function _getChildrenStyle(position, displayedItems, height) {
    displayedItems = displayedItems || this.props.displayedItems;
    !height && (height = this.state.rowHeight);

    return {
      width: 100 / displayedItems + '%',
      transform: "translateX(" + position + "%)",
      height: height > 0 ? height + 'px' : null
    };
  },
  _customTouchEndHandler: function _customTouchEndHandler() {
    var absAngle = Math.abs(this.getAngle());
    var lastSlide = new Date();

    if (this.isSwipedRight() && absAngle <= this.getDefault().minAngle) {
      if (!this.lastSlide || lastSlide - this.lastSlide > 750) {
        this.setPrevious();
        this.lastSlide = lastSlide;
      }
    } else if (this.isSwipedLeft() && absAngle >= 180 - this.getDefault().minAngle) {
      if (!this.lastSlide || lastSlide - this.lastSlide > 750) {
        this.setNext();
        this.lastSlide = lastSlide;
      }
    }
    return this;
  },
  _buildMainAttrs: function _buildMainAttrs() {
    var _this5 = this;

    var mainAttrs = this.buildMainAttrs();
    mainAttrs.id = this.getId();
    mainAttrs.className = this.getClassName('main');
    mainAttrs.style = mainAttrs.style || {};
    mainAttrs.style.height = this.state.rowHeight + 'px';
    mainAttrs.onTouchStart = this.swipeOnTouchStart;
    mainAttrs.onTouchMove = this.swipeOnTouchMove;
    mainAttrs.onTouchEnd = function () {
      return _this5.swipeOnTouchEnd(_this5._customTouchEndHandler);
    };
    if (this.props.interval > 0) {
      mainAttrs.onMouseOver = this._pauseAutoSlide;
      mainAttrs.onMouseLeave = this._startAutoSlide;
    }
    return mainAttrs;
  },
  _buildIndicators: function _buildIndicators() {
    var _this6 = this;

    var indicators = [];

    var _loop = function _loop(i) {
      var className = i === _this6.getActiveIndex() ? _this6.getClassName('active') : '';
      indicators.push(_react2.default.createElement("li", { key: i, className: className, onClick: function onClick() {
          return _this6._clickHandler(function () {
            return _this6.setActiveIndex(i);
          });
        } }));
    };

    for (var i = 0; i < this._getSlidesLength(); i++) {
      _loop(i);
    }
    return indicators;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _this7 = this;

    var colorSchema = ' color-schema-' + this.getColorSchema();

    var classNameLeft = this.getClassName().leftArrow;
    if (this.props.type === 'final' && this.getActiveIndex() === 0) {
      classNameLeft += ' ' + this.getClassName().lastArrow;
    }

    var classNameRight = this.getClassName().rightArrow;
    if (this.props.type === 'final' && this.getActiveIndex() === this._getSlidesLength() - 1) {
      classNameRight += ' ' + this.getClassName().lastArrow;
    }

    return this.props.children ? _react2.default.createElement(
      "div",
      this._buildMainAttrs(),
      this.state.renderedChildren,
      this.state.tmpChildren,
      _react2.default.createElement(
        "div",
        { className: this.getClassName().controls + colorSchema },
        !this.props.hideControls && _react2.default.createElement(
          "a",
          { className: classNameLeft, role: "button", onClick: function onClick() {
              return _this7._clickHandler(_this7.setPrevious);
            } },
          _react2.default.createElement(_icon2.default, { icon: this.props.prevIcon })
        ),
        !this.props.hideIndicators && _react2.default.createElement(
          "ol",
          { className: this.getClassName().indicators },
          this._buildIndicators()
        ),
        !this.props.hideControls && _react2.default.createElement(
          "a",
          { className: classNameRight, role: "button", onClick: function onClick() {
              return _this7._clickHandler(_this7.setNext);
            } },
          _react2.default.createElement(_icon2.default, { icon: this.props.nextIcon })
        )
      )
    ) : null;
  }
  //@@viewOff:render

});

Carousel.Item = _carouselItem2.default;
exports.default = Carousel;