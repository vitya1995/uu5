'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LanguageSelector = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('../create-react-class.js');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _dropdown = require('./dropdown.js');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _dropdownItem = require('./dropdown-item.js');

var _dropdownItem2 = _interopRequireDefault(_dropdownItem);

var _span = require('./span.js');

var _span2 = _interopRequireDefault(_span);

var _button = require('./button.js');

var _button2 = _interopRequireDefault(_button);

require('./language-selector.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LanguageSelector = exports.LanguageSelector = (0, _createReactClass2.default)({
  displayName: 'LanguageSelector',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ScreenSizeMixin, UU5.Common.LsiMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("LanguageSelector"),
    nestingLevelList: UU5.Environment.getNestingLevelList('box', 'inline'),
    classNames: {
      main: _bricksNs2.default.css("language-selector"),
      left: _bricksNs2.default.css("language-selector-left"),
      flag: _bricksNs2.default.css("language-selector-flag"),
      text: _bricksNs2.default.css("language-selector-text"),
      label: _bricksNs2.default.css("language-selector-label"),
      code: _bricksNs2.default.css("language-selector-code"),
      codeText: _bricksNs2.default.css("language-selector-code-text"),
      labelCodeText: _bricksNs2.default.css("language-selector-label-code-text"),
      selected: _bricksNs2.default.css("language-selector-selected"),
      modalButton: _bricksNs2.default.css("language-selector-modal-button"),
      button: _bricksNs2.default.css("language-selector-button"),
      spaceBetween: _bricksNs2.default.css("language-selector-space-between")
    },
    defaults: {
      regexpSpace: / /g
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    headerMode: _propTypes2.default.oneOf(['all', 'flag', 'label', 'code']),
    bodyMode: _propTypes2.default.oneOf(['all', 'flag', 'label', 'label-code']),
    displayedLanguages: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string]),
    languages: _propTypes2.default.shape({
      languageCode: _propTypes2.default.shape({
        flag: _propTypes2.default.string,
        language: _propTypes2.default.string
      })
    }),
    defaultLanguage: _propTypes2.default.string,
    size: _propTypes2.default.string,
    bgStyle: _propTypes2.default.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      languages: null,
      headerMode: 'all',
      bodyMode: 'all',
      displayedLanguages: null,
      defaultLanguage: null,
      size: 'm',
      bgStyle: undefined
    };
  },

  // @@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      languages: this._getFilteredLanguages(this.props)
    };
  },
  componentWillMount: function componentWillMount() {
    if (!this.state.languages[this.state.language]) {
      var newLang = UU5.Common.Tools.getLsiKey(this.state.languages, null, null, this.props.defaultLanguage);
      this.setState({ language: newLang });
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      var newLanguage = this.state.language;
      var languages = typeof nextProps.displayedLanguages === "string" ? nextProps.displayedLanguages.replace(this.getDefault().regexpSpace, '').split(',') : nextProps.displayedLanguages;
      if (languages && languages.indexOf(this.state.language) === -1) {
        newLanguage = languages[0];
      }
      this.setState({
        language: newLanguage,
        languages: this._getFilteredLanguages(nextProps)
      });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  onChangeLanguage_: function onChangeLanguage_(language) {
    if (this.state.languages[language]) {
      this.setState({ language: language });
    }
    return this;
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getFilteredLanguages: function _getFilteredLanguages(props) {
    var languages = props.languages || UU5.Environment.languageList;
    var result = void 0;
    if (props.displayedLanguages) {
      var displayedLanguages = typeof props.displayedLanguages === 'string' ? props.displayedLanguages.replace(this.getDefault().regexpSpace, '').split(',') : props.displayedLanguages;

      result = result || {};
      var languagesCodes = Object.keys(languages);
      displayedLanguages.forEach(function (key) {
        if (languagesCodes.indexOf(key) > -1) {
          result[key] = languages[key];
        }
      });
    }
    return result || languages;
  },
  _getFlag: function _getFlag(language) {
    return _react2.default.createElement('img', { src: this.state.languages[language].flag, className: this.getClassName().flag });
  },
  _getLabel: function _getLabel(languageDescription) {
    return _react2.default.createElement(_span2.default, { content: languageDescription, className: this.getClassName().label });
  },
  _getCode: function _getCode(languageCode) {
    return _react2.default.createElement(_span2.default, { content: languageCode, className: this.getClassName('codeText') });
  },
  _getLabelCode: function _getLabelCode(languageCode, languageDescription) {
    return _react2.default.createElement(
      _span2.default,
      null,
      _react2.default.createElement(_span2.default, { content: languageDescription, className: this.getClassName('label') }),
      _react2.default.createElement(_span2.default, { content: languageCode, className: this.getClassName('labelCodeText') })
    );
  },
  _getItemContent: function _getItemContent(language, languageDescription) {
    return [this._getFlag(language), _react2.default.createElement(_span2.default, { content: languageDescription, className: this.getClassName().text })];
  },
  _getItems: function _getItems() {
    var _this = this;

    var this_ = this;
    var items = [];
    var className = void 0;
    if (this.props.bodyMode === 'all') className = this.getClassName('left');else if (this.props.bodyMode === 'label-code') className = this.getClassName('code');

    Object.keys(this.state.languages).forEach(function (key, i) {
      var cls = className;
      if (key === this_.state.language) {
        cls += ' ' + _this.getClassName('selected');
      }
      items.push(_react2.default.createElement(_dropdownItem2.default, { label: this_._getModalItem(key), key: i, className: cls, onClick: function onClick() {
          this_._setGlobalLanguage(key);
        } }));
    });
    return items;
  },
  _openModal: function _openModal() {
    this.modal.open({ content: this._getModalContent(this.state.language) });
    return this;
  },
  _setGlobalLanguage: function _setGlobalLanguage(language) {
    UU5.Common.Tools.setLanguage(language);
    this.modal && this.modal.close();
  },
  _getModalContent: function _getModalContent(language) {
    var _this2 = this;

    var content = [];
    var this_ = this;
    var className = this.getClassName().modalButton;
    if (this.props.bodyMode === 'all' || this.props.bodyMode === 'label-code') {
      className += ' ' + this.getClassName().spaceBetween;
    }
    Object.keys(this.state.languages).forEach(function (key, i) {
      content.push(_react2.default.createElement(_button2.default, { content: this_._getModalItem(key), key: i, onClick: function onClick() {
          this_._setGlobalLanguage(key);
        }, className: className, selected: this_.state.language === key, displayBlock: true, bgStyle: _this2.props.bgStyle || 'transparent' }));
    });
    return content;
  },
  _getModalItem: function _getModalItem(key) {
    var item;
    switch (this.props.bodyMode) {
      case 'all':
        item = this._getItemContent(key, this.state.languages[key].language);
        break;
      case 'flag':
        item = this._getFlag(key);
        break;
      case 'label':
        item = this._getLabel(this.state.languages[key].language);
        break;
      case 'code':
        item = this._getCode(key);
        break;
      case 'label-code':
        item = this._getLabelCode(key, this.state.languages[key].language);
        break;
    }
    return item;
  },
  _getContent: function _getContent(mode) {
    var content;
    switch (mode) {
      case 'all':
        content = this._getItemContent(this.state.language, this.state.languages[this.state.language].language);
        break;
      case 'flag':
        content = this._getFlag(this.state.language);
        break;
      case 'label':
        content = this._getLabel(this.state.languages[this.state.language].language);
        break;
      case 'code':
        content = this._getCode(this.state.language);
        break;
      case 'label-code':
        content = this._getLabelCode(this.state.language, this.state.languages[this.state.language].language);
        break;
    }
    return content;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var result;
    // if (this.isXs()) {
    //   result = (
    //     <span {...this.getMainAttrs()}>
    //       <Button
    //         className={this.getClassName().button}
    //         content={this._getContent(this.props.headerMode)}
    //         disabled={this.isDisabled()}
    //         hidden={this.isHidden()}
    //         onClick={this._openModal}
    //         size={this.props.size}
    //         bgStyle={this.props.bgStyle || 'transparent'}
    //       />
    //       <Modal header='&nbsp;' ref_={(modal) => this.modal = modal} />
    //     </span>
    //   );
    // } else {
    result = _react2.default.createElement(
      _dropdown2.default,
      _extends({}, this.getMainPropsToPass(), { label: this._getContent(this.props.headerMode), size: this.props.size, bgStyle: this.props.bgStyle || 'transparent' }),
      this._getItems(),
      this.getDisabledCover()
    );
    // }
    return this.getNestingLevel() ? result : null;
  }
  //@@viewOff:render

});

exports.default = LanguageSelector;