'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateTime = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require('./date-time.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DateTime = exports.DateTime = (0, _createReactClass2.default)({
  displayName: 'DateTime',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("DateTime"),
    nestingLevel: 'inline',
    classNames: {
      main: _bricksNs2.default.css("date-time"),
      timeOnly: _bricksNs2.default.css("date-time-timeonly"),
      dateOnly: _bricksNs2.default.css("date-time-dateonly")
    },
    defaults: {
      event: UU5.Common.Tools.events.dateTime,
      regexpSeconds: /:[S]+/,
      regexpSeconds2: /[S]+/
    },
    warnings: {
      rangeTimeZone: 'Time zone must be in range from -12 to +12. Your time zone was %s.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]),
    format: _propTypes2.default.string,
    country: _propTypes2.default.string,
    timeZone: _propTypes2.default.number,
    onChange: _propTypes2.default.func,
    dateOnly: _propTypes2.default.bool,
    timeOnly: _propTypes2.default.bool,
    secondsDisabled: _propTypes2.default.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      value: null,
      format: null,
      country: null,
      timeZone: null,
      onChange: null,
      dateOnly: false,
      timeOnly: false,
      secondsDisabled: false
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      format: this.props.format,
      country: this.props.country,
      timeZone: this._validateTimeZone(this.props.timeZone || UU5.Environment.dateTimeZone)
    };
  },
  componentDidMount: function componentDidMount() {
    UU5.Environment.EventListener.registerDateTime(this.getId(), this._change);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        format: nextProps.format,
        country: nextProps.country,
        timeZone: this._validateTimeZone(nextProps.timeZone)
      });
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    UU5.Environment.EventListener.unregisterDateTime(this.getId(), this._change);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getFormat: function getFormat() {
    return this.state.format;
  },
  setFormat: function setFormat(format, setStateCallback) {
    this.setOptions({ format: format }, setStateCallback);
    return this;
  },
  getCountry: function getCountry() {
    return this.state.country;
  },
  setCountry: function setCountry(country, setStateCallback) {
    this.setOptions({ country: country ? country.toLowerCase() : country }, setStateCallback);
    return this;
  },
  getTimeZone: function getTimeZone() {
    return this.state.timeZone === null ? this._validateTimeZone(UU5.Environment.dateTimeZone) : this.state.timeZone;
  },
  setTimeZone: function setTimeZone(timeZone, setStateCallback) {
    this.setOptions({ timeZone: timeZone }, setStateCallback);
    return this;
  },
  setOptions: function setOptions(opt, setStateCallback) {
    this.setState({
      format: opt.format === undefined ? this.state.format : opt.format,
      country: opt.country === undefined ? this.state.country : opt.country ? opt.country.toLowerCase() : opt.country,
      timeZone: opt.timeZone === undefined ? this.state.timeZone : this._validateTimeZone(opt.timeZone)
    }, setStateCallback);
    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _change: function _change(opt) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange(this, opt);
    } else {
      this.setOptions(opt);
    }
    return this;
  },
  _formatDateByCountry: function _formatDateByCountry(date, country) {
    var result = void 0;
    if (UU5.Environment.dateTimeFormat[country]) {
      result = this._formatDateTime(date, UU5.Environment.dateTimeFormat[country]);
    } else {
      result = this._getLocalDateTime(date, country);
    }
    return result;
  },
  _formatDateTime: function _formatDateTime(date, format) {
    if (this.props.secondsDisabled && format) {
      format = format.replace(this.getDefault().regexpSeconds, '').replace(this.getDefault().regexpSeconds2, '');
    }
    return UU5.Common.Tools.formatDate(date, format, this.state.timeZone);
  },
  _getLocalDateTime: function _getLocalDateTime(date, country) {
    country = country || [];
    var result = void 0,
        opt = void 0;

    if (this.props.secondsDisabled) {
      opt = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' };
    }

    if (this.props.dateOnly) {
      result = UU5.Common.Tools.toLocaleDateString(date, country, opt);
    } else if (this.props.timeOnly) {
      result = UU5.Common.Tools.toLocaleTimeString(date, country, opt);
    } else {
      result = UU5.Common.Tools.toLocaleString(date, country, opt);
    }

    return result;
  },
  _formatDate: function _formatDate(date) {
    var result = null;
    var utc = new Date(date.getTime() + date.getTimezoneOffset() * 60000);
    var newDate = new Date(utc.getTime() + this.state.timeZone * 60 * 60000);

    if (this.state.format) {
      result = this._formatDateTime(newDate, this.state.format);
    } else if (this.state.country) {
      result = this._formatDateByCountry(newDate, this.state.country);
    } else {
      result = this._getLocalDateTime(newDate);
    }

    return result;
  },
  _validateTimeZone: function _validateTimeZone(timeZone) {
    if (timeZone < -12) {
      this.showWarning('rangeTimeZone', timeZone);
      timeZone = -12;
    } else if (timeZone > 12) {
      this.showWarning('rangeTimeZone', timeZone);
      timeZone = 12;
    }
    return timeZone;
  },
  _buildMainAttrs: function _buildMainAttrs() {
    var mainAttrs = this.getMainAttrs();

    if (this.props.timeOnly) {
      mainAttrs.className += ' ' + this.getClassName().timeOnly;
    } else if (this.props.dateOnly) {
      mainAttrs.className += ' ' + this.getClassName().dateOnly;
    }

    return mainAttrs;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var result = void 0;

    if (this.getNestingLevel()) {
      var value = typeof this.props.value === 'string' ? new Date(Date.parse(this.props.value)) : this.props.value || new Date();
      result = _react2.default.createElement(
        'span',
        this._buildMainAttrs(),
        this._formatDate(value),
        this.getDisabledCover()
      );
    }

    return result;
  }
  //@@viewOff:render
});

exports.default = DateTime;