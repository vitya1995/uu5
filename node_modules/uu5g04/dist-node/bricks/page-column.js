'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageColumn = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _button = require('../bricks/button.js');

var _button2 = _interopRequireDefault(_button);

var _icon = require('./icon.js');

var _icon2 = _interopRequireDefault(_icon);

var _column = require('../bricks/column.js');

var _column2 = _interopRequireDefault(_column);

var _backdrop = require('../bricks/backdrop.js');

var _backdrop2 = _interopRequireDefault(_backdrop);

require('./page-column.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PageColumn = exports.PageColumn = (0, _createReactClass2.default)({
  displayName: 'PageColumn',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Page.Column"),
    classNames: {
      main: _bricksNs2.default.css("page-column"),
      backdrop: _bricksNs2.default.css("page-column-backdrop"),
      wrapper: _bricksNs2.default.css("page-column-wrapper"),
      float: _bricksNs2.default.css("page-column-float"),
      buttonWrapper: _bricksNs2.default.css("page-column-button-wrapper"),
      buttonOpen: _bricksNs2.default.css("page-column-button-open"),
      buttonClose: _bricksNs2.default.css("page-column-button-close"),
      open: _bricksNs2.default.css("page-column-open"),
      elevation: 'uu5-elevation-',
      zIndex: _bricksNs2.default.css("page-z-index-")
    },
    errors: {
      invalidParent: 'Parent of this component is not Page.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    minWidth: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    maxWidth: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    right: _propTypes2.default.bool,
    button: _propTypes2.default.bool,
    open: _propTypes2.default.bool,
    block: _propTypes2.default.bool,
    openContent: _propTypes2.default.any,
    closedContent: _propTypes2.default.any,
    elevation: _propTypes2.default.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      width: null,
      minWidth: null,
      maxWidth: null,
      right: false,
      button: false,
      open: false,
      block: false,
      openContent: null,
      closedContent: null,
      elevation: 0
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      open: this.props.block || this.props.open
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ open: nextProps.block || nextProps.open });
    }
    UU5.Environment.EventListener.triggerEvent('pageColumn', this.props.right ? 'right' : 'left', nextProps.minWidth || nextProps.maxWidth);
  },
  componentWillMount: function componentWillMount() {
    if (!this.getParentByType('isPage')) {
      this.showError("invalidParent");
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isFloat: function isFloat() {
    return this.props.minWidth || this.props.maxWidth;
  },
  open: function open(setStateCallback) {
    !this.props.block && this.setState({ open: true }, setStateCallback);
    return this;
  },
  close: function close(setStateCallback) {
    !this.props.block && this.setState({ open: false }, setStateCallback);
    return this;
  },
  toggle: function toggle(setStateCallback) {
    !this.props.block && this.setState(function (state) {
      return { open: !state.open };
    }, setStateCallback);
    return this;
  },
  isOpen: function isOpen() {
    return this.state.open;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers

  _getWrapperProps: function _getWrapperProps() {
    var width = this.props.width;
    var visibility = 'hidden';

    if (this.props.minWidth && this.props.maxWidth) {
      visibility = 'visible';
      if (this.isOpen()) {
        width = this.props.maxWidth;
      } else {
        width = this.props.minWidth;
      }
    } else {
      if (this.props.maxWidth && !this.isOpen() || this.isOpen()) {
        width = this.props.width;
        visibility = 'visible';
      }
    }

    return {
      className: this.getClassName('wrapper'),
      style: {
        width: width,
        right: this.props.right ? 0 : 'auto',
        visibility: visibility
        //position: this.isOpen() ? 'absolute' : 'relative'
      }
    };
  },


  _getMainProps: function _getMainProps() {
    var props = this.getMainPropsToPass();

    props.id = this.getId();
    props.pureRender = true;

    //props.width = this.props.width;

    if (this.state.open) {
      props.className += ' ' + this.getClassName().open;
    }

    props.className += ' ' + this.getClassName('elevation') + this.props.elevation;

    if (this.props.elevation) {
      props.className += ' ' + this.getClassName('zIndex') + this.props.elevation;
    }

    if (!this.props.block) {
      props.className += ' ' + this.getClassName().float;
      if (this.props.maxWidth && !this.state.open) {
        var ratio = 100 / (parseInt(this.props.maxWidth) / parseInt(this.props.minWidth));
        var transform = this.props.right ? 'translateX(' + (100 - ratio) + '%)' : 'translateX(' + (ratio - 100) + '%)';
        props.style = props.style || {};
        props.style.transform = transform;

        if (this.props.minWidth && this.props.maxWidth) {
          props.style.transform = 'none';
        }
      }
    }

    return props;
  },

  _getBackdropProps: function _getBackdropProps() {
    var _this = this;

    var backdropId = this.getId() + '-backdrop';

    return {
      className: this.getClassName('backdrop'),
      hidden: !this.isOpen(),
      id: backdropId,
      onClick: function onClick(backdrop, event) {
        event.target.id === backdropId && _this.close();
      }
    };
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var left = _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_button2.default, { content: _react2.default.createElement(_icon2.default, { icon: 'mdi-close' }), onClick: this.close, className: this.getClassName().buttonClose }),
      _react2.default.createElement(_button2.default, { content: _react2.default.createElement(_icon2.default, { icon: 'mdi-menu' }), onClick: this.open, className: this.getClassName().buttonOpen })
    );
    var right = _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_button2.default, { content: _react2.default.createElement(_icon2.default, { icon: 'mdi-menu' }), onClick: this.open, className: this.getClassName().buttonOpen }),
      _react2.default.createElement(_button2.default, { content: _react2.default.createElement(_icon2.default, { icon: 'mdi-close' }), onClick: this.close, className: this.getClassName().buttonClose })
    );

    var content = void 0;
    if (this.props.openContent && this.props.closedContent) {
      content = this.props.block || this.state.open ? this.props.openContent : this.props.closedContent;
      switch (typeof content === 'undefined' ? 'undefined' : _typeof(content)) {
        case 'number':
          // content = content;
          break;
        case 'string':
          if (UU5.Common.Tools.isUU5String(content)) {
            content = UU5.Common.Tools.getChildrenFromUu5String(content);
          }
          break;
        default:
          content = _react2.default.cloneElement(content, { open: this.state.open, block: this.props.block });
      }
    }

    var result = _react2.default.createElement(
      _column2.default,
      _extends({}, this._getMainProps(), { width: this.props.width }),
      content,
      _react2.default.createElement(
        'div',
        { className: this.getClassName().buttonWrapper },
        this.props.button && (this.props.right ? right : left)
      )
    );

    if (!this.props.block) {
      result = _react2.default.createElement(
        'div',
        this._getWrapperProps(),
        _react2.default.createElement(_backdrop2.default, _extends({}, this._getBackdropProps(), { style: { zIndex: this.props.elevation } })),
        _react2.default.createElement(
          _column2.default,
          this._getMainProps(),
          content,
          _react2.default.createElement(
            'div',
            { className: this.getClassName().buttonWrapper },
            this.props.button && (this.props.right ? right : left)
          )
        )
      );
    }

    return result;
  }
  //@@viewOff:render
});

exports.default = PageColumn;