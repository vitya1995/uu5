'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _button = require('./button.js');

var _button2 = _interopRequireDefault(_button);

var _tabsItem = require('./tabs-item');

var _tabsItem2 = _interopRequireDefault(_tabsItem);

require('./tabs.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Tabs = exports.Tabs = (0, _createReactClass2.default)({
  displayName: 'Tabs',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin, UU5.Common.ContentMixin, UU5.Common.ScreenSizeMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Tabs"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'smallBox'),
    classNames: {
      main: _bricksNs2.default.css("tabs"),
      ul: _bricksNs2.default.css("tabs-list", "tabs-list-"),
      pills: _bricksNs2.default.css("tabs-list-pills"),
      justified: _bricksNs2.default.css("tabs-list-justified"),
      stacked: _bricksNs2.default.css("tabs-list-stacked"),
      content: _bricksNs2.default.css("tabs-list-content"),
      size: _bricksNs2.default.css("tabs-list-size-"),
      active: _bricksNs2.default.css("tabs-list-active")
    },
    defaults: {
      childTagName: 'UU5.Bricks.Tabs.Item'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    type: _propTypes2.default.oneOf(['tabs', 'pills']),
    stacked: _propTypes2.default.bool,
    justified: _propTypes2.default.bool,
    fade: _propTypes2.default.bool,
    activeName: _propTypes2.default.string,
    allowTags: _propTypes2.default.arrayOf(_propTypes2.default.string),
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      type: 'tabs',
      stacked: false,
      justified: false,
      fade: false,
      activeName: null,
      allowTags: [],
      size: 'm'
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      activeName: this.props.activeName,
      stacked: this._isStacked(this.getScreenSize())
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        activeName: nextProps.activeName,
        stacked: this._isStacked(this.getScreenSize(), nextProps)
      });
    }
  },


  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isTabs: function isTabs() {
    return true;
  },
  setActive: function setActive(name) {
    this.setState({ activeName: name });
    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function shouldChildRender_(child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },
  expandChildProps_: function expandChildProps_(child, childIndex) {
    var newChildProps = UU5.Common.Tools.merge({}, child.props);
    newChildProps.id = newChildProps.name || newChildProps.id || this.getId() + '-' + childIndex;

    var active = false;
    if (!this.state.activeName) {
      if (childIndex === 0) {
        active = true;
      }
    } else if (newChildProps.id === this.state.activeName) {
      active = true;
    }

    newChildProps._active = active;
    newChildProps._fade = this.props.fade;

    return newChildProps;
  },
  onChangeScreenSize_: function onChangeScreenSize_(actualScreenSize, e) {
    this.setState({
      screenSize: actualScreenSize,
      stacked: this._isStacked(actualScreenSize)
    });
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _isStacked: function _isStacked(actualScreenSize, props) {
    props = props || this.props;
    return actualScreenSize === 'xs' ? true : props.stacked;
  },
  _getItems: function _getItems() {
    var _this = this;

    var children = this.getChildren();
    var bgStyle = this.props.type === "pills" || this.state.stacked && this.props.justified ? 'filled' : 'transparent';

    var items = children.map(function (tab, i) {
      var activeItem = _react2.default.createElement(
        'li',
        { key: i, className: _this.getClassName("active") },
        _react2.default.createElement(
          _button2.default,
          { bgStyle: bgStyle, size: _this.props.size },
          tab.props.header
        )
      );

      if (!_this.state.activeName) {
        if (i === 0) {
          return activeItem;
        }
      } else if ((tab.props.name || tab.props.id) === _this.state.activeName) {
        return activeItem;
      }

      return _react2.default.createElement(
        'li',
        { key: i },
        _react2.default.createElement(
          _button2.default,
          { bgStyle: bgStyle, size: _this.props.size, onClick: function onClick() {
              return _this.setState({ activeName: tab.props.name || tab.props.id });
            } },
          tab.props.header
        )
      );
    });

    return { items: items, children: children };
  },
  _buildUlAttributes: function _buildUlAttributes() {
    var ulClassName = this.getClassName().ul;

    if (this.state.stacked && (this.props.justified || this.props.type === 'pills')) {
      ulClassName += 'pills ' + this.getClassName('stacked');
    } else if (this.state.stacked && this.props.type !== 'pills') {
      ulClassName += 'tabs ' + this.getClassName('stacked');
    } else {
      ulClassName += this.props.type;
    }

    this.props.justified && (ulClassName += ' ' + this.getClassName().justified);
    return ulClassName;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    var _getItems2 = this._getItems(),
        items = _getItems2.items,
        children = _getItems2.children;

    var mainAttrs = this.getMainAttrs();
    mainAttrs.className += ' ' + this.getClassName('size') + this.props.size;

    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      mainAttrs,
      _react2.default.createElement(
        'ul',
        { className: this._buildUlAttributes() },
        items
      ),
      _react2.default.createElement(
        'div',
        { className: this.getClassName().content },
        children
      )
    ) : null;
  }
  //@@viewOff:render

});

Tabs.Item = _tabsItem2.default;
exports.default = Tabs;