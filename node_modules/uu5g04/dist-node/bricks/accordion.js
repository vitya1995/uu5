'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordion = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _panel = require('./panel.js');

var _panel2 = _interopRequireDefault(_panel);

require('./accordion.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Accordion = exports.Accordion = (0, _createReactClass2.default)({
  displayName: 'Accordion',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin, UU5.Common.ContentMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name('Accordion'),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css('accordion')
    },
    defaults: {
      childTagName: 'UU5.Bricks.Panel'
    },
    warnings: {
      unsupportedType: 'Type %s of parameter %s is not supported. Allowed types are: %s.'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    panels: _propTypes2.default.arrayOf(_propTypes2.default.object),
    onClickNotCollapseOthers: _propTypes2.default.bool,
    iconExpanded: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
    iconCollapsed: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
    onClick: _propTypes2.default.func,
    allowTags: _propTypes2.default.arrayOf(_propTypes2.default.string),
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      panels: null,
      iconExpanded: null,
      iconCollapsed: null,
      onClickNotCollapseOthers: false,
      onClick: null,
      allowTags: [],
      size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getPanelById: function getPanelById(panelId) {
    return this.getRenderedChildById(panelId);
  },

  getPanelByName: function getPanelByName(panelName) {
    return this.getRenderedChildByName(panelName);
  },

  getPanels: function getPanels() {
    return this.getRenderedChildren();
  },

  eachPanel: function eachPanel(callback) {
    var panels = this.getPanels();
    for (var i = 0; i < panels.length; i++) {
      var result = callback(panels[i], i);
      if (result === false) {
        break;
      }
    }
    return this;
  },

  eachPanelByIds: function eachPanelByIds(ids, callback) {
    for (var i = 0; i < ids.length; i++) {
      var result = callback(this.getPanelById(ids[i]), i);
      if (result === false) {
        break;
      }
    }
    return this;
  },

  eachPanelByNames: function eachPanelByNames(names, callback) {
    for (var i = 0; i < names.length; i++) {
      var result = callback(this.getPanelByName(names[i]), i);
      if (result === false) {
        break;
      }
    }
    return this;
  },

  expandPanelById: function expandPanelById(panelId, setStateCallback) {
    this._eachPanelByIdWithCallback(panelId, setStateCallback, function (panel, i, newSetStateCallback) {
      panel.expand(newSetStateCallback);
    });
    return this;
  },

  expandPanelByName: function expandPanelByName(panelName, setStateCallback) {
    this._eachPanelByNameWithCallback(panelName, setStateCallback, function (panel, i, newSetStateCallback) {
      panel.expand(newSetStateCallback);
    });
    return this;
  },

  collapsePanelById: function collapsePanelById(panelId, setStateCallback) {
    this._eachPanelByIdWithCallback(panelId, setStateCallback, function (panel, i, newSetStateCallback) {
      panel.collapse(newSetStateCallback);
    });
    return this;
  },

  collapsePanelByName: function collapsePanelByName(panelName, setStateCallback) {
    this._eachPanelByNameWithCallback(panelName, setStateCallback, function (panel, i, newSetStateCallback) {
      panel.collapse(newSetStateCallback);
    });
    return this;
  },

  togglePanelById: function togglePanelById(panelId, setStateCallback) {
    this._eachPanelByIdWithCallback(panelId, setStateCallback, function (panel, i, newSetStateCallback) {
      panel.toggle(newSetStateCallback);
    });
    return this;
  },

  togglePanelByName: function togglePanelByName(panelName, setStateCallback) {
    this._eachPanelByNameWithCallback(panelName, setStateCallback, function (panel, i, newSetStateCallback) {
      panel.toggle(newSetStateCallback);
    });
    return this;
  },

  expandAll: function expandAll(setStateCallback) {
    this._eachPanelWithCallback(setStateCallback, function (panel, i, newSetStateCallback) {
      panel.expand(newSetStateCallback);
    });
    return this;
  },

  collapseAll: function collapseAll(setStateCallback) {
    this._eachPanelWithCallback(setStateCallback, function (panel, i, newSetStateCallback) {
      panel.collapse(newSetStateCallback);
    });
    return this;
  },

  toggleAll: function toggleAll(setStateCallback) {
    this._eachPanelWithCallback(setStateCallback, function (panel, i, newSetStateCallback) {
      panel.toggle(newSetStateCallback);
    });
    return this;
  },

  shouldCollapseOthers: function shouldCollapseOthers() {
    return !this.props.onClickNotCollapseOthers;
  },

  collapseOthers: function collapseOthers(panelId, setStateCallback) {
    var panels = this.getPanels();

    var counter = 0;
    panels.forEach(function (panel) {
      panel.getId() !== panelId && panel.isExpandable() && counter++;
    });

    var newSetStateCallback = UU5.Common.Tools.buildCounterCallback(setStateCallback, counter);

    panels.forEach(function (panel) {
      panel.getId() !== panelId && panel.isExpandable() && panel.collapse(newSetStateCallback);
    });

    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function shouldChildRender_(child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_: function expandChildProps_(child, i) {
    var _this = this;

    var newChildProps = UU5.Common.Tools.mergeDeep({}, child.props);
    var onClick = newChildProps.onClick || this.props.onClick;

    newChildProps.onClick = this.shouldCollapseOthers() ? function (panel) {
      panel && panel.isExpanded() ? _this.collapseOthers(panel.getId(), function () {
        return onClick && onClick(panel);
      }) : child.props.onClick ? child.props.onClick(panel) : _this.props.onClick ? _this.props.onClick(panel) : null;
    } : child.props.onClick || this.props.onClick;
    newChildProps.iconExpanded = newChildProps.iconExpanded || this.props.iconExpanded;
    newChildProps.iconCollapsed = newChildProps.iconCollapsed || this.props.iconCollapsed;
    newChildProps.colorSchema = newChildProps.colorSchema || this.props.colorSchema;
    newChildProps.size = this.props.size;

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getValuesAsArray: function _getValuesAsArray(value, name) {
    var values = [];

    if (typeof value === 'string') {
      values = [value];
    } else if (Array.isArray(value)) {
      values = value;
    } else {
      this.showWarning('unsupportedType', [typeof value === 'undefined' ? 'undefined' : _typeof(value), name, 'string, array']);
    }

    return values;
  },

  _eachPanelWithCallback: function _eachPanelWithCallback(setStateCallback, callback) {
    var panels = this.getPanels();
    var newSetStateCallback = UU5.Common.Tools.buildCounterCallback(setStateCallback, panels.length);

    for (var i = 0; i < panels.length; i++) {
      var result = callback(panels[i], i, newSetStateCallback);
      if (result === false) {
        break;
      }
    }

    return this;
  },

  _eachPanelByIdWithCallback: function _eachPanelByIdWithCallback(panelId, setStateCallback, callback) {
    var ids = this._getValuesAsArray(panelId, 'panelId');
    var newSetStateCallback = UU5.Common.Tools.buildCounterCallback(setStateCallback, ids.length);

    this.eachPanelByIds(ids, function (panel, i) {
      return callback(panel, i, newSetStateCallback);
    });

    return this;
  },

  _eachPanelByNameWithCallback: function _eachPanelByNameWithCallback(panelName, setStateCallback, callback) {
    var names = this._getValuesAsArray(panelName, 'panelName');
    var newSetStateCallback = UU5.Common.Tools.buildCounterCallback(setStateCallback, names.length);

    this.eachPanelByNames(names, function (panel, i) {
      return callback(panel, i, newSetStateCallback);
    });

    return this;
  },
  //@@viewOff:componentSpecificHelpers

  //Render
  _buildChildren: function _buildChildren() {
    var childrenProps = {};
    if (this.props.panels) {
      childrenProps.content = { tag: this.getDefault().childTagName, propsArray: this.props.panels };
    } else if (this.getContent()) {
      childrenProps.content = this.getContent();
    } else if (this.props.children) {
      childrenProps.children = this.props.children;
    } else {
      childrenProps.content = _react2.default.createElement(_panel2.default, null);
    }

    return this.buildChildren(childrenProps);
  },

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      this.getMainAttrs(),
      this._buildChildren(),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render
});

exports.default = Accordion;