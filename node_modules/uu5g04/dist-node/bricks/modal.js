'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modal = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

var _modalHeader = require('./modal-header.js');

var _modalHeader2 = _interopRequireDefault(_modalHeader);

var _modalBody = require('./modal-body.js');

var _modalBody2 = _interopRequireDefault(_modalBody);

var _modalFooter = require('./modal-footer.js');

var _modalFooter2 = _interopRequireDefault(_modalFooter);

require('./modal.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Modal = exports.Modal = (0, _createReactClass2.default)({
  displayName: 'Modal',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.SectionMixin, UU5.Common.NestingLevelMixin, UU5.Common.CcrReaderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Modal"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: _bricksNs2.default.css("modal"),
      dialog: _bricksNs2.default.css("modal-dialog", "modal-"),
      isFooter: _bricksNs2.default.css("modal-isfooter")
    },
    defaults: {
      header: 'noHeader',
      body: 'noBody',
      animationDuration: 150, // ms
      closeTypes: {
        closedButton: 'closedButton',
        blur: 'blur',
        ifc: 'interface'
      }
    },
    opt: {
      nestingLevelRoot: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    size: _propTypes2.default.oneOf(['s', 'm', 'l']),
    shown: _propTypes2.default.bool,
    sticky: _propTypes2.default.bool,
    stickyBackground: _propTypes2.default.bool,
    scrollableBackground: _propTypes2.default.bool,
    forceRender: _propTypes2.default.bool,
    onClose: _propTypes2.default.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      size: 'm',
      shown: false,
      sticky: false,
      stickyBackground: false,
      scrollableBackground: false,
      forceRender: false,
      onClose: null
    };
  },
  getInitialState: function getInitialState() {
    return {
      header: this.getHeader(),
      content: this.getContent() || this.props.children,
      footer: this.getFooter(),
      className: null,
      size: this.props.size,
      sticky: this.props.sticky,
      stickyBackground: this.props.stickyBackground,
      scrollableBackground: this.props.scrollableBackground,
      onClose: this.props.onClose
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function componentWillMount() {
    this.props.shown ? this.open() : this.hide();
  },
  componentDidMount: function componentDidMount() {
    if (!this.isSticky()) {
      UU5.Environment.EventListener.addWindowEvent('keyup', this.getId(), this._onCloseESC);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState(function (state) {
        var newState = {};

        if (nextProps.shown && state.hidden) {
          newState.hidden = false;
        } else if (!nextProps.shown && !state.hidden) {
          newState.hidden = true;
        }

        newState.header = nextProps.header;
        newState.footer = nextProps.footer;
        newState.content = nextProps.content || nextProps.children || this.state.content;
        newState.size = nextProps.size;
        newState.sticky = nextProps.sticky;
        newState.stickyBackground = nextProps.stickyBackground;
        newState.scrollableBackground = nextProps.scrollableBackground;
        newState.onClose = nextProps.onClose;

        return newState;
      });
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    UU5.Environment.EventListener.removeWindowEvent('keyup', this.getId(), this._onCloseESC);
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isModal: function isModal() {
    return true;
  },


  open: function open(openProps, setStateCallback) {
    var page = this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE);
    if (!this.props.forceRender && page && page.getModal() && page.getModal().getId() !== this.getId()) {
      var centralModal = page.getModal();
      var newProps = UU5.Common.Tools.merge(this.props, openProps);
      centralModal.open(newProps, setStateCallback);
    } else {
      var newState = {
        hidden: false
      };

      openProps = openProps || {};
      newState.header = openProps.header === undefined ? this.props.header : openProps.header;
      newState.footer = openProps.footer === undefined ? this.props.footer : openProps.footer;
      newState.content = openProps.content === undefined ? this.getContent() || this.props.children : openProps.content;
      newState.className = openProps.className === undefined ? this.props.className : openProps.className;
      newState.size = openProps.size === undefined ? this.props.size : openProps.size;
      newState.sticky = openProps.sticky === undefined ? this.props.sticky : openProps.sticky;
      newState.stickyBackground = openProps.stickyBackground === undefined ? this.props.stickyBackground : openProps.stickyBackground;
      newState.scrollableBackground = openProps.scrollableBackground === undefined ? this.props.scrollableBackground : openProps.scrollableBackground;
      newState.onClose = openProps.onClose === undefined ? this.props.onClose : openProps.onClose;

      this._stopScroll(newState.scrollableBackground);
      this.setState(newState, setStateCallback);
    }
    return this;
  },

  close: function close(shouldOnClose, setStateCallback) {
    var page = this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE);

    if (!this.props.forceRender && page && page.getModal() && page.getModal().getId() !== this.getId()) {
      var centralModal = page.getModal();
      centralModal.close(shouldOnClose, setStateCallback);
    } else if (typeof this.state.onClose === 'function' && shouldOnClose !== false) {
      this.state.onClose({ component: this, closeType: this.getDefault().closeTypes.ifc, callback: setStateCallback });
    } else {
      this._close(setStateCallback);
    }
    return this;
  },

  toggle: function toggle(setStateCallback) {
    var modal = this;
    this.setState(function (state) {
      state.hidden ? modal._stopScroll(state.scrollableBackground) : modal._startScroll();
      return { hidden: !state.hidden };
    }, setStateCallback);
    return this;
  },
  isSticky: function isSticky() {
    return this.state.sticky;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  buildHeaderChild_: function buildHeaderChild_(headerTypes) {
    var headerType = this.getHeaderType(headerTypes);

    var headerChild = void 0;
    if (headerType === 'contentOfStandardHeader') {
      headerChild = _react2.default.createElement(_modalHeader2.default, { content: headerTypes.header });
      headerChild = this.cloneChild(headerChild, this.expandHeaderProps(headerChild));
    }

    return headerChild;
  },
  expandHeaderProps_: function expandHeaderProps_(headerChild) {
    var extendedHeaderProps = this._extendPartProps(headerChild.props, 'header');
    if (extendedHeaderProps) {
      extendedHeaderProps._sticky = this.state.sticky;
      extendedHeaderProps._onClose = this._onCloseHandler;
    }
    return extendedHeaderProps;
  },
  buildFooterChild_: function buildFooterChild_(footerTypes) {
    var footerType = this.getFooterType(footerTypes);

    var footerChild = void 0;
    if (footerType === 'contentOfStandardFooter') {
      footerChild = _react2.default.createElement(_modalFooter2.default, { content: footerTypes.footer });
      footerChild = this.cloneChild(footerChild, this.expandFooterProps(footerChild));
    }

    return footerChild;
  },
  expandFooterProps_: function expandFooterProps_(footerChild) {
    return this._extendPartProps(footerChild.props, 'footer');
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onCloseESC: function _onCloseESC(e) {
    e.which === 27 && !this.isHidden() && !this.isSticky() && this._blur(e);
    return this;
  },
  _onBlurHandler: function _onBlurHandler(event) {
    event.target.id === this.getId() && this._blur(event);
    return this;
  },
  _onCloseHandler: function _onCloseHandler(e) {
    if (typeof this.state.onClose === 'function') {
      this.state.onClose({ component: this, event: e, closeType: this.getDefault().closeTypes.closedButton });
    } else {
      this._close();
    }
    return this;
  },
  _blur: function _blur(e) {
    if (typeof this.state.onClose === 'function') {
      this.state.onClose({ component: this, event: e, closeType: this.getDefault().closeTypes.blur });
    } else {
      this._close();
    }
    return this;
  },
  _close: function _close(callback) {
    this._startScroll();
    this.hide(callback);
    return this;
  },
  _getScrollbarWidth: function _getScrollbarWidth() {
    var width = 0;

    // if scroll bar is visible
    if (UU5.Common.Tools.getDocumentHeight() > window.innerHeight) {
      var div = document.createElement("div");
      div.style.overflow = "scroll";
      div.style.visibility = "hidden";
      div.style.position = 'absolute';
      div.style.width = '100px';
      div.style.height = '100px';

      // temporarily creates a div into DOM
      document.body.appendChild(div);
      try {
        width = div.offsetWidth - div.clientWidth;
      } finally {
        document.body.removeChild(div);
      }
    }

    return width;
  },
  _startScroll: function _startScroll() {
    var modal = this;
    // TODO: wrong, but not found better solution
    setTimeout(function () {
      if (!modal.props.scrollableBackground) {
        document.body.style.overflow = '';
        //document.documentElement.style.overflow = ''; // TODO iphone bug with scrolling
      }
      document.body.style.paddingRight = '';
      !document.body.style.length && document.body.removeAttribute("style");
    }, this.getDefault().animationDuration);
  },
  _stopScroll: function _stopScroll(scrollableBackground) {
    // TODO: wrong, but not found better solution
    if (!scrollableBackground) {
      document.body.style.overflow = 'hidden';
      //document.documentElement.style.overflow = 'hidden'; // TODO iphone bug with scrolling

      var paddingRight = this._getScrollbarWidth();
      paddingRight && (document.body.style.paddingRight = paddingRight + 'px');
    }
  },
  _getMainAttrs: function _getMainAttrs() {
    var mainAttrs = this.getMainAttrs();

    // id because of checking backdrop on click in _onBlurHandler function
    mainAttrs.id = this.getId();
    this.state.footer && (mainAttrs.className += ' ' + this.getClassName("isFooter"));
    this.state.className && (mainAttrs.className += ' ' + this.state.className);
    !this.state.sticky && !this.state.stickyBackground && (mainAttrs.onClick = this._onBlurHandler);

    var sec = this.getDefault().animationDuration / 1000 + 's';
    mainAttrs.style = mainAttrs.style || {};
    mainAttrs.style.WebkitTransitionDuration = sec;
    mainAttrs.style.MozTransitionDuration = sec;
    mainAttrs.style.OTransitionDuration = sec;
    mainAttrs.style.transitionDuration = sec;

    return mainAttrs;
  },
  _extendPartProps: function _extendPartProps(partProps, part) {
    var newProps = {};

    // default values is used if child is set as react element so null or undefined will not set!!!
    for (var key in partProps) {
      partProps[key] !== null && partProps[key] !== undefined && (newProps[key] = partProps[key]);
    }

    newProps.key = newProps.id;

    return newProps;
  },
  _extendBodyProps: function _extendBodyProps(bodyProps) {
    var id = this.getId() + '-body';

    var newProps = {
      id: id
    };

    // default values is used if child is set as react element so null or undefined will not set!!!
    for (var key in bodyProps) {
      bodyProps[key] !== null && bodyProps[key] !== undefined && (newProps[key] = bodyProps[key]);
    }

    return UU5.Common.Tools.merge(newProps, { key: newProps.id });
  },

  //@@viewOff:componentSpecificHelpers

  // Render
  _buildChildren: function _buildChildren() {
    var header = this.state.header;
    var footer = this.state.footer;
    var bodyContent = this.state.content;

    var headerChild = void 0;
    var footerChild = void 0;

    if (!bodyContent && !header) {
      header = this.getDefault().header;
      bodyContent = this.getDefault().body;
    }

    header && (headerChild = this.buildHeaderChild({ header: header }));
    footer && (footerChild = this.buildFooterChild({ footer: footer }));

    var bodyProps = this._extendBodyProps({ content: bodyContent });

    var bodyChild = void 0;

    if (bodyProps.content) {
      bodyChild = this.buildChildren({
        children: _react2.default.createElement(_modalBody2.default, bodyProps)
      });
    }

    return [headerChild, bodyChild, footerChild];
  },


  //@@viewOn:render
  render: function render() {
    // Todo uu5-size is maped to bootstrap-size
    // let size;
    // switch (this.state.size) {
    //   case 'l':
    //     size = 'lg';
    //     break;
    //   case 'm':
    //     size = 'md';
    //     break;
    //   default:
    //     size = 'sm';
    //     break;
    // }

    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      this._getMainAttrs(),
      _react2.default.createElement(
        'div',
        { className: this.getClassName().dialog + this.state.size },
        this._buildChildren()
      ),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render

});

exports.default = Modal;