'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Camera = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require('./camera.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO
// quality of picture -> jpg, png, ...
// choice of camera devices if pc has more cameras
var Camera = exports.Camera = (0, _createReactClass2.default)({
  displayName: 'Camera',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Camera"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBox', 'box'),
    classNames: {
      main: _bricksNs2.default.css("camera"),
      video: _bricksNs2.default.css("camera-video"),
      canvas: _bricksNs2.default.css("camera-canvas")
    },
    errors: {
      videoError: 'Video can not be loaded.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function componentWillMount() {
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia;

    if (navigator.getUserMedia) {
      navigator.getUserMedia({ video: true }, this._handleVideo, this._videoError);
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getScreenShot: function getScreenShot() {
    var img = null;

    if (this.localMediaStream) {
      var canvas = this.canvas;
      canvas.width = UU5.Common.Tools.getWidth(this);
      canvas.height = UU5.Common.Tools.getHeight(this);

      var ctx = canvas.getContext('2d');
      ctx.drawImage(this.video, 0, 0, UU5.Common.Tools.getWidth(this), UU5.Common.Tools.getHeight(this));
      img = canvas.toDataURL('image/png');
    }

    return img;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _handleVideo: function _handleVideo(stream) {
    var video = this.video;
    video.src = window.URL.createObjectURL(stream);
    this.localMediaStream = stream;
    return this;
  },

  _videoError: function _videoError(e) {
    this.showError('videoError', null, { context: { event: e, src: this.video.src } });
    return this;
  },

  _refVideo: function _refVideo(video) {
    this.video = video;
    return this;
  },

  _refCanvas: function _refCanvas(canvas) {
    this.canvas = canvas;
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? _react2.default.createElement(
      'div',
      this.getMainAttrs(),
      _react2.default.createElement('video', { autoPlay: 'true', ref: this._refVideo, className: this.getClassName().video }),
      _react2.default.createElement('canvas', { ref: this._refCanvas, className: this.getClassName().canvas }),
      this.getDisabledCover()
    ) : null;
  }
  //@@viewOff:render
});

exports.default = Camera;