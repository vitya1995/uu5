'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Video = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require('./video.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Video = exports.Video = (0, _createReactClass2.default)({
  displayName: 'Video',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Video"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBox', 'box'),
    classNames: {
      main: _bricksNs2.default.css("video")
    },
    errors: {
      typeNotFound: 'You have to set the type of the video or src has to contain the file extension.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    autoPlay: _propTypes2.default.bool,
    disableControls: _propTypes2.default.bool,
    loop: _propTypes2.default.bool,
    poster: _propTypes2.default.string,
    preload: _propTypes2.default.oneOf(['auto', 'metadata', 'none']),
    src: _propTypes2.default.string.isRequired,
    muted: _propTypes2.default.bool,
    type: _propTypes2.default.oneOf(['mp4', 'webm', 'ogg'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      autoPlay: false,
      disableControls: false,
      loop: false,
      poster: '',
      preload: 'auto',
      src: '',
      muted: false,
      type: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      muted: this.props.muted
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ muted: nextProps.muted });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  toggleMuted: function toggleMuted() {
    this.setState(function (state) {
      return { muted: !state.muted };
    });
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getType: function _getType() {
    var type = void 0;
    if (this.props.type) {
      type = this.props.type;
    } else {
      var match = /\.([a-zA-Z0-9]+)$/.exec(this.props.src);
      if (match) {
        type = match[1];
      } else {
        this.showError('typeNotFound');
      }
    }
    return type;
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildMainAttrs: function _buildMainAttrs() {
    var mainProps = this.getMainAttrs();

    if (this.props.autoPlay) mainProps.autoPlay = true;
    if (this.state.muted) mainProps.muted = true;
    this.props.disableControls ? mainProps.controls = false : mainProps.controls = true;
    if (this.props.loop) mainProps.loop = true;
    if (this.props.poster !== '') mainProps.poster = this.props.poster;
    if (this.props.preload !== 'auto') mainProps.preload = this.props.preload;
    mainProps.type = this._getType();
    return mainProps;
  },

  //@@viewOn:render
  render: function render() {
    return this.getNestingLevel() ? _react2.default.createElement(
      'video',
      this._buildMainAttrs(),
      _react2.default.createElement('source', { src: this.props.src })
    ) : null;
  }
  //@@viewOff:render
});

exports.default = Video;