'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uu5g = require('uu5g04');

var UU5 = _interopRequireWildcard(_uu5g);

var _bricksNs = require('./bricks-ns.js');

var _bricksNs2 = _interopRequireDefault(_bricksNs);

require('./button.less');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Button = exports.Button = (0, _createReactClass2.default)({
  displayName: 'Button',


  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin, UU5.Common.ContentMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: _bricksNs2.default.name("Button"),
    nestingLevel: 'smallBox',
    classNames: {
      main: _bricksNs2.default.css("button"),
      bgStyle: _bricksNs2.default.css("button-"),
      text: _bricksNs2.default.css("button-text"),
      block: _bricksNs2.default.css("button-block"),
      active: 'active',
      size: _bricksNs2.default.css("button-")
    },
    defaults: {
      content: 'Button'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    size: _propTypes2.default.oneOf(['s', 'm', 'l', 'xl']),
    displayBlock: _propTypes2.default.bool,
    pressed: _propTypes2.default.bool,
    bgStyle: _propTypes2.default.oneOf(['filled', 'inverted', 'transparent']),
    onClick: _propTypes2.default.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      size: 'm',
      displayBlock: false,
      pressed: false,
      bgStyle: null, // filled
      onClick: null
    };
  },

  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    return {
      pressed: this.props.pressed
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ pressed: nextProps.pressed });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  setActive: function setActive(pressed, setStateCallback) {
    this.setState({ pressed: pressed }, setStateCallback);
    return this;
  },
  press: function press(setStateCallback) {
    return this.setActive(true, setStateCallback);
  },
  pressUp: function pressUp(setStateCallback) {
    return this.setActive(false, setStateCallback);
  },
  togglePressed: function togglePressed(setStateCallback) {
    this.setState(function (state) {
      return { pressed: !state.pressed };
    }, setStateCallback);
    return this;
  },
  isPressed: function isPressed() {
    return this.state.pressed;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onClickHandler: function _onClickHandler(event) {
    this.props.onClick && this.props.onClick(this, event);
    return this;
  },

  //@@viewOff:componentSpecificHelpers

  // Render
  _buildMainAttrs: function _buildMainAttrs() {
    var mainAttrs = this.getMainAttrs();

    mainAttrs.className += ' ' + this.getClassName('size') + this.props.size + ' ' + this.getClassName().bgStyle + (this.props.bgStyle || 'filled') + (this.props.displayBlock ? ' ' + this.getClassName('block') : '') + (this.isPressed() ? ' ' + this.getClassName('active') : '');

    this.isDisabled() ? mainAttrs.disabled = true : mainAttrs.onClick = this.props.onClick && this._onClickHandler;

    mainAttrs.type = "button";

    return mainAttrs;
  },
  _getChildren: function _getChildren() {
    var _this = this;

    var children = this.getChildren() || this.getDefault().content;
    var newChildren = [];
    children = Array.isArray(children) ? children : [children];
    children.forEach(function (child, i) {
      if (typeof child === "string") {
        child = child.replace(/\n/g, "");
        if (child.length) {
          newChildren.push(_react2.default.createElement(
            'span',
            { key: i, className: _this.getClassName().text },
            child
          ));
        }
      } else if (typeof child === "number") {
        newChildren.push(_react2.default.createElement(
          'span',
          { key: i, className: _this.getClassName().text },
          child
        ));
      } else {
        newChildren.push(child);
      }
    });

    return newChildren.length > 0 ? newChildren : children;
  },


  //@@viewOn:render
  render: function render() {
    var component = void 0;
    component = _react2.default.createElement(
      'button',
      this._buildMainAttrs(),
      this._getChildren()
    );

    return this.getNestingLevel() ? component : null;
  }
  //@@viewOff:render

});

exports.default = Button;