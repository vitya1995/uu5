import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Icon from './icon.js';
import Link from './link.js';
import Button from './button.js';

import './pagination.less';

export const Pagination = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ColorSchemaMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Pagination"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'smallBox'),
    classNames: {
      main: ns.css("pagination"),
      item: ns.css("pagination-item"),
      link: ns.css("pagination-link"),
      nav: ns.css("pagination-nav"),
      size: ns.css("pagination-"),
      active: ns.css("pagination-active"),
      disabledItem: 'disabled',
      background: ns.css("pagination-background"),
      label: ns.css("pagination-label"),
      dots: ns.css("pagination-dots")
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    items: PropTypes.array,
    activeIndex: PropTypes.number,
    range: PropTypes.number,
    prevIcon: PropTypes.string,
    prevLabel: PropTypes.node,
    nextIcon: PropTypes.string,
    nextLabel: PropTypes.node,
    firstIcon: PropTypes.string,
    firstLabel: PropTypes.node,
    lastIcon: PropTypes.string,
    lastLabel: PropTypes.node,
    size: PropTypes.oneOf(['s', 'm', 'l', 'xl']),
    onChange: PropTypes.func,
    onChanged: PropTypes.func,
    background: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      items: [1, 2, 3, 4, 5],
      activeIndex: 0,
      range: 5,
      prevIcon: 'mdi-chevron-left',
      prevLabel: null,
      nextIcon: 'mdi-chevron-right',
      nextLabel: null,
      firstIcon: null,
      firstLabel: null,
      lastIcon: null,
      lastLabel: null,
      size: 'm',
      onChange: null,
      onChanged: null,
      background: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      activeIndex: this.props.activeIndex
    };
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ activeIndex: nextProps.activeIndex });
    }
    return this;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getItemsLength() {
    return this.props.items ? this.props.items.length : 0;
  },

  getActiveIndex() {
    return this.state.activeIndex;
  },

  setActiveIndex(activeIndex, setStateCallback) {
    if (activeIndex > -1 && this.getItemsLength() >= activeIndex) {
      this.setState({ activeIndex: activeIndex }, setStateCallback);
    }
    return this;
  },

  increaseActiveIndex(setStateCallback) {
    var pagination = this;
    this.setState(function (state) {
      var newState = null;
      if (pagination.getItemsLength() - 1 > state.activeIndex) {
        newState = { activeIndex: state.activeIndex + 1 };
      }
      return newState;
    }, setStateCallback);
    return this;
  },

  decreaseActiveIndex(setStateCallback) {
    this.setState(function (state) {
      var newState = null;
      if (0 < state.activeIndex) {
        newState = { activeIndex: state.activeIndex - 1 };
      }
      return newState;
    }, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs() {
    var mainAttrs = this.getMainAttrs();
    mainAttrs.className += ' ' + this.getClassName().size + this.props.size;
    this.props.background ? mainAttrs.className += ' ' + this.getClassName().background : null;
    return mainAttrs;
  },

  _range(start, end, step) {
    step = step || 1;
    var rangeArray = [start];
    while (start + step <= end) {
      rangeArray.push(start += step);
    }
    return rangeArray;
  },

  _getRange() {
    var i = this.getActiveIndex();
    var start = 0;
    var end = this.getItemsLength() - 1;
    var range = this.props.range;
    var step = Math.floor(range / 2.0);

    if (i <= start + step) {
      end = range - 1 < end ? range - 1 : end;
    } else if (i >= end - step) {
      start = end - range + 1 > 0 ? end - range + 1 : start;
    } else {
      start = i - step;
      end = i + step;
    }

    return this._range(start, end);
  },

  _onChange(newActive, link, event) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange(this, newActive, event);
    } else {
      event.preventDefault();
      var onChanged;
      if (typeof this.props.onChanged === 'function') {
        var pagination = this;
        onChanged = function () {
          pagination.props.onChanged(this, this.getActiveIndex(), newActive, event);
        };
      }

      if (newActive === "prev") {
        this.decreaseActiveIndex(onChanged);
      } else if (newActive === "next") {
        this.increaseActiveIndex(onChanged);
      } else {
        this.setActiveIndex(newActive, onChanged);
      }
    }
    return this;
  },

  _getItemValue(value) {
    var newValue = null;
    var label = this.props[value + 'Label'];
    var icon = this.props[value + 'Icon'];

    if (label) {
      // if array of nodes -> set keys
      newValue = Array.isArray(label) ? React.Children.toArray(label) : label;
      // newValue = <span className={this.getClassName().label}>{Array.isArray(label) ? React.Children.toArray(label) : label}</span>;
    } else if (icon) {
      newValue = <Icon icon={icon} />;
    }

    return newValue;
  },

  _createItem(i, value) {
    let liAttrs = { key: i, className: this.getClassName().item };
    let linkAttrs = { className: this.getClassName().link, parent: this };

    linkAttrs.nestingLevel = this.getNestingLevel();
    linkAttrs.bgStyle = this.props.background ? 'filled' : 'transparent';

    if (i === this.getActiveIndex()) {
      liAttrs.className += ' ' + this.getClassName().active;
      linkAttrs.bgStyle = 'filled';
    } else {
      linkAttrs.colorSchema = 'custom';
      linkAttrs.onClick = this._onChange.bind(null, i);
    }

    return <li {...liAttrs}>
        <Button {...linkAttrs}>{value}</Button>
      </li>;
  },

  _createNavItem(key, disabled, index) {
    let liAttrs = {
      key: key,
      className: this.getClassName().item + ' ' + this.getClassName().nav + ' ' + this.getClassName().nav + '-' + key
    };
    let linkAttrs = { className: this.getClassName().link, parent: this };
    linkAttrs.disabled = disabled;
    linkAttrs.colorSchema = 'custom';

    linkAttrs.nestingLevel = this.getNestingLevel();

    if (disabled) {
      liAttrs.className += ' ' + this.getClassName().disabledItem;
      linkAttrs.href = '';
    } else {
      linkAttrs.onClick = this._onChange.bind(null, index === undefined ? key : index);
    }

    linkAttrs.bgStyle = this.props.background ? 'filled' : 'transparent';

    return <li {...liAttrs}>
        <Button {...linkAttrs}>
          {this._getItemValue(key)}
        </Button>
      </li>;
  },

  _getItems() {
    let pagination = this;

    let range = this._getRange();

    let items = this.getItemsLength() > 0 ? range.map(function (i) {
      return pagination._createItem(i, pagination.props.items[i]);
    }) : null;

    if (this.getItemsLength() > this.props.range) {
      let dotsRight = false;
      if ((this.props.range - 1) / 2 + this.getActiveIndex() < this.getItemsLength() - 1) {
        dotsRight = true;
      }

      let dotsLeft = false;
      if ((this.props.range - 1) / 2 < this.getActiveIndex()) {
        dotsLeft = true;
      }

      if (dotsLeft) {
        items.unshift(<li key="dotsLeft" className={this.getClassName().item}><UU5.Bricks.Icon icon="mdi-dots-horizontal" className={this.getClassName("dots")} />
        </li>);
      }

      if (dotsRight) {
        items.push(<li key="dotsRight" className={this.getClassName().item}><UU5.Bricks.Icon icon="mdi-dots-horizontal" className={this.getClassName("dots")} />
        </li>);
      }

      let prevDisabled = this.getActiveIndex() === 0;
      let nextDisabled = this.getActiveIndex() === this.getItemsLength() - 1;

      items.unshift(this._createNavItem('prev', prevDisabled));
      items.push(this._createNavItem('next', nextDisabled));

      (this.props.firstIcon || this.props.firstLabel) && items.unshift(this._createNavItem('first', prevDisabled, 0));
      (this.props.lastIcon || this.props.lastLabel) && items.push(this._createNavItem('last', nextDisabled, this.getItemsLength() - 1));
    }

    return items;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    var mainAttrs = this._getMainAttrs();
    var items = this._getItems();

    return items ? <ul {...mainAttrs}>
        {items}
        {this.getDisabledCover()}
      </ul> : null;
  }
  //@@viewOff:render
});

export default Pagination;