import React from 'react';
import createReactClass from 'create-react-class';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import './camera.less';

// TODO
// quality of picture -> jpg, png, ...
// choice of camera devices if pc has more cameras
export const Camera = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Camera"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBox', 'box'),
    classNames: {
      main: ns.css("camera"),
      video: ns.css("camera-video"),
      canvas: ns.css("camera-canvas")
    },
    errors: {
      videoError: 'Video can not be loaded.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia;

    if (navigator.getUserMedia) {
      navigator.getUserMedia({ video: true }, this._handleVideo, this._videoError);
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getScreenShot: function () {
    var img = null;

    if (this.localMediaStream) {
      var canvas = this.canvas;
      canvas.width = UU5.Common.Tools.getWidth(this);
      canvas.height = UU5.Common.Tools.getHeight(this);

      var ctx = canvas.getContext('2d');
      ctx.drawImage(this.video, 0, 0, UU5.Common.Tools.getWidth(this), UU5.Common.Tools.getHeight(this));
      img = canvas.toDataURL('image/png');
    }

    return img;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _handleVideo: function (stream) {
    var video = this.video;
    video.src = window.URL.createObjectURL(stream);
    this.localMediaStream = stream;
    return this;
  },

  _videoError: function (e) {
    this.showError('videoError', null, { context: { event: e, src: this.video.src } });
    return this;
  },

  _refVideo: function (video) {
    this.video = video;
    return this;
  },

  _refCanvas: function (canvas) {
    this.canvas = canvas;
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this.getNestingLevel() ? <div {...this.getMainAttrs()}>
            <video autoPlay="true" ref={this._refVideo} className={this.getClassName().video} />
            <canvas ref={this._refCanvas} className={this.getClassName().canvas} />
            {this.getDisabledCover()}
          </div> : null;
  }
  //@@viewOff:render
});

export default Camera;