import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Link from './link.js';
import Icon from './icon.js';
import Span from './span.js';
import { Div } from './factory.js';
import List from './tree-list.js';

import './tree-item.less';

export default createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Tree.Item"),
    nestingLevelList: UU5.Environment.getNestingLevelList('box', 'smallBox'),
    classNames: {
      main: ns.css("tree-item"),
      link: ns.css("tree-item-link"),
      icon: ns.css("tree-item-icon"),
      iconHidden: ns.css("tree-item-icon-hidden"),
      nav: ns.css("tree-item-nav")
    },
    errors: {
      invalidParent: 'Parent of this component is not Tree, Tree.Item or Tree.List.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    label: PropTypes.any,
    items: PropTypes.array,
    iconExpanded: PropTypes.string,
    iconCollapsed: PropTypes.string,
    expanded: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      label: null,
      items: null,
      iconExpanded: null,
      iconCollapsed: null,
      expanded: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      expanded: this.props.expanded
    };
  },

  componentWillMount: function () {
    if (!(this.getParent() && (this.getParent().isTree || this.getParent().isTreeItem || this.getParent().isTreeList))) {
      this.showError("invalidParent");
    }
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.controlled && nextProps.expanded !== this.props.expanded && nextProps.expanded !== this.isExpanded()) {
      this.setState({ expanded: nextProps.expanded });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isTreeItem() {
    return true;
  },

  expand: function (setStateCallback) {
    this.setState({ expanded: true }, setStateCallback);
  },

  collapse: function (setStateCallback) {
    this.setState({ expanded: false }, setStateCallback);
  },

  toggleExpanded: function (setStateCallback) {
    this.setState(function (state) {
      return { expanded: !state.expanded };
    }, setStateCallback);
  },

  isExpanded: function () {
    return this.state.expanded;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getItems: function () {
    var result = null;

    if (this.props.items || this.props.content || this.props.children) {
      result = <List parent={this} items={this.props.items || this.getChildren()} iconExpanded={this.props.iconExpanded} iconCollapsed={this.props.iconCollapsed} hidden={!this.isExpanded()} controlled />;
    }

    return result;
  },

  _onToggle: function () {
    this.toggleExpanded();
    return this;
  },

  _getIcon: function () {
    var icon;

    if (this.props.items || this.props.content || this.props.children) {
      if (this.isExpanded()) {
        icon = this.props.iconExpanded;
      } else {
        icon = this.props.iconCollapsed;
      }
    }

    var link = null;
    if (icon) {
      link = <Link className={this.getClassName('link')} onClick={this._onToggle} parent={this}>
          <Icon className={this.getClassName('icon')} icon={icon} />
        </Link>;
    } else {
      link = <Icon className={this.getClassName('iconHidden')} />;
    }

    return link;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this.getNestingLevel() ? <li {...this.getMainAttrs()}>
          <Div className={this.getClassName('nav')}>
            {this._getIcon()} <Span content={this.props.label} />
          </Div>
          {this._getItems()}
          {this.getDisabledCover()}
        </li> : null;
  }
  //@@viewOff:render
});