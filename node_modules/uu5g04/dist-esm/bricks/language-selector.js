import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";
import Dropdown from './dropdown.js';
import DropdownItem from './dropdown-item.js';

import Span from './span.js';
import Button from './button.js';

import './language-selector.less';

export const LanguageSelector = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ScreenSizeMixin, UU5.Common.LsiMixin, UU5.Common.NestingLevelMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("LanguageSelector"),
    nestingLevelList: UU5.Environment.getNestingLevelList('box', 'inline'),
    classNames: {
      main: ns.css("language-selector"),
      left: ns.css("language-selector-left"),
      flag: ns.css("language-selector-flag"),
      text: ns.css("language-selector-text"),
      label: ns.css("language-selector-label"),
      code: ns.css("language-selector-code"),
      codeText: ns.css("language-selector-code-text"),
      labelCodeText: ns.css("language-selector-label-code-text"),
      selected: ns.css("language-selector-selected"),
      modalButton: ns.css("language-selector-modal-button"),
      button: ns.css("language-selector-button"),
      spaceBetween: ns.css("language-selector-space-between")
    },
    defaults: {
      regexpSpace: / /g
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    headerMode: PropTypes.oneOf(['all', 'flag', 'label', 'code']),
    bodyMode: PropTypes.oneOf(['all', 'flag', 'label', 'label-code']),
    displayedLanguages: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),
    languages: PropTypes.shape({
      languageCode: PropTypes.shape({
        flag: PropTypes.string,
        language: PropTypes.string
      })
    }),
    defaultLanguage: PropTypes.string,
    size: PropTypes.string,
    bgStyle: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      languages: null,
      headerMode: 'all',
      bodyMode: 'all',
      displayedLanguages: null,
      defaultLanguage: null,
      size: 'm',
      bgStyle: undefined
    };
  },
  // @@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      languages: this._getFilteredLanguages(this.props)
    };
  },

  componentWillMount() {
    if (!this.state.languages[this.state.language]) {
      let newLang = UU5.Common.Tools.getLsiKey(this.state.languages, null, null, this.props.defaultLanguage);
      this.setState({ language: newLang });
    }
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      let newLanguage = this.state.language;
      let languages = typeof nextProps.displayedLanguages === "string" ? nextProps.displayedLanguages.replace(this.getDefault().regexpSpace, '').split(',') : nextProps.displayedLanguages;
      if (languages && languages.indexOf(this.state.language) === -1) {
        newLanguage = languages[0];
      }
      this.setState({
        language: newLanguage,
        languages: this._getFilteredLanguages(nextProps)
      });
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  onChangeLanguage_(language) {
    if (this.state.languages[language]) {
      this.setState({ language: language });
    }
    return this;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getFilteredLanguages(props) {
    let languages = props.languages || UU5.Environment.languageList;
    let result;
    if (props.displayedLanguages) {
      let displayedLanguages = typeof props.displayedLanguages === 'string' ? props.displayedLanguages.replace(this.getDefault().regexpSpace, '').split(',') : props.displayedLanguages;

      result = result || {};
      let languagesCodes = Object.keys(languages);
      displayedLanguages.forEach(key => {
        if (languagesCodes.indexOf(key) > -1) {
          result[key] = languages[key];
        }
      });
    }
    return result || languages;
  },

  _getFlag(language) {
    return <img src={this.state.languages[language].flag} className={this.getClassName().flag} />;
  },

  _getLabel(languageDescription) {
    return <Span content={languageDescription} className={this.getClassName().label} />;
  },

  _getCode(languageCode) {
    return <Span content={languageCode} className={this.getClassName('codeText')} />;
  },

  _getLabelCode(languageCode, languageDescription) {
    return <Span>
        <Span content={languageDescription} className={this.getClassName('label')} />
        <Span content={languageCode} className={this.getClassName('labelCodeText')} />
      </Span>;
  },

  _getItemContent(language, languageDescription) {
    return [this._getFlag(language), <Span content={languageDescription} className={this.getClassName().text} />];
  },

  _getItems() {
    let this_ = this;
    let items = [];
    let className;
    if (this.props.bodyMode === 'all') className = this.getClassName('left');else if (this.props.bodyMode === 'label-code') className = this.getClassName('code');

    Object.keys(this.state.languages).forEach((key, i) => {
      let cls = className;
      if (key === this_.state.language) {
        cls += ' ' + this.getClassName('selected');
      }
      items.push(<DropdownItem label={this_._getModalItem(key)} key={i} className={cls} onClick={() => {
        this_._setGlobalLanguage(key);
      }} />);
    });
    return items;
  },

  _openModal() {
    this.modal.open({ content: this._getModalContent(this.state.language) });
    return this;
  },

  _setGlobalLanguage(language) {
    UU5.Common.Tools.setLanguage(language);
    this.modal && this.modal.close();
  },

  _getModalContent(language) {
    var content = [];
    var this_ = this;
    let className = this.getClassName().modalButton;
    if (this.props.bodyMode === 'all' || this.props.bodyMode === 'label-code') {
      className += ' ' + this.getClassName().spaceBetween;
    }
    Object.keys(this.state.languages).forEach((key, i) => {
      content.push(<Button content={this_._getModalItem(key)} key={i} onClick={() => {
        this_._setGlobalLanguage(key);
      }} className={className} selected={this_.state.language === key} displayBlock bgStyle={this.props.bgStyle || 'transparent'} />);
    });
    return content;
  },

  _getModalItem(key) {
    var item;
    switch (this.props.bodyMode) {
      case 'all':
        item = this._getItemContent(key, this.state.languages[key].language);
        break;
      case 'flag':
        item = this._getFlag(key);
        break;
      case 'label':
        item = this._getLabel(this.state.languages[key].language);
        break;
      case 'code':
        item = this._getCode(key);
        break;
      case 'label-code':
        item = this._getLabelCode(key, this.state.languages[key].language);
        break;
    }
    return item;
  },

  _getContent(mode) {
    var content;
    switch (mode) {
      case 'all':
        content = this._getItemContent(this.state.language, this.state.languages[this.state.language].language);
        break;
      case 'flag':
        content = this._getFlag(this.state.language);
        break;
      case 'label':
        content = this._getLabel(this.state.languages[this.state.language].language);
        break;
      case 'code':
        content = this._getCode(this.state.language);
        break;
      case 'label-code':
        content = this._getLabelCode(this.state.language, this.state.languages[this.state.language].language);
        break;
    }
    return content;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    var result;
    // if (this.isXs()) {
    //   result = (
    //     <span {...this.getMainAttrs()}>
    //       <Button
    //         className={this.getClassName().button}
    //         content={this._getContent(this.props.headerMode)}
    //         disabled={this.isDisabled()}
    //         hidden={this.isHidden()}
    //         onClick={this._openModal}
    //         size={this.props.size}
    //         bgStyle={this.props.bgStyle || 'transparent'}
    //       />
    //       <Modal header='&nbsp;' ref_={(modal) => this.modal = modal} />
    //     </span>
    //   );
    // } else {
    result = <Dropdown {...this.getMainPropsToPass()} label={this._getContent(this.props.headerMode)} size={this.props.size} bgStyle={this.props.bgStyle || 'transparent'}>
        {this._getItems()}
        {this.getDisabledCover()}
      </Dropdown>;
    // }
    return this.getNestingLevel() ? result : null;
  }
  //@@viewOff:render
});

export default LanguageSelector;