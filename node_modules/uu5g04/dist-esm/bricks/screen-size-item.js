import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Span from './span.js';
import { Div } from './factory.js';

import './screen-size-item.less';

const SCREEN_SIZES = ["xs", "s", "m", "l", "xl"];

export default createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("ScreenSize.Item"),
    nestingLevelList: UU5.Environment.getNestingLevelList('spa'),
    classNames: {
      main: ns.css("screen-size-item")
    },
    opt: {
      nestingLevelWrapper: true
    },
    errors: {
      invalidParent: 'Parent of this component is not ScreenSize.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    screenSize: PropTypes.oneOfType([PropTypes.oneOf(SCREEN_SIZES), PropTypes.arrayOf(PropTypes.oneOf(SCREEN_SIZES))]).isRequired
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      screenSize: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    if (!(this.getParent() && this.getParent().isScreenSize)) {
      this.showError("invalidParent");
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    let children = this.getNestingLevel() === 'inline' ? <Span {...this.getMainPropsToPass()} content={this.props.content}>
        {this.props.children && React.Children.toArray(this.props.children)}
      </Span> : <Div {...this.getMainPropsToPass()} content={this.props.content}>
        {this.props.children && React.Children.toArray(this.props.children)}
      </Div>;
    return children;
  }
  //@@viewOff:render
});