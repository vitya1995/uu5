import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import './tree-list.less';

export default createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Tree.List"),
    classNames: {
      main: ns.css("tree-list")
    },
    defaults: {
      childTagName: 'UU5.Bricks.Tree.Item'
    },
    errors: {
      invalidParent: 'Parent of this component is not Tree, Tree.Item or Tree.List.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    items: PropTypes.array,
    iconExpanded: PropTypes.string,
    iconCollapsed: PropTypes.string,
    allowTags: PropTypes.arrayOf(PropTypes.string)
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      items: null,
      iconExpanded: null,
      iconCollapsed: null,
      allowTags: []
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    if (!(this.getParent() && (this.getParent().isTree || this.getParent().isTreeItem || this.getParent().isTreeList))) {
      this.showError("invalidParent");
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isTreeList() {
    return true;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  expandChildProps_: function (child) {
    var newChildProps = UU5.Common.Tools.mergeDeep({}, child.props);
    newChildProps.iconExpanded = newChildProps.iconExpanded || this.props.iconExpanded;
    newChildProps.iconCollapsed = newChildProps.iconCollapsed || this.props.iconCollapsed;
    return newChildProps;
  },

  shouldChildRender_: function (child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getItems: function () {
    var list = this;
    var content = this.getContent();

    if (this.props.items) {
      content = this.props.items.map(function (itemProps) {
        var result;
        if (typeof itemProps.type === 'function') {
          result = itemProps;
        } else {
          result = { tag: list.getDefault().childTagName, props: itemProps };
        }
        return result;
      });
    }
    return this.buildChildren({ content: content, children: this.props.children });
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return <ul {...this.getMainAttrs()}>
        {this._getItems()}
        {this.getDisabledCover()}
      </ul>;
  }
  //@@viewOff:render
});