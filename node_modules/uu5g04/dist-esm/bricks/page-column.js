import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Button from '../bricks/button.js';
import Icon from './icon.js';
import Column from '../bricks/column.js';
import Backdrop from '../bricks/backdrop.js';

import './page-column.less';

export const PageColumn = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Page.Column"),
    classNames: {
      main: ns.css("page-column"),
      backdrop: ns.css("page-column-backdrop"),
      wrapper: ns.css("page-column-wrapper"),
      float: ns.css("page-column-float"),
      buttonWrapper: ns.css("page-column-button-wrapper"),
      buttonOpen: ns.css("page-column-button-open"),
      buttonClose: ns.css("page-column-button-close"),
      open: ns.css("page-column-open"),
      elevation: 'uu5-elevation-',
      zIndex: ns.css("page-z-index-")
    },
    errors: {
      invalidParent: 'Parent of this component is not Page.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    right: PropTypes.bool,
    button: PropTypes.bool,
    open: PropTypes.bool,
    block: PropTypes.bool,
    openContent: PropTypes.any,
    closedContent: PropTypes.any,
    elevation: PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      width: null,
      minWidth: null,
      maxWidth: null,
      right: false,
      button: false,
      open: false,
      block: false,
      openContent: null,
      closedContent: null,
      elevation: 0
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      open: this.props.block || this.props.open
    };
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ open: nextProps.block || nextProps.open });
    }
    UU5.Environment.EventListener.triggerEvent('pageColumn', this.props.right ? 'right' : 'left', nextProps.minWidth || nextProps.maxWidth);
  },

  componentWillMount() {
    if (!this.getParentByType('isPage')) {
      this.showError("invalidParent");
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isFloat() {
    return this.props.minWidth || this.props.maxWidth;
  },

  open(setStateCallback) {
    !this.props.block && this.setState({ open: true }, setStateCallback);
    return this;
  },

  close(setStateCallback) {
    !this.props.block && this.setState({ open: false }, setStateCallback);
    return this;
  },

  toggle(setStateCallback) {
    !this.props.block && this.setState(state => ({ open: !state.open }), setStateCallback);
    return this;
  },

  isOpen() {
    return this.state.open;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers

  _getWrapperProps() {
    let width = this.props.width;
    let visibility = 'hidden';

    if (this.props.minWidth && this.props.maxWidth) {
      visibility = 'visible';
      if (this.isOpen()) {
        width = this.props.maxWidth;
      } else {
        width = this.props.minWidth;
      }
    } else {
      if (this.props.maxWidth && !this.isOpen() || this.isOpen()) {
        width = this.props.width;
        visibility = 'visible';
      }
    }

    return {
      className: this.getClassName('wrapper'),
      style: {
        width: width,
        right: this.props.right ? 0 : 'auto',
        visibility: visibility
        //position: this.isOpen() ? 'absolute' : 'relative'
      }
    };
  },

  _getMainProps: function () {
    let props = this.getMainPropsToPass();

    props.id = this.getId();
    props.pureRender = true;

    //props.width = this.props.width;

    if (this.state.open) {
      props.className += ' ' + this.getClassName().open;
    }

    props.className += ' ' + this.getClassName('elevation') + this.props.elevation;

    if (this.props.elevation) {
      props.className += ' ' + this.getClassName('zIndex') + this.props.elevation;
    }

    if (!this.props.block) {
      props.className += ' ' + this.getClassName().float;
      if (this.props.maxWidth && !this.state.open) {
        let ratio = 100 / (parseInt(this.props.maxWidth) / parseInt(this.props.minWidth));
        let transform = this.props.right ? 'translateX(' + (100 - ratio) + '%)' : 'translateX(' + (ratio - 100) + '%)';
        props.style = props.style || {};
        props.style.transform = transform;

        if (this.props.minWidth && this.props.maxWidth) {
          props.style.transform = 'none';
        }
      }
    }

    return props;
  },

  _getBackdropProps() {
    let backdropId = this.getId() + '-backdrop';

    return {
      className: this.getClassName('backdrop'),
      hidden: !this.isOpen(),
      id: backdropId,
      onClick: (backdrop, event) => {
        event.target.id === backdropId && this.close();
      }
    };
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    let left = <div>
        <Button content={<Icon icon="mdi-close" />} onClick={this.close} className={this.getClassName().buttonClose} />
        <Button content={<Icon icon="mdi-menu" />} onClick={this.open} className={this.getClassName().buttonOpen} />
      </div>;
    let right = <div>
        <Button content={<Icon icon="mdi-menu" />} onClick={this.open} className={this.getClassName().buttonOpen} />
        <Button content={<Icon icon="mdi-close" />} onClick={this.close} className={this.getClassName().buttonClose} />
      </div>;

    let content;
    if (this.props.openContent && this.props.closedContent) {
      content = this.props.block || this.state.open ? this.props.openContent : this.props.closedContent;
      switch (typeof content) {
        case 'number':
          // content = content;
          break;
        case 'string':
          if (UU5.Common.Tools.isUU5String(content)) {
            content = UU5.Common.Tools.getChildrenFromUu5String(content);
          }
          break;
        default:
          content = React.cloneElement(content, { open: this.state.open, block: this.props.block });
      }
    }

    let result = <Column {...this._getMainProps()} width={this.props.width}>
        {content}
        <div className={this.getClassName().buttonWrapper}>
          {this.props.button && (this.props.right ? right : left)}
        </div>
      </Column>;

    if (!this.props.block) {
      result = <div {...this._getWrapperProps()}>
          <Backdrop {...this._getBackdropProps()} style={{ zIndex: this.props.elevation }} />
          <Column {...this._getMainProps()}>
            {content}
            <div className={this.getClassName().buttonWrapper}>
              {this.props.button && (this.props.right ? right : left)}
            </div>
          </Column>
        </div>;
    }

    return result;
  }
  //@@viewOff:render
});

export default PageColumn;