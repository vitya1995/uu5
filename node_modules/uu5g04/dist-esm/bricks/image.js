import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import './image.less';

export const Image = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Image"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: ns.css("image"),
      type: ns.css("image-"),
      disabledWrapper: 'uu5-common-disabled-cover-wrapper'
    }
  },
  //@@viewOff:statics

  // TODO: strictCircle -> no ellipse but cut a circle from different image size - e.g. http://sixrevisions.com/css/circular-images-css/
  //@@viewOn:propTypes
  propTypes: {
    type: PropTypes.oneOf(['rounded', 'circle', 'thumbnail']),
    src: PropTypes.string,
    responsive: PropTypes.bool,
    alt: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      type: null,
      src: '',
      responsive: true,
      alt: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getAlt: function () {
    let alt;

    if (typeof this.props.alt !== 'undefined') {
      alt = this.props.alt;
    } else {
      alt = this.getName() || UU5.Common.Tools.getFileName(this.props.src) || '';
    }

    return alt;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var mainAttrs = this.getMainAttrs();

    this.props.type && (mainAttrs.className += ' ' + this.getClassName('type') + this.props.type);
    this.props.responsive && (mainAttrs.className += ' ' + this.getClassName('type') + 'responsive');
    mainAttrs.src = this.props.src;
    mainAttrs.alt = this._getAlt();

    var image = <img {...mainAttrs} />;

    if (this.isDisabled()) {
      image = <div className={this.getClassName().disabledWrapper}>
          {image}
          {this.getDisabledCover()}
        </div>;
    }

    return this.getNestingLevel() ? image : null;
  }
  //@@viewOff:render
});

export default Image;