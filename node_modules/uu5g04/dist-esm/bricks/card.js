import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";
import Section from "./section.js";

import './card.less';

export const Card = createReactClass({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin, UU5.Common.SectionMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Card"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: ns.css("card"),
      inline: ns.css("card-inline"),
      spaces: ns.css("card-spaces")
    },
    opt: {
      dummyLevel: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    elevation: PropTypes.oneOf(['0', '1', '2', '3', '4', '5', 0, 1, 2, 3, 4, 5]),
    elevationHover: PropTypes.oneOf(['0', '1', '2', '3', '4', '5', 0, 1, 2, 3, 4, 5]),
    inline: PropTypes.bool,
    width: PropTypes.number,
    minWidth: PropTypes.number,
    noSpaces: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      elevation: 1,
      elevationHover: 1,
      inline: false,
      width: null,
      minWidth: null,
      noSpaces: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainProps() {
    const mainAttrs = this.getMainPropsToPass();
    mainAttrs.className += ' uu5-elevation-' + this.props.elevation;
    mainAttrs.className += ' uu5-elevation-hover-' + this.props.elevationHover;
    !this.props.noSpaces && (mainAttrs.className += " " + this.getClassName("spaces"));

    if (this.props.width !== null || this.props.minWidth !== null) {
      mainAttrs.style = mainAttrs.style || {};
      this.props.width !== null && (mainAttrs.style.width = this.props.width);
      this.props.minWidth !== null && (mainAttrs.style.minWidth = this.props.minWidth);
      mainAttrs.className += ' ' + this.getClassName('inline');
    } else if (this.props.inline) {
      mainAttrs.className += ' ' + this.getClassName('inline');
    }
    return mainAttrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? <Section {...this._getMainProps()}>
          {React.Children.toArray(this.props.children)}
        </Section> : null;
  }
  //@@viewOff:render
});

export default Card;