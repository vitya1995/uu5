import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import './nav-bar-nav.less';

export default createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("NavBar.Nav"),
    classNames: {
      main: ns.css("nav-bar-nav nav navbar-nav"),
      align: ns.css("nav-bar-nav-")
    },
    defaults: {
      childTagName: 'UU5.Bricks.NavBar.Nav.Item',
      parentTagName: 'UU5.Bricks.NavBar'
    },
    errors: {
      invalidParent: 'Parent of this component is not NavBar.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    aligned: PropTypes.oneOf(['left', 'right']),
    smoothScroll: PropTypes.number,
    offset: PropTypes.number,
    allowTags: PropTypes.arrayOf(PropTypes.string),
    _size: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      aligned: 'left',
      smoothScroll: null,
      offset: null,
      allowTags: [],
      _size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    // this.checkParentTagName(this.getDefault().parentTagName);

    if (!(this.getParent() && this.getParent().isNavBar)) {
      this.showError("invalidParent");
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isNav: function () {
    return true;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    var childTagName = UU5.Common.Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_: function (child, i) {
    var newChildProps = child.props;
    newChildProps = UU5.Common.Tools.mergeDeep({}, newChildProps);

    newChildProps._size = this.props._size;
    newChildProps.smoothScroll = newChildProps.smoothScroll === undefined || newChildProps.smoothScroll === null ? this.props.smoothScroll : newChildProps.smoothScroll;
    newChildProps.offset = newChildProps.offset === undefined || newChildProps.offset === null ? this.props.offset : newChildProps.offset;

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var mainAttrs = this.getMainAttrs();
    mainAttrs.className += ' ' + this.getClassName().align + this.props.aligned;

    return <ul {...mainAttrs}>
        {this.getChildren()}
        {this.getDisabledCover()}
      </ul>;
  }
  //@@viewOff:render
});