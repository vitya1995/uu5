import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import './video.less';

export const Video = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Video"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBox', 'box'),
    classNames: {
      main: ns.css("video")
    },
    errors: {
      typeNotFound: 'You have to set the type of the video or src has to contain the file extension.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    autoPlay: PropTypes.bool,
    disableControls: PropTypes.bool,
    loop: PropTypes.bool,
    poster: PropTypes.string,
    preload: PropTypes.oneOf(['auto', 'metadata', 'none']),
    src: PropTypes.string.isRequired,
    muted: PropTypes.bool,
    type: PropTypes.oneOf(['mp4', 'webm', 'ogg'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      autoPlay: false,
      disableControls: false,
      loop: false,
      poster: '',
      preload: 'auto',
      src: '',
      muted: false,
      type: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      muted: this.props.muted
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.controlled) {
      this.setState({ muted: nextProps.muted });
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  toggleMuted: function () {
    this.setState(state => ({ muted: !state.muted }));
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getType: function () {
    let type;
    if (this.props.type) {
      type = this.props.type;
    } else {
      let match = /\.([a-zA-Z0-9]+)$/.exec(this.props.src);
      if (match) {
        type = match[1];
      } else {
        this.showError('typeNotFound');
      }
    }
    return type;
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildMainAttrs: function () {
    let mainProps = this.getMainAttrs();

    if (this.props.autoPlay) mainProps.autoPlay = true;
    if (this.state.muted) mainProps.muted = true;
    this.props.disableControls ? mainProps.controls = false : mainProps.controls = true;
    if (this.props.loop) mainProps.loop = true;
    if (this.props.poster !== '') mainProps.poster = this.props.poster;
    if (this.props.preload !== 'auto') mainProps.preload = this.props.preload;
    mainProps.type = this._getType();
    return mainProps;
  },

  //@@viewOn:render
  render: function () {
    return this.getNestingLevel() ? <video {...this._buildMainAttrs()}>
            <source src={this.props.src} />
          </video> : null;
  }
  //@@viewOff:render
});

export default Video;