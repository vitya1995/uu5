import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Backdrop from './backdrop.js';

import './slider.less';

export const Slider = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Slider"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: ns.css("slider"),
      input: ns.css("slider-input"),
      track: ns.css("slider-track"),
      selection: ns.css("slider-selection"),
      pointer: ns.css("slider-pointer"),
      active: ns.css("slider-active"),
      size: ns.css("slider-size-")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    // TODO
    //position: PropTypes.oneOf(['horizontal', 'vertical']),
    min: PropTypes.number,
    max: PropTypes.number,
    step: PropTypes.number,
    value: PropTypes.number,
    onChange: PropTypes.func,
    onChanged: PropTypes.func,
    size: PropTypes.oneOf(['s', 'm', 'l', 'xl'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      //position: 'horizontal',
      min: 0,
      max: 10,
      step: 1,
      value: null, // default: min
      onChange: null,
      onChanged: null,
      size: 'm'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      value: this._checkValue(this.props.value),
      active: false
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.controlled) {
      this.setValue(nextProps.value);
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getValue: function () {
    return this.state.value;
  },

  setValue: function (value, setStateCallback) {
    this.setState({ value: this._checkValue(value) }, setStateCallback);
    return this;
  },

  increase: function (value, setStateCallback) {
    this.setState(prevState => {
      return { value: this._checkValue(prevState.value + (value || this.props.step)) };
    }, setStateCallback);
    return this;
  },

  decrease: function (value, setStateCallback) {
    this.setState(prevState => {
      return { value: this._checkValue(prevState.value - (value || this.props.step)) };
    }, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _checkValue: function (value) {
    if (value === null) {
      value = this.props.min;
    } else {
      value = Math.round(value / this.props.step) * this.props.step;

      if (value < this.props.min) {
        value = this.props.min;
      } else if (value > this.props.max) {
        value = this.props.max;
      }
    }

    return value;
  },

  _changeValue: function (value, e) {
    var onChange;
    var onChanged;
    if (this.getValue() !== value) {
      onChange = this._getOnChange(value, e);
      !onChange && (onChanged = this._getOnChanged(value, e));

      onChange ? onChange(this) : this.setValue(value, onChanged);
    }

    return this;
  },

  _activate: function (e) {
    var value = this._countValue(e);

    var onChange;
    var onChanged;
    if (this.getValue() !== value) {
      onChange = this._getOnChange(value, e);
      !onChange && (onChanged = this._getOnChanged(value, e));
    }

    var newState = { active: true };
    !onChange && (newState.value = value);

    this.setState(newState, (onChange || onChanged) && function () {
      onChange ? onChange(this) : onChanged(this);
    }.bind(this));
    return this;
  },

  _deactivate: function (e) {
    this.setState({ active: false });
    return this;
  },

  _isActive: function () {
    return this.state.active;
  },

  _move: function (e) {
    if (this._isActive()) {
      this._changeValue(this._countValue(e), e);
    }
    return this;
  },

  _getOnChange: function (value, e) {
    var onChange;
    if (typeof this.props.onChange === 'function') {
      var slider = this;
      onChange = function () {
        slider.props.onChange({ value: value, component: slider, event: e });
      };
    }
    return onChange;
  },

  _getOnChanged: function (value, e) {
    var onChanged;
    if (typeof this.props.onChanged === 'function') {
      var slider = this;
      onChanged = function () {
        slider.props.onChanged({ value: value, component: slider, event: e });
      };
    }
    return onChanged;
  },

  _getStartPositions: function (el) {
    var xPos = 0;
    var yPos = 0;

    while (el) {
      xPos += el.offsetLeft - el.scrollLeft + el.clientLeft;
      yPos += el.offsetTop - el.scrollTop + el.clientTop;

      el = el.offsetParent;
    }

    return {
      x: xPos,
      y: yPos
    };
  },

  _countValue: function (e) {
    var sliderStart = this._getStartPositions(this.track).x;
    var sliderWidth = this.track.offsetWidth;
    var actualPosition = e.clientX;
    if (e.touches) {
      actualPosition = e.touches.item(0).clientX;
    }

    var absolutePosition = actualPosition - sliderStart;
    var end = sliderWidth;

    var min = this.props.min;
    var max = this.props.max;
    var step = this.props.step;

    var absoluteMax = max - min;

    var realValue = absolutePosition / (end / absoluteMax);
    var value = min + Math.round(realValue / step) * step;
    value > this.props.max && (value = this.props.max);
    value < this.props.min && (value = this.props.min);

    return value;
  },

  _getMainAttrs: function () {
    var attrs = this.getMainAttrs();

    attrs.className += ' ' + this.getClassName('size') + this.props.size;

    if (!this.isDisabled()) {
      this._isActive() && (attrs.className += ' ' + this.getClassName().active);

      attrs.onMouseDown = this._activate;
      attrs.onMouseMove = this._move;
      attrs.onMouseUp = this._deactivate;
      attrs.onTouchStart = this._activate;
      attrs.onTouchMove = this._move;
      attrs.onTouchEnd = this._deactivate;
      attrs.onMouseLeave = this._deactivate;
    }

    return attrs;
  },

  _getInputAttrs: function () {
    var attrs = {
      className: this.getClassName().input,
      type: "range",
      name: this.getName(),
      min: this.props.min,
      max: this.props.max,
      step: this.props.step,
      value: this.getValue(),
      disabled: this.isDisabled()
    };

    if (!this.isDisabled()) {
      var slider = this;
      attrs.onChange = function (e) {
        slider._changeValue(e.target.value, e);
      };
    }

    return attrs;
  },

  _getBackdropProps: function () {
    var backdropId = this.getId() + "-backdrop";
    var slider = this;

    return {
      hidden: !this._isActive(),
      id: backdropId,
      onClick: function (backdrop, event) {
        event.target.id === backdropId && slider._deactivate();
      },
      mainAttrs: {
        onMouseUp: this._deactivate,
        onTouchEnd: this._deactivate
      }
    };
  },

  _getTrackAttrs: function () {
    var slider = this;
    return {
      className: this.getClassName().track,
      ref: function (div) {
        slider.track = div;
      }
    };
  },

  _getSelectionAttrs: function () {
    return {
      className: this.getClassName().selection,
      style: { width: (this.getValue() - this.props.min) / (this.props.max - this.props.min) * 100 + '%' }
    };
  },

  _getPointerAttrs: function () {
    return {
      className: this.getClassName().pointer
    };
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this.getNestingLevel() ? <div {...this._getMainAttrs()}>
            <input {...this._getInputAttrs()} />
            <Backdrop {...this._getBackdropProps()} />
            <div {...this._getTrackAttrs()}>
              <div {...this._getSelectionAttrs()}>
                <div {...this._getPointerAttrs()}>
                  {this.getChildren()}
                </div>
              </div>
            </div>
          </div> : null;
  }
  //@@viewOff:render
});

export default Slider;