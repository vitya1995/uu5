import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import LsiItem from './lsi-item.js';

import './lsi.less';

export const Lsi = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.LsiMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Lsi"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'inline'),
    classNames: {
      main: ns.css("lsi")
    },
    defaults: {
      childTagName: 'UU5.Bricks.Lsi.Item'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    lsi: PropTypes.object,
    allowTags: PropTypes.arrayOf(PropTypes.string),
    params: PropTypes.oneOfType([PropTypes.string, PropTypes.array])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      lsi: null,
      allowTags: [],
      params: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isLsi() {
    return true;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    let childTagName = UU5.Common.Tools.getChildTagName(child);
    let childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _expandChildProps: function (child) {
    let newChildProps = child ? UU5.Common.Tools.mergeDeep({}, child.props) : {};

    newChildProps.id = this.getId() + '-inner';
    newChildProps.controlled = true;
    newChildProps.hidden = this.isHidden();
    newChildProps.disabled = this.isDisabled();
    newChildProps.selected = this.isSelected();
    newChildProps.nestingLevel = this.getNestingLevel();

    return newChildProps;
  },

  _getChildren() {
    let child;
    let children = this.getChildren();

    if (children) {
      let lsi = {};
      children.forEach(child => {
        if (child.props.language) {
          lsi[child.props.language] = child;
        }
      });
      child = this.getLsiItem(lsi, this.props.params);
      child = child ? React.cloneElement(child, this._expandChildProps(child)) : null;
    } else {
      child = <LsiItem {...this.getMainPropsToPass(["UU5.Common.BaseMixin", "UU5.Common.ElementaryMixin"])} controlled language={this.getLanguage()} content={this.getLsiItem(this.props.lsi, this.props.params)} nestingLevel={this.getNestingLevel()} />;
    }

    return child;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this.getNestingLevel() ? this._getChildren() : null;
  }
  //@@viewOff:render
});

Lsi.Item = LsiItem;

export default Lsi;