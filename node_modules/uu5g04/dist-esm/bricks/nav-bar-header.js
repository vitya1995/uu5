import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Button from './button.js';
import Icon from './icon.js';

import './nav-bar-header.less';

export default createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("NavBar.Header"),
    classNames: {
      main: ns.css("nav-bar-header navbar-header"),
      hamburger: ns.css("nav-bar-header-hamburger"),
      brand: ns.css("nav-bar-header-brand")
    },
    defaults: {
      parentTagName: 'UU5.Bricks.NavBar'
    },
    errors: {
      invalidParent: 'Parent of this component is not NavBar.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    _icon: PropTypes.string,
    _size: PropTypes.string,
    _hamburger: PropTypes.bool,
    _onOpen: PropTypes.func,
    _onClose: PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      _icon: 'mdi-menu',
      _size: 'm',
      _hamburger: true,
      _onOpen: null,
      _onClose: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    this.checkParentTagName(this.getDefault().parentTagName);

    if (!(this.getParent() && this.getParent().isNavBar)) {
      this.showError("invalidParent");
    }
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onClickHamburger() {
    this.getParent() && this.getParent().toggle(() => {
      if (this.getParent().isOpen()) {
        typeof this.props._onOpen === 'function' && this.props._onOpen(this.getParent());
      } else {
        typeof this.props._onClose === 'function' && this.props._onClose(this.getParent());
      }
    });
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    var hamburger = null;
    if (this.props._hamburger) {
      hamburger = <Button className={this.getClassName('hamburger')} size={this.props._size} bgStyle="transparent" onClick={() => this._onClickHamburger()}>
          <Icon icon={this.props._icon} />
        </Button>;
    }

    var children = this.getChildren();
    if (children) {
      children = <span className={this.getClassName().brand}>
          {children}
        </span>;
    }

    return this.getNestingLevel() ? <div {...this.getMainAttrs()}>
            {children}
            {hamburger}
            {this.getDisabledCover()}
          </div> : null;
  }
  //@@viewOff:render
});