import React from 'react';
import createReactClass from '../create-react-class.js';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./bricks-ns.js";

import Loading from './loading.js';

import './iframe.less';

export const Iframe = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Iframe"),
    nestingLevelList: UU5.Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: ns.css("iframe"),
      inline: ns.css("iframe-inline"),
      disabledWrapper: ns.css("iframe-disabled-wrapper uu5-common-disabled-cover-wrapper")
    },
    defaults: {
      regexpIsUrl: /^(file|ftp|http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/=]*)/g,
      regexpBearer: /Bearer[^&]+/,
      regexpUnits: /[a-zA-Z%]+$/
    },
    warnings: {
      cors: 'Url %s cannot be automatically resized because of another origin.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    src: PropTypes.string,
    resize: PropTypes.bool,
    height: PropTypes.string,
    syncTimeout: PropTypes.number,
    inline: PropTypes.bool,
    iframeAttrs: PropTypes.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      src: 'https://unicorn.com',
      resize: false,
      height: "250",
      syncTimeout: 1,
      inline: false,
      iframeAttrs: {}
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      loading: this.props.resize,
      height: 0,
      width: 0,
      visible: !this.props.syncTimeout
    };
  },

  componentDidMount() {
    if (this.props.syncTimeout) {
      this._timeout = setTimeout(() => this.setAsyncState({ visible: true }), this.props.syncTimeout);
    }
  },

  componentWillUnmount() {
    this._timeout && clearTimeout(this._timeout);
  },

  // componentWillReceiveProps(nextProps){
  //   if (nextProps.controlled){
  //     this.setState({
  //       loading: nextProps.resize,
  //       visible: nextProps.sync
  //     })
  //   }
  //   return this;
  // },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  resize(setStateCallback) {
    let height;
    let width;

    try {
      let body = document.getElementById(this._getIframeId()).contentWindow.document.body;
      height = body.scrollHeight;
      width = body.scrollWidth;
    } catch (ex) {
      this.showWarning('cors', this.props.src.replace(this.getDefault().regexpBearer, 'Bearer...'), { context: { error: ex } });
    }

    if (height || width) {
      let lastWidth = this.state.width;
      let lastHeight = this.state.height;
      let newState = { loading: false, height: height };

      if (this.props.inline) {
        if (lastWidth >= width) {
          newState.width = 0;
        } else {
          newState.width = width;
        }

        if (lastHeight >= height) {
          newState.height = 0;
        } else {
          newState.height = height;
        }

        this.setState(newState, () => {
          let body = document.getElementById(this._getIframeId()).contentWindow.document.body;
          height = body.scrollHeight;
          width = body.scrollWidth;

          let renewState = {};
          if (newState.width === 0) {
            renewState.width = width;
          }

          if (newState.height === 0) {
            renewState.height = height;
          }

          if (Object.keys(renewState).length) {
            this.setState(renewState, setStateCallback);
          } else {
            typeof setStateCallback === 'function' && setStateCallback();
          }
        });
      } else {
        if (lastWidth < width) {
          newState.width = width;
        } else if (lastWidth === width) {
          newState.width = 0;
        }

        this.setState(newState, () => {
          let body = document.getElementById(this._getIframeId()).contentWindow.document.body;
          height = body.scrollHeight;
          width = body.scrollWidth;

          if (lastWidth === width && lastWidth > width) {
            this.setState({ width: null }, setStateCallback);
          } else {
            typeof setStateCallback === 'function' && setStateCallback();
          }
        });
      }
    } else {
      typeof setStateCallback === 'function' && setStateCallback();
    }

    return this;
  },

  setSize(width, height, setStateCallback) {
    this.setState({ loading: false, width: width, height: height }, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onLoad(e) {
    if (this.state.loading) {
      this.resize(() => {
        this.props.mainAttrs && typeof this.props.mainAttrs.onLoad === 'function' && typeof this.props.mainAttrs.onLoad(e);
      });
    } else {
      this.props.mainAttrs && typeof this.props.mainAttrs.onLoad === 'function' && typeof this.props.mainAttrs.onLoad(e);
    }

    return this;
  },

  _getIframeId() {
    return this.getId() + '-iframe';
  },

  _getIframeAttrs() {
    let attrs = UU5.Common.Tools.merge({}, this.props.iframeAttrs);
    if (this._isUrl(this.props.src)) {
      attrs.src = this.props.src;
    } else {
      attrs.srcDoc = this.props.src;
    }

    if (this.props.resize) {
      attrs.id = this._getIframeId();
      attrs.onLoad = this._onLoad;
      if (this.state.height !== null) {
        attrs.style = attrs.style || {};
        attrs.style.height = this.state.height;
      }

      if (this.state.width !== null) {
        attrs.style = attrs.style || {};
        attrs.style.width = this.state.width;
      }
    } else {
      attrs.style = attrs.style || {};
      if (!attrs.style.height) {
        attrs.style.height = this.getDefault().regexpUnits.test(this.props.height) ? this.props.height : this.props.height + "px";
      }
    }

    return attrs;
  },

  _getMainAttrs() {
    let mainAttrs = this.getMainAttrs();
    this.props.inline && (mainAttrs.className += ' ' + this.getClassName().inline);
    return mainAttrs;
  },

  _isUrl(string) {
    return !!string.match(this.getDefault().regexpIsUrl);
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let loading;
    if (this.state.loading) {
      loading = <Loading />;
    }

    return this.getNestingLevel() ? <div {...this._getMainAttrs()}>
            {loading}
            {this.state.visible && <iframe {...this._getIframeAttrs()} />}
            {this.getDisabledCover()}
          </div> : null;
  }
  //@@viewOff:render
});

export default Iframe;