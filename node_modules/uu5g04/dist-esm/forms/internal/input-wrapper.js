import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "../forms-ns.js";

import Message from './message.js';

import './input-wrapper.less';

const INITIAL_FEEDBACK = 'initial';

export default createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("InputWrapper"),
    classNames: {
      main: ns.css("input-wrapper"),
      cover: ns.css("input-wrapper-cover"),
      wrapper: ns.css("input-button-wrapper"),
      feedbackInitial: ns.css("input-wrapper-initial"),
      paddingRight: ns.css("input-button-wrapper-padding-right"),
      inputButton: ns.css("input-button"),
      inputButtonIcon: ns.css("input-button-icon")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    required: PropTypes.bool,
    feedback: PropTypes.string,
    message: PropTypes.any,
    buttons: PropTypes.arrayOf(PropTypes.shape({
      icon: PropTypes.string,
      disabled: PropTypes.bool,
      onClick: PropTypes.func,
      pressed: PropTypes.bool,
      size: PropTypes.string
    })),
    slider: PropTypes.bool,
    datetimepicker: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      required: false,
      feedback: 'initial',
      message: null,
      buttons: null,
      slider: false,
      datetimepicker: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate_(newProps, newState) {
    let result = false;
    if (newProps.children != this.props.children || newProps.required != this.props.required || newProps.feedback != this.props.feedback || newProps.message != this.props.message) {
      result = true;
    }
    return result;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs() {
    let mainAttrs = this.getMainAttrs();
    mainAttrs.className += ' ' + this.props.colWidth;

    // switch (this.props.feedback) {
    //   case 'success':
    //     mainAttrs.className += ' color-schema-' + UU5.Environment.getColorSchema('success');
    //     break;
    //   case 'warning':
    //     mainAttrs.className += ' color-schema-' + UU5.Environment.getColorSchema('warning');
    //     break;
    //   case 'error':
    //     mainAttrs.className += ' color-schema-' + UU5.Environment.getColorSchema('danger');
    //     break;
    //   default:
    //     mainAttrs.className += ' color-schema-' + UU5.Environment.getColorSchema('default');
    //     break
    // }

    return mainAttrs;
  },

  _getButtons() {
    return this.props.buttons && this.props.buttons.length > 0 ? this.props.buttons.map((button, i) => {
      let className = this.getClassName("wrapper");
      this.props.datetimepicker && i === 0 && (className = " " + this.getClassName("paddingRight"));
      return <span key={i} className={className}>
          <UU5.Bricks.Button className={this.getClassName("inputButton")} colorSchema={button.colorSchema} disabled={button.disabled} onClick={button.onClick} pressed={button.pressed} size={button.size} mainAttrs={button.mainAttrs}>
            <UU5.Bricks.Icon icon={button.icon} className={this.getClassName("inputButtonIcon")} />
          </UU5.Bricks.Button>
        </span>;
    }) : null;
  },

  _getFeedbackColorSchema() {
    let result;
    switch (this.props.feedback) {
      case 'warning':
        result = 'warning';
        break;
      case 'error':
        result = 'danger';
        break;
      case 'success':
        result = 'success';
        break;
    }
    return result;
  },

  _getRenderResult() {
    let result;

    let messageClass;
    if (this.props.feedback === 'initial') {
      messageClass = this.getClassName("feedbackInitial");
    }

    let message = this.props.message && <Message colorSchema={this._getFeedbackColorSchema()} content={this.props.message} className={messageClass} />;

    if (this.props.datetimepicker) {
      let children = React.Children.toArray(this.props.children);
      let buttons = this._getButtons();
      result = <div {...this._getMainAttrs()}>
        <div className={this.getClassName("cover")}>
          {children[0]}
          {buttons && buttons[0]}
          {children.slice(1)}
          {buttons && buttons[1]}
        </div>
        {message}
      </div>;
    } else if (this.props.buttons && this.props.buttons.length > 0) {
      result = <div {...this._getMainAttrs()}>
        <div className={this.getClassName("cover")}>
          {React.Children.toArray(this.props.children)}
          {this._getButtons()}
        </div>
        {message}
      </div>;
    } else if (this.props.slider) {
      result = <div {...this._getMainAttrs()}>
        <div className={this.getClassName("cover")}>
          {React.Children.toArray(this.props.children)}
        </div>
        {message}
      </div>;
    } else {
      result = <div {...this._getMainAttrs()}>
        {React.Children.toArray(this.props.children)}
        {message}
      </div>;
    }

    return result;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this._getRenderResult();
  }
  //@@viewOn:render
});