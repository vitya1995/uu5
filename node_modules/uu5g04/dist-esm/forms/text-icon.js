import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import ns from "./forms-ns.js";

import TextInput from './internal/text-input.js';

import TextInputMixin from './mixins/text-input-mixin.js';

import ItemList from './internal/item-list.js';

import './text-icon.less';

export const TextIcon = createReactClass({

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.PureRenderMixin, UU5.Common.ElementaryMixin, TextInputMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("TextIcon"),
    classNames: {
      main: ns.css("text-icon"),
      clickable: ns.css("text-icon-clickable"),
      left: ns.css("text-icon-left"),
      right: ns.css("text-icon-right")
    },
    errors: {
      validateError: 'Validated result is not object.'
    },
    lsi: () => UU5.Environment.Lsi.Forms.message
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: PropTypes.string,
    password: PropTypes.bool,
    icon: PropTypes.string,
    iconPosition: PropTypes.oneOf(['left', 'right']),
    onClick: PropTypes.func,
    pattern: PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      value: '',
      password: false,
      icon: null,
      iconPosition: 'right',
      onClick: null,
      pattern: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({ value: this.state.value, event: null, component: this });
    }

    return this;
  },

  componentWillReceiveProps(nextProps) {
    if (this.props.controlled) {
      if (nextProps.required && (nextProps.value === '' || nextProps.value === null)) {
        this.setError(nextProps.requiredMessage || this.getLsiComponent('requiredMessage'));
      } else {
        this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value);
      }
    }
    return this;
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  // TODO: tohle je ještě otázka - je potřeba nastavit hodnotu z jiné komponenty (musí být validace) a z onChange (neměla by být validace)
  setValue_(value, setStateCallback) {
    if (this._checkRequired({ value: value })) {
      if (typeof this.props.onValidate === 'function') {
        this._validateOnChange({ value: value, event: null, component: this });
      } else {
        this.setInitial(null, value, setStateCallback);
      }
    }

    return this;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _validateOnChange(opt) {
    let result = this.onValidate(opt);
    if (result) {
      if (typeof result === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({ value: opt.value });
        }
      } else {
        this.showError('validateError', null, { context: { event: e, func: this.props.onValidate, result: result } });
      }
    }
    return this;
  },

  _getMainAttrs() {
    let result = this._getInputAttrs();
    result.className += ' ' + (this.props.iconPosition === 'left' ? this.getClassName().left : this.getClassName().right);
    return result;
  },

  _iconOnClick() {
    let result;
    if (typeof this.props.onClick === 'function') {
      result = this.props.onClick({ value: this.state.value, component: this });
    }
    return result;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    let inputId = this.getId() + '-input';

    return <div {...this._getMainAttrs()}>
        {this.getLabel(inputId)}
        {this.getInputWrapper([<TextInput id={inputId} name={this.props.name || inputId} value={this.state.value} placeholder={this.props.placeholder} type={this.props.password ? 'password' : this.props.type || 'text'} onChange={this.onChange} onBlur={this.onBlur} onFocus={this.onFocus} onKeyDown={this.onKeyDown} mainAttrs={this.props.inputAttrs} disabled={this.isDisabled() || this.isLoading()} readonly={this.isReadOnly()} icon={this.props.icon} iconOnClick={this._iconOnClick} loading={this.isLoading()} feedback={this.getFeedback()} ref_={item => this._textInput = item} />, this.state.autocompleteItems && <ItemList {...this._getItemListProps()}>
            {this._getChildren()}
          </ItemList>, this.state.autocompleteItems && <UU5.Bricks.Backdrop {...this._getBackdropProps()} />])}
      </div>;
  }
  //@@viewOn:render
});

export default TextIcon;