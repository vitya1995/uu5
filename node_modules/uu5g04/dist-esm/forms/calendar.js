import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "./forms-ns.js";

import './calendar.less';

export const Calendar = createReactClass({

  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.SwipeMixin, UU5.Common.LsiMixin],

  statics: {
    tagName: ns.name("Calendar"),
    classNames: {
      main: ns.css("calendar"),
      table: ns.css("calendar-table table-condensed"),
      monthTable: ns.css("calendar-month-table"),
      yearTable: ns.css("calendar-year-table"),
      decadeTable: ns.css("calendar-decade-table"),
      thead: ns.css("calendar-thead"),
      headRow: ns.css("calendar-head-row"),
      headCellPrev: ns.css("calendar-head-cell-prev"),
      headCellHeader: ns.css("calendar-head-cell-header"),
      headCellNext: ns.css("calendar-head-cell-next"),
      icon: ns.css("calendar-icon"),
      dayNames: ns.css("calendar-day-names"),
      dayName: ns.css("calendar-day-name"),
      week: ns.css("calendar-week"),
      weekNumber: ns.css("calendar-week-number"),
      day: ns.css("calendar-day"),
      dayCell: ns.css("calendar-day-cell"),
      active: ns.css("calendar-active"),
      activeSection: ns.css("calendar-active-section"),
      anotherSection: ns.css("calendar-another-section"),
      today: ns.css("calendar-today"),
      month: ns.css("calendar-month"),
      months: ns.css("calendar-months"),
      year: ns.css("calendar-year"),
      years: ns.css("calendar-years"),
      cell: ns.css("calendar-cell"),
      xsCell: ns.css("calendar-xs-cell col-xs-3"),
      specCell: ns.css("calendar-spec-cell"),
      underline: ns.css("calendar-underline"),
      disabled: 'uu5-common-disabled'
    },
    defaults: {
      prevIcon: 'mdi-chevron-left',
      nextIcon: 'mdi-chevron-right'
    },
    errors: {
      invalidDate: 'Cannot set invalid date %s.'
    },
    lsi: () => UU5.Environment.Lsi.Forms.calendar
  },

  propTypes: {
    date: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    dateFrom: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    dateTo: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
    minSelection: PropTypes.oneOf(["days", "months", "years"]),
    onChange: PropTypes.func
  },

  // Setting defaults
  getDefaultProps: function () {
    return {
      date: null,
      dateFrom: null,
      dateTo: null,
      onChange: null,
      minSelection: "days"
    };
  },

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    var state = this._parseDate(this.props.date);
    state.dateFrom = this.props.dateFrom ? this._parseDate(this.props.dateFrom).date : null;
    state.dateTo = this.props.dateTo ? this._parseDate(this.props.dateTo).date : null;
    return state;
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.controlled && nextProps.date !== this.props.date) {
      this.setState(this._parseDate(nextProps.date, nextProps));
    }
  },
  //@@viewOff:standardComponentLifeCycle

  // Interface
  setPrevious: function (setStateCallback) {
    this._changeCalendar(-1, setStateCallback);
    return this;
  },

  setNext: function (setStateCallback) {
    this._changeCalendar(1, setStateCallback);
    return this;
  },

  getDate: function () {
    return this.state.date;
  },

  setDate: function (date, setStateCallback) {
    var state = this._parseDate(date);
    if (this._isValidDate(state.date)) {
      this.setState(this._parseDate(date), setStateCallback);
    } else {
      this.showError('invalidDate', state.date);
    }
    return this;
  },

  // Overriding Functions

  // Component Specific Helpers
  _getWeek(date) {
    let firstJan = new Date(date.getFullYear(), 0, 4);
    return Math.ceil(((date - firstJan) / 86400000 + firstJan.getDay() + 3) / 7);
  },

  _getMainAttrs: function () {
    var attrs = this.getMainAttrs();

    return attrs;
  },

  _parseDate: function (date, props) {
    props = props || this.props;
    if (typeof date === 'string') {
      date = new Date(date);
    }

    var state = {
      allowDisplayMonths: !props.minSelection || props.minSelection != "years",
      allowDisplayDays: !props.minSelection || props.minSelection != "months" && props.minSelection != "years"
    };

    if (date) {
      state.date = date;
      state.month = date.getMonth() + 1;
      state.year = date.getFullYear();
      state.decade = parseInt(state.year % 100 / 10);
      state.century = parseInt(state.year / 100);
    } else {
      var today = new Date();
      state.date = null;
      state.month = today.getMonth() + 1;
      state.year = today.getFullYear();
      state.decade = parseInt(state.year % 100 / 10);
      state.century = parseInt(state.year / 100);
    }

    if (state.allowDisplayDays) {
      state.displayMode = "days";
    } else if (state.allowDisplayMonths) {
      state.displayMode = "months";
    } else {
      state.displayMode = "years";
    }

    return state;
  },

  _getHeaderText: function () {
    var result;
    var state = this.state;

    if (state.displayMode == "days") {
      result = this.getLsiValue('monthNames')[state.month - 1] + ' ' + state.year;
    } else if (state.displayMode == "months") {
      result = state.year + '';
    } else if (state.displayMode == "years") {
      var century = state.century * 100;
      result = century + state.decade * 10 + ' - ' + (century + ((state.decade + 1) * 10 - 1));
    }

    return result;
  },

  _headerClick: function () {
    var state = this.state;

    if (state.displayMode == "days") {
      state.displayMode = "months";
    } else if (state.displayMode == "months") {
      state.displayMode = "years";
    } else if (state.displayMode == "years") {
      return this;
    }

    this.setState(state);
    return this;
  },

  _isValidDate: function (date) {
    return (!this.state.dateFrom || this.state.dateFrom <= date) && (!this.state.dateTo || this.state.dateTo >= date);
  },

  _isValidMonth(date) {
    let dateFromValid = true,
        dateToValid = true;
    if (this.state.dateFrom) {
      dateFromValid = this.state.dateFrom.getFullYear() < date.getFullYear() || this.state.dateFrom.getMonth() <= date.getMonth() && this.state.dateFrom.getFullYear() === date.getFullYear();
    }

    if (this.state.dateTo) {
      dateToValid = this.state.dateTo.getFullYear() > date.getFullYear() || this.state.dateTo.getMonth() >= date.getMonth() && this.state.dateTo.getFullYear() === date.getFullYear();
    }
    return dateFromValid && dateToValid;
  },

  _isValidYear(date) {
    const dateFromValid = this.state.dateFrom ? this.state.dateFrom.getFullYear() <= date.getFullYear() : true;
    const dateToValid = this.state.dateTo ? this.state.dateTo.getFullYear() >= date.getFullYear() : true;
    return dateFromValid && dateToValid;
  },

  _isValidDecade(date) {
    const dateFromValid = this.state.dateFrom ? parseInt(this.state.dateFrom.getFullYear() / 10) <= parseInt(date.getFullYear() / 10) : true;
    const dateToValid = this.state.dateTo ? parseInt(this.state.dateTo.getFullYear() / 10) >= parseInt(date.getFullYear() / 10) : true;

    return dateFromValid && dateToValid;
  },

  _isChangeable(value) {
    let isChangeable = false;

    if (this.state.displayMode == "days") {
      const newDate = new Date(this.state.year, this.state.month - 1 + value);
      isChangeable = this._isValidMonth(newDate);
    } else if (this.state.displayMode == "months") {
      const newDate = new Date(this.state.year + value, 0);
      isChangeable = this._isValidYear(newDate);
    } else if (this.state.displayMode == "years") {
      const newDecade = this.state.decade + value;
      const newDate = new Date(this.state.century * 100 + newDecade * 10, 0);
      isChangeable = this._isValidDecade(newDate);
    }

    return isChangeable;
  },

  _changeCalendar: function (value, setStateCallback) {
    const state = Object.assign({}, this.state);
    var newDate;

    if (state.displayMode == "days") {
      newDate = new Date(state.year, state.month - 1 + value);

      if (this._isValidMonth(newDate)) {
        state.month = newDate.getMonth() + 1;
        state.year = newDate.getFullYear();
      } else {
        return this;
      }
    } else if (state.displayMode == "months") {
      newDate = new Date(state.year + value, 0);

      if (this._isValidYear(newDate)) {
        state.year = newDate.getFullYear();
      } else {
        return this;
      }
    } else if (state.displayMode == "years") {
      var newDecade = state.decade + value;
      var century = state.century;

      if (newDecade < 0) {
        newDecade = 9;
        century--;
        state.century = century;
      } else if (newDecade > 9) {
        newDecade = 0;
        century++;
        state.century = century;
      }

      newDate = new Date(century * 100 + newDecade * 10, 0);

      if (this._isValidDecade(newDate)) {
        state.decade = newDecade;
      } else {
        return this;
      }
    }

    this.setState(state, setStateCallback);
    return this;
  },

  _prevClick: function () {
    this.setPrevious();
    return this;
  },

  _nextClick: function () {
    this.setNext();
    return this;
  },

  _getWeeks: function () {
    var result;

    var ths = this.getLsiValue('dayNames').map(dayName => {
      return <th className={this.getClassName().dayName} title={dayName} key={dayName}>
            <div className={this.getClassName("dayCell")}>
              {dayName.substr(0, 2)}
            </div>
          </th>;
    });

    result = <tr className={this.getClassName().dayNames}>
        <th className={this.getClassName().dayName}>
          <div className={this.getClassName("dayCell")} />
        </th>
        {ths}
      </tr>;

    return result;
  },

  _setSelectedDate: function (date, e) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange({ value: date, event: e, component: this });
    } else {
      this.setDate(date);
    }
    return this;
  },

  _setDay: function (date, e) {
    this._setSelectedDate(date, e);
    return this;
  },

  _setMonth: function (month, e) {
    e.stopPropagation();
    if (this.state.allowDisplayDays) {
      this.setState({ month: month, displayMode: "days" });
    } else {
      this._setSelectedDate(new Date(this.state.year, month - 1, 1), e);
    }
    return this;
  },

  _setYear: function (year, e) {
    e.stopPropagation();
    if (this.state.allowDisplayMonths) {
      this.setState({ year: year, displayMode: "months" });
    } else {
      this._setSelectedDate(new Date(year, 0, 1), e);
    }
    return this;
  },

  _getDayRows: function () {
    var activeMonthIndex = this.state.month - 1;
    var firstDate = new Date(this.state.year, activeMonthIndex);
    var firstMondayDate = new Date(this.state.year, activeMonthIndex, 2 - (firstDate.getDay() || 7));

    var lastDate = new Date(this.state.year, activeMonthIndex + 1, 0);
    var lastSundayDate = new Date(this.state.year, this.state.month, 7 - (lastDate.getDay() || 7));

    var activeDate = firstMondayDate;
    var today = new Date();

    var trs = [];
    var tds = [];
    while (activeDate <= lastSundayDate) {
      var className = this.getClassName().cell + ' ' + this.getClassName().day;
      let enabled = (!this.state.dateFrom || this.state.dateFrom <= activeDate) && (!this.state.dateTo || this.state.dateTo >= activeDate);

      !enabled && (className += ' ' + this.getClassName().disabled + ' ' + this.getClassName().anotherSection);

      var onClick = enabled ? this._setDay.bind(this, activeDate) : null;

      let dayCellClassName = this.getClassName("dayCell");
      if (this.getDate() && activeDate.getDate() === this.getDate().getDate() && activeDate.getMonth() === this.getDate().getMonth() && activeDate.getFullYear() === this.getDate().getFullYear()) {

        className += ' ' + this.getClassName().active;
        dayCellClassName += ' uu5-common-bg';
        onClick = null;
      } else if (activeDate.getDate() === today.getDate() && activeDate.getMonth() === today.getMonth() && activeDate.getFullYear() === today.getFullYear()) {

        className += ' ' + this.getClassName().today;
        dayCellClassName += ' uu5-common-text';
      } else if (activeDate.getMonth() === activeMonthIndex) {
        className += ' ' + this.getClassName().activeSection;
      } else {
        className += ' ' + this.getClassName().anotherSection;
      }

      tds.push(<td key={'day-' + activeDate.toISOString()} className={className} onClick={onClick}>
          <div className={dayCellClassName}>
            {activeDate.getDate() === today.getDate() && activeDate.getMonth() === today.getMonth() && activeDate.getFullYear() === today.getFullYear() ? <span className={this.getClassName("underline")}>{activeDate.getDate()}</span> : activeDate.getDate()}
          </div>
        </td>);
      if (activeDate.getDay() === 1) {
        let weekNum = this._getWeek(activeDate);
        tds.unshift(<th key={'week-' + weekNum} className={this.getClassName("weekNumber")}>
            <div className={this.getClassName("dayCell")}>{weekNum + '.'}</div>
          </th>);
      }
      if (activeDate.getDay() === 0) {
        trs.push(<tr key={'row-' + activeDate.toISOString()} className={this.getClassName().week}>
            {tds}
          </tr>);
        tds = [];
      }
      activeDate = new Date(activeDate.getFullYear(), activeDate.getMonth(), activeDate.getDate() + 1);
    }

    return trs;
  },

  _getMonthRows: function () {
    var calendar = this;
    var trs = [];
    var tds = [];
    var today = new Date();

    /*this.getLsiValue('monthNames')*/
    ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII"].forEach((name, i) => {
      var className = calendar.getClassName().cell + ' ' + calendar.getClassName().xsCell + ' ' + calendar.getClassName().month;

      const enabled = this._isValidMonth(new Date(calendar.state.year, i));

      !enabled && (className += ' ' + calendar.getClassName().disabled + ' ' + this.getClassName().anotherSection);

      var onClick = enabled ? calendar._setMonth.bind(calendar, i + 1) : null;

      if (calendar.getDate() && calendar.state.year === calendar.getDate().getFullYear() && i === calendar.getDate().getMonth()) {
        className += ' ' + calendar.getClassName().active + ' uu5-common-bg';
      } else if (calendar.state.year === today.getFullYear() && i === today.getMonth()) {
        className += ' ' + calendar.getClassName().today + ' uu5-common-text';
      }

      tds.push(<div className={className} title={name} key={i} onClick={onClick}>
          {calendar.getDate() && calendar.state.year === today.getFullYear() && i === today.getMonth() ? <span className={this.getClassName("underline")}>{name}</span> : name}
        </div>);

      if (!((i + 1) % 4)) {
        trs.push(<tr className={calendar.getClassName().months} key={i}>
            <td colSpan="8" className={calendar.getClassName().specCell}>
              {tds}
            </td>
          </tr>);
        tds = [];
      }
    });

    return trs;
  },

  _getYearRows: function () {
    var trs = [];
    var tds = [];
    var today = new Date();

    for (var i = 0; i < 13; i++) {
      var className = this.getClassName().cell + ' ' + this.getClassName().xsCell + ' ' + this.getClassName().year;
      var year = this.state.century * 100 + this.state.decade * 10 + i - 1;

      let enabled = false;
      if ((!this.state.dateFrom || this.state.dateFrom.getFullYear() <= year) && (!this.state.dateTo || this.state.dateTo.getFullYear() >= year)) {
        enabled = true;
      }

      !enabled && (className += ' ' + this.getClassName().disabled + ' ' + this.getClassName().anotherSection);

      var onClick = enabled ? this._setYear.bind(this, year) : null;

      if (this.getDate() && year === this.getDate().getFullYear()) {
        className += ' ' + this.getClassName().active + ' uu5-common-bg';
      } else if (year === today.getFullYear()) {
        className += ' ' + this.getClassName().today + ' uu5-common-text';
      } else if (i > 0 && i < 11) {
        className += ' ' + this.getClassName().activeSection;
      } else {
        className += ' ' + this.getClassName().anotherSection;
      }

      tds.push(<div className={className} key={i} onClick={onClick}>
          {this.getDate() && year === today.getFullYear() ? <span className={this.getClassName("underline")}>{year}</span> : year}
        </div>);

      if (!((i + 1) % 4)) {
        trs.push(<tr className={this.getClassName().years} key={i}>
            <td colSpan="8" className={this.getClassName().specCell}>
              {tds}
            </td>
          </tr>);
        tds = [];
      }
    }

    return trs;
  },

  _getHeader: function () {
    var prevClassName = this.getClassName().headCellPrev;
    !this._isChangeable(-1) && (prevClassName += ' ' + this.getClassName().disabled);

    var nextClassName = this.getClassName().headCellNext;
    !this._isChangeable(1) && (nextClassName += ' ' + this.getClassName().disabled);

    return <thead className={this.getClassName().thead}>
      <tr className={this.getClassName().headRow}>
        <th className={prevClassName} onClick={this._prevClick}>
          <UU5.Bricks.Icon className={this.getClassName().icon} icon={this.getDefault().prevIcon} />
        </th>
        <th className={this.getClassName().headCellHeader} colSpan="6" onClick={this.state.displayMode == "years" ? null : this._headerClick}>
          {this._getHeaderText()}
        </th>
        <th className={nextClassName} onClick={this._nextClick}>
          <UU5.Bricks.Icon className={this.getClassName().icon} icon={this.getDefault().nextIcon} />
        </th>
      </tr>
      {this.state.displayMode == "days" ? this._getWeeks() : null}
      </thead>;
  },

  _getBody: function () {
    var state = this.state;
    var trs;

    if (state.displayMode == "days") {
      trs = this._getDayRows();
    } else if (state.displayMode == "months") {
      trs = this._getMonthRows();
    } else if (state.displayMode == "years") {
      trs = this._getYearRows();
    }

    return <tbody>
      {trs}
      </tbody>;
  },

  _onSwipeEnd: function () {
    this.isSwipedRight() && this.setPrevious() || this.isSwipedLeft() && this.setNext();
    return this;
  },

  _getTableProps: function () {
    var state = this.state;
    var className = this.getClassName().table;

    if (state.displayMode == "days") {
      className += ' ' + this.getClassName().monthTable;
    } else if (state.displayMode == "months") {
      className += ' ' + this.getClassName().yearTable;
    } else if (state.displayMode == "years") {
      className += ' ' + this.getClassName().decadeTable;
    }

    return {
      className: className,
      onTouchStart: this.swipeOnTouchStart,
      onTouchMove: this.swipeOnTouchMove,
      onTouchEnd: this.swipeOnTouchEnd.bind(this, this._onSwipeEnd)
    };
  },

  // Render
  render: function () {
    return <div {...this._getMainAttrs()}>
        <table {...this._getTableProps()}>
          {this._getHeader()}
          {this._getBody()}
        </table>
      </div>;
  }
});

export default Calendar;