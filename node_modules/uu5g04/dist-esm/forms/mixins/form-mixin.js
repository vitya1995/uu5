import React from 'react';
import PropTypes from 'prop-types';
import * as UU5 from "uu5g04";
import ns from "../forms-ns.js";
import "uu5g04-bricks";

export const FormMixin = {

  //@@viewOn:mixins
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    "UU5.Forms.FormMixin": {
      warnings: {
        formInForm: 'Form control %s should not be placed in other form control %s.',
        nonRegistered: 'Form control with ID %s cannot be unregistered. Component with the ID is not registered.',
        noName: 'Form control has not any name. It will be used its ID %s.'
      },
      errors: {
        duplicateId: 'Duplicate id \'%s\' of a form control.'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    values: PropTypes.object,
    progressIndicator: PropTypes.any, // loading
    onInit: PropTypes.func,
    onSave: PropTypes.func,
    onSaveDone: PropTypes.func,
    onSaveFail: PropTypes.func,
    onSaveByKey: PropTypes.func,
    onValidate: PropTypes.func,
    onReset: PropTypes.func,
    onCancel: PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      values: null,
      progressIndicator: null,
      onInit: null,
      onSave: null,
      onSaveDone: null,
      onSaveFail: null,
      onSaveByKey: null,
      onValidate: null,
      onReset: null,
      onCancel: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    this.formInputs = {};
    this.formControls = {};

    var parentForm = this.getParentByType('isForm');
    if (parentForm) {
      this.showWarning('formInForm', [this.getTagName(), parentForm.getTagName()], {
        mixinName: "UU5.Forms.FormMixin"
      });
    }
  },

  componentDidMount() {
    this.props.values && this.setValues(this.props.values);
    typeof this.props.onInit === "function" && this.props.onInit({ component: this });
  },

  componentWillReceiveProps(nextProps) {
    this._willReceiveProps = true;
  },

  componentDidUpdate() {
    if (this._willReceiveProps) {
      this._willReceiveProps = false;
      if (this.props.controlled) {
        this.props.values && this.setValues(this.props.values);
      }
      typeof this.props.onInit === "function" && this.props.onInit({ component: this });
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  setValues(values) {
    this.eachFormInput(input => {
      let value = values[input.getName() || input.getId()];
      value !== undefined && input.setValue(value);
    });
  },

  eachFormInput(func) {
    for (var id in this.formInputs) {
      var result = func(this.formInputs[id]);
      if (result === false) {
        break;
      }
    }
    return this.formInputs;
  },

  eachFormControls(func) {
    for (let id in this.formControls) {
      let result = func(this.formControls[id]);
      if (result === false) {
        break;
      }
    }
    return this.formInputs;
  },

  isValid() {
    let result = true;

    if (typeof this.props.onValidate === 'function') {
      result = this.props.onValidate({ component: this });
    } else if (typeof this.isValid_ === 'function') {
      result = this.isValid_();
    } else {
      this.eachFormInput(formControl => {
        let newResult = typeof formControl.isValid !== 'function' || formControl.isValid();

        if (result) {
          result = newResult;
        }
      });
    }

    return result;
  },

  // for our parent type checking
  isForm: function () {
    return true;
  },

  registerFormInput(id, formInput) {
    var registeredControl = this.formInputs[id];
    if (registeredControl) {
      this.showError('duplicateId', id, {
        mixinName: "UU5.Forms.FormMixin",
        context: {
          registeredFormInput: {
            tagName: registeredControl.getTagName(),
            props: registeredControl.props,
            component: registeredControl
          },
          newFormInput: {
            tagName: formInput.getTagName(),
            props: formInput.props,
            component: formInput
          }
        }
      });
    } else {
      this.formInputs[id] = formInput;
    }
  },

  unregisterFormInput(id) {
    if (!this.formInputs[id]) {
      this.showWarning('nonRegistered', id, {
        mixinName: "UU5.Forms.FormMixin"
      });
    } else {
      delete this.formInputs[id];
    }
  },

  registerFormControls(id, formControl) {
    var registeredControl = this.formControls[id];
    if (registeredControl) {
      this.showError('duplicateId', id, {
        mixinName: "UU5.Forms.FormMixin",
        context: {
          registeredFormControl: {
            tagName: registeredControl.getTagName(),
            props: registeredControl.props,
            component: registeredControl
          },
          newFormControl: {
            tagName: formControl.getTagName(),
            props: formControl.props,
            component: formControl
          }
        }
      });
    } else {
      this.formControls[id] = formControl;
    }
  },

  unregisterFormControls(id) {
    if (!this.formControls[id]) {
      this.showWarning('nonRegistered', id, {
        mixinName: "UU5.Forms.FormMixin"
      });
    } else {
      delete this.formControls[id];
    }
  },

  getValues() {
    var values = {};
    this._eachFormInputWithName(function (name, input) {
      values[name] = input.getValue();
    });
    return values;
  },

  getInputs() {
    var inputs = {};
    this._eachFormInputWithName(function (name, input) {
      inputs[name] = input;
    });
    return inputs;
  },

  getInputByName(name) {
    var result = null;

    this._eachFormInputWithName((k, input) => {
      var compare = k === name;
      compare && (result = input);
      return !compare;
    });

    return result;
  },

  getFormChildren(fce) {
    return <form {...this._getMainAttrs()}>
        <UU5.Bricks.AlertBus ref_={alertBus => this._alertBus = alertBus} forceRender />
        {typeof fce === 'function' ? fce() : this.getChildren()}
      </form>;
  },

  getAlertBus() {
    return this._alertBus;
  },

  save(values) {
    values = values || this.getValues();
    if (typeof this.props.onSave === 'function') {
      typeof this.props.onSaveDone === 'function' ? this.setPending(() => this.props.onSave({ component: this, values: values })) : this.props.onSave({ component: this, values: values });
    } else if (typeof this.save_ === 'function') {
      this.save_();
    }
    return this;
  },

  saveDone(dtoOut) {
    if (typeof this.props.onSaveDone === 'function') {
      this.setReady(() => this.props.onSaveDone({
        component: this,
        dtoOut: dtoOut
      }));
    } else if (typeof this.saveDone_ === 'function') {
      this.saveDone_();
    }
    return this;
  },

  saveFail(dtoOut) {
    if (typeof this.props.onSaveFail === 'function') {
      this.setReady(() => this.props.onSaveFail({
        component: this,
        dtoOut: dtoOut
      }));
    } else if (typeof this.saveFail_ === 'function') {
      this.saveFail_();
    }
    return this;
  },

  validate() {
    let result = false;
    result = this.isValid();
    let alertBus = this.getAlertBus();
    alertBus && alertBus.setAlert(result ? {
      colorSchema: 'success',
      closeTimer: 1000,
      content: this.getLsiValue('validContent')
    } : {
      colorSchema: 'danger',
      closeTimer: 5000,
      content: this.getLsiValue('invalidContent')
    });
    return this;
  },

  setPending(setStateCallback) {
    let inputs = this.getInputs();
    Object.keys(inputs).forEach(key => {
      inputs[key].disable();
    });

    let alertBus = this.getAlertBus();
    alertBus.addAlertToPosition(0, {
      id: this.getId() + "-pending",
      closeDisabled: true,
      content: this.props.progressIndicator || <UU5.Bricks.Loading />
    });
    this.eachFormControls(formControls => formControls.disable(setStateCallback));

    return this;
  },

  setReady(setStateCallback) {
    let inputs = this.getInputs();
    Object.keys(inputs).forEach(key => {
      inputs[key].enable();
    });

    let alertBus = this.getAlertBus();
    alertBus.removeAlert(this.getId() + "-pending");
    this.eachFormControls(formControls => formControls.enable(setStateCallback));

    return this;
  },

  reset(setStateCallback) {
    if (typeof this.props.onReset === 'function') {
      this.props.onReset({ component: this });
    } else if (typeof this.reset_ === 'function') {
      this.reset_();
    } else {
      let counter = 0;
      for (let id in this.formInputs) {
        typeof this.formInputs[id].reset === 'function' && counter++;
      }

      let newSetStateCallback = UU5.Common.Tools.buildCounterCallback(setStateCallback, counter);

      for (let id in this.formInputs) {
        typeof this.formInputs[id].reset === 'function' && this.formInputs[id].reset(newSetStateCallback);
      }
    }
    return this;
  },

  cancel() {
    if (typeof this.props.onCancel === 'function') {
      this.props.onCancel({ component: this });
    } else if (typeof this.cancel_ === 'function') {
      this.cancel_();
    }
    return this;
  },

  getSaveFormEvents(func) {
    const CTRL_KEY = 17,
          S_KEY = 83;
    let down = false;

    return {
      onKeyDown: e => {
        let key = e.which || e.keyCode;
        let isCtrlPressed = e.ctrlKey ? e.ctrlKey : key === CTRL_KEY;

        if (isCtrlPressed && key === S_KEY) {
          if (down) return;
          down = true;

          e.preventDefault();
          e.stopPropagation();
          if (typeof func === 'function') func({ component: this, event: e });
        }
      },
      onKeyUp: e => {
        let key = e.which || e.keyCode;
        let isCtrlPressed = e.ctrlKey ? e.ctrlKey : key === CTRL_KEY;

        if (isCtrlPressed && key === S_KEY) {
          down = false;
        }
      }
    };
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _eachFormInputWithName(func) {
    var form = this;
    this.eachFormInput(input => {
      var name = input.getName();
      if (!name) {
        form.showWarning('noName', input.getId(), {
          mixinName: "UU5.Forms.FormMixin",
          context: {
            input: {
              tagName: input.getTagName(),
              props: input.props,
              component: input
            }
          }
        });
        name = input.getId();
      }
      func(name, input);
    });
    return this;
  },

  _getMainAttrs() {
    let mainAttrs = this.getMainAttrs();

    if (typeof this.props.onSaveByKey === "function") {
      let saveEvents = this.getSaveFormEvents(this.props.onSaveByKey);
      Object.keys(saveEvents).forEach(key => {
        let fce = mainAttrs[key];
        mainAttrs[key] = e => {
          typeof fce === "function" && fce(e);
          saveEvents[key](e);
        };
      });
    }

    return mainAttrs;
  }
};

export default FormMixin;