import PropTypes from "prop-types";

import Environment from "../environment/environment.js";
import Tools from "./tools.js";

export const ResizeMixin = {
  //@@viewOn:statics
  statics: {
    "UU5.Common.ResizeMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      defaults: {
        minResizeInterval: 100
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    resizeInterval: PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      resizeInterval: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentDidMount() {
    this._startResize();
  },

  componentDidUpdate(prevProps, prevState) {
    if (this.props.resizeInterval !== prevProps.resizeInterval) {
      this._resizeMixinInterval && Environment.TimeManager.clearInterval(this._resizeMixinInterval);
      this._startResize();
    }
  },

  componentWillUnmount() {
    this._resizeMixinInterval && Environment.TimeManager.clearInterval(this._resizeMixinInterval);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonResizeMixin() {
    return this.hasMixin("UU5.Common.ResizeMixin");
  },

  getUU5CommonResizeMixinProps() {
    return {
      resizeInterval: this.props.resizeInterval
    };
  },

  getUU5CommonResizeMixinPropsToPass() {
    return {};
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _startResize() {
    this._resizeWidth = 0;

    this._resizeMixinInterval = Environment.TimeManager.setInterval(() => {
      let newWidth = Tools.getWidth(this.findDOMNode());
      let oldWidth = this._resizeWidth;

      if (oldWidth === newWidth) {
        if (this._resizeStart) {
          this._resizeStart = false;
          if (typeof this.onResizeEnd_ === "function") {
            this.onResizeEnd_(oldWidth);
          }
        }
      } else {
        this._resizeWidth = newWidth;

        if (!this._resizeStart) {
          this._resizeStart = true;
          if (typeof this.onResizeStart_ === "function") {
            this.onResizeStart_(newWidth);
            return;
          }
        }

        // call too if onResizeStart_ is not set
        if (typeof this.onResize_ === "function") {
          this.onResize_(oldWidth, newWidth);
        }
      }
    }, this._getResizeInterval());
  },

  _getResizeInterval() {
    let interval = Environment.resizeInterval;

    if (this.props.resizeInterval) {
      interval = this.props.resizeInterval;
    } else if (this.getOpt() && this.getOpt("resizeInterval")) {
      interval = this.getOpt("resizeInterval");
    }

    return Math.max(interval, this.getDefault("minResizeInterval", "UU5.Common.ResizeMixin"));
  }
  //@@viewOff:componentSpecificHelpers
};

export default ResizeMixin;