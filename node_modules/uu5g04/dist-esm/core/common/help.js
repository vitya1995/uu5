import React from 'react';
import createReactClass from 'create-react-class';
import ns from "./common-ns.js";
import PropTypes from 'prop-types';
import BaseMixin from './base-mixin.js';
import ElementaryMixin from './elementary-mixin.js';
import Tools from './tools.js';
import PureRenderMixin from "./pure-render-mixin";
import ContentMixin from './content-mixin.js';

export const Help = createReactClass({

  //@@viewOn:mixins
  mixins: [BaseMixin, ElementaryMixin, PureRenderMixin, ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Help"),
    classNames: {
      main: ns.css("help")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    tagName: PropTypes.string,
    target: PropTypes.oneOf(['_blank', '_parent', '_top', '_self'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      tagName: "UU5.Common.Help",
      target: "_blank"
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      errorDetails: false,
      responseLink: null
    };
  },

  componentWillMount() {
    let tagNameArr = this.props.tagName.split('.');
    let libraryName = tagNameArr[0] + '.' + tagNameArr[1];
    let pageName = "/page?code=" + tagNameArr[0].toLowerCase() + tagNameArr[1] + tagNameArr[2];
    Tools.loadLibrary(libraryName, (response, error) => {
      if (!error && response && response.doc) {
        this.setState({ responseLink: response.doc + pageName });
      }
    });
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getLink() {
    if (this.state.responseLink) {
      return Tools.findComponent('UU5.Bricks.Link', Object.assign(this.getMainPropsToPass(), {
        href: this.state.responseLink,
        content: this.props.content || this.props.children || this.props.tagName,
        target: this.props.target
      }));
    } else {
      return this.props.tagName;
    }
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this._getLink();
  }
  //@@viewOff:render
});

export default Help;