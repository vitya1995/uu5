import React from 'react';
import PropTypes from 'prop-types';
import ns from "./common-ns.js";
import Tools from './tools.js';

export const ElementaryMixin = {

  //@@viewOn:statics
  statics: {
    "UU5.Common.ElementaryMixin": {
      requiredMixins: ["UU5.Common.BaseMixin"],
      classNames: {
        hidden: ns.css("hidden"),
        selected: ns.css("selected"),
        disabled: ns.css("disabled"),
        disabledCover: ns.css("disabled-cover"),
        disabledCoverTransparent: ns.css("disabled-cover-transparent")
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    hidden: PropTypes.bool,
    disabled: PropTypes.bool,
    selected: PropTypes.bool,
    controlled: PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      hidden: false,
      disabled: false,
      selected: false,
      controlled: true
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    // initialize
    this.registerMixin("UU5.Common.ElementaryMixin");
    // state
    return {
      hidden: this.props.hidden,
      disabled: this.props.disabled,
      selected: this.props.selected
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.controlled) {
      this.setState({
        hidden: nextProps.hidden,
        disabled: nextProps.disabled,
        selected: nextProps.selected
      });
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5CommonElementaryMixin: function () {
    return this.hasMixin("UU5.Common.ElementaryMixin");
  },

  getUU5CommonElementaryMixinProps: function () {
    return {
      hidden: this.isHidden(),
      disabled: this.isDisabled(),
      selected: this.isSelected()
    };
  },

  getUU5CommonElementaryMixinPropsToPass: function () {
    return {
      hidden: this.isHidden(),
      disabled: this.isDisabled(),
      selected: this.isSelected(),
      controlled: true
    };
  },

  setHiddenValue: function (value, setStateCallback) {
    this.setState({ hidden: value }, setStateCallback);
    return this;
  },

  hide: function (setStateCallback) {
    if (typeof this.hide_ === 'function') {
      this.hide_(setStateCallback);
    } else {
      this.setHiddenValue(true, setStateCallback);
    }
    return this;
  },

  show: function (setStateCallback) {
    if (typeof this.show_ === 'function') {
      this.show_(setStateCallback);
    } else {
      this.setHiddenValue(false, setStateCallback);
    }
    return this;
  },

  isHidden: function () {
    return this.state.hidden;
  },

  toggleHidden: function (setStateCallback) {
    if (typeof this.toggleHidden_ === 'function') {
      this.toggleHidden_(setStateCallback);
    } else {
      this.setState(function (state) {
        return { hidden: !state.hidden };
      }, setStateCallback);
    }
    return this;
  },

  setDisabledValue: function (value, setStateCallback) {
    this.setState({ disabled: value }, setStateCallback);
    return this;
  },

  disable: function (setStateCallback) {
    if (typeof this.disable_ === 'function') {
      this.disable_(setStateCallback);
    } else {
      this.setDisabledValue(true, setStateCallback);
    }
    return this;
  },

  enable: function (setStateCallback) {
    if (typeof this.enable_ === 'function') {
      this.enable_(setStateCallback);
    } else {
      this.setDisabledValue(false, setStateCallback);
    }
    return this;
  },

  isDisabled: function () {
    return this.state.disabled;
  },

  toggleDisabled: function (setStateCallback) {
    if (typeof this.toggleDisabled_ === 'function') {
      this.toggleDisabled_(setStateCallback);
    } else {
      this.setState(function (state) {
        return { disabled: !state.disabled };
      }, setStateCallback);
    }
    return this;
  },

  setSelectedValue: function (value, setStateCallback) {
    this.setState({ selected: value }, setStateCallback);
    return this;
  },

  select: function (setStateCallback) {
    if (typeof this.select_ === 'function') {
      this.select_(setStateCallback);
    } else {
      this.setSelectedValue(true, setStateCallback);
    }
    return this;
  },

  deselect: function (setStateCallback) {
    if (typeof this.deselect_ === 'function') {
      this.deselect_(setStateCallback);
    } else {
      this.setSelectedValue(false, setStateCallback);
    }
    return this;
  },

  isSelected: function () {
    return this.state.selected;
  },

  toggleSelected: function (setStateCallback) {
    if (typeof this.toggleSelected_ === 'function') {
      this.toggleSelected_(setStateCallback);
    } else {
      this.setState(function (state) {
        return { selected: !state.selected };
      }, setStateCallback);
    }
    return this;
  },

  buildMainAttrs: function (mainAttrs) {
    var newMainAttrs = Tools.mergeDeep({}, mainAttrs || this.getUU5CommonBaseMixinProps && this.getUU5CommonBaseMixinProps().mainAttrs, {
      title: this.getTooltip(),
      className: this.getFullClassName()
    });
    newMainAttrs.className = this.getHiddenClassName(newMainAttrs.className);
    newMainAttrs.className = this.getDisabledClassName(newMainAttrs.className);
    newMainAttrs.className = this.getSelectedClassName(newMainAttrs.className);

    let style = typeof this.props.style === 'string' ? this.__styleStringToObject(this.props.style) : this.props.style;

    newMainAttrs.style = Tools.mergeDeep({}, newMainAttrs.style, style);
    return newMainAttrs;
  },

  getHiddenClassName: function (className) {
    var hiddenClassName = '';
    if (this.isHidden()) {
      hiddenClassName = this.getClassName('hidden') || this.getClassName(null, "UU5.Common.ElementaryMixin").hidden;
    }
    return className ? (className + ' ' + hiddenClassName).trim() : hiddenClassName;
  },

  getDisabledClassName: function (className) {
    var disabledClassName = '';
    if (this.isDisabled()) {
      disabledClassName = this.getClassName('disabled') || this.getClassName(null, "UU5.Common.ElementaryMixin").disabled;
    }
    return className ? (className + ' ' + disabledClassName).trim() : disabledClassName;
  },

  getSelectedClassName: function (className) {
    var selectedClassName = '';
    if (this.isSelected()) {
      selectedClassName = this.getClassName('selected') || this.getClassName(null, "UU5.Common.ElementaryMixin").selected;
    }
    return className ? (className + ' ' + selectedClassName).trim() : selectedClassName;
  },

  getDisabledCover: function () {
    var className = this.getClassName('disabledCover') || this.getClassName(null, "UU5.Common.ElementaryMixin").disabledCover;
    return this.isDisabled() ? React.createElement('span', { className: className }) : null;
  },

  getDisabledCoverTransparent: function () {
    var className = this.getClassName('disabledCoverTransparent') || this.getClassName(null, "UU5.Common.ElementaryMixin").disabledCoverTransparent;
    return this.isDisabled() ? React.createElement('span', { className: className }) : null;
  }
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

};

export default ElementaryMixin;