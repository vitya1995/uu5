import React from 'react';
import createReactClass from 'create-react-class';
import ns from "./common-ns.js";
import PropTypes from 'prop-types';
import Environment from '../environment/environment.js';
import BaseMixin from './base-mixin.js';
import ElementaryMixin from './elementary-mixin.js';
import NestingLevelMixin from './nesting-level-mixin.js';
import ContentMixin from './content-mixin.js';
import Div from './div.js';
import PureRenderMixin from "./pure-render-mixin.js";

import './error.less';

export const Error = createReactClass({

  //@@viewOn:mixins
  mixins: [BaseMixin, ElementaryMixin, NestingLevelMixin, ContentMixin, PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: ns.name("Error"),
    nestingLevelList: Environment.getNestingLevelList('smallBox', 'inline'),
    classNames: {
      main: ns.css("error"),
      silent: ns.css("error-silent"),
      nestingLevelSmallBox: ns.css("error-small-box"),
      nestingLevelInline: ns.css("error-inline"),
      icon: ns.css("error-icon"),
      mainWrapper: ns.css("error-main-wrapper"),
      iconWrapper: ns.css("error-icon-wrapper"),
      content: ns.css("error-content"),
      preWrapper: ns.css("error-pre-wrapper"),
      pre: ns.css("error-pre"),
      errorDetails: ns.css("error-details"),
      errorDetailsButton: ns.css("error-details-button"),
      errorDetailsBody: ns.css("error-details-body"),
      errorInfo: ns.css("error-info")
    },
    defaults: {
      content: 'Error'
    },
    opt: {
      nestingLevelWrapper: true
    },
    lsi: () => Environment.Lsi.Common.error
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    errorData: PropTypes.object,
    errorDataSpace: PropTypes.number, // TODO: set deprecated
    error: PropTypes.shape({
      stack: PropTypes.string,
      name: PropTypes.string,
      message: PropTypes.string
    }),
    silent: PropTypes.bool,
    inline: PropTypes.bool,
    moreInfo: PropTypes.bool,
    errorInfo: PropTypes.any // any - contact info link (ex. link to helpdesk)
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      errorData: null,
      errorDataSpace: null, // TODO: set deprecated
      error: null,
      silent: false,
      inline: false,
      moreInfo: false,
      errorInfo: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      errorDetails: false
    };
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs() {
    let attrs = this.getMainAttrs();

    switch (this.props.inline ? "inline" : this.getNestingLevel()) {
      case 'inline':
        attrs.className += ' ' + this.getClassName('nestingLevelInline');
        break;
      default:
        attrs.className += ' ' + this.getClassName('nestingLevelSmallBox');
    }

    if (this.props.silent) {
      attrs.className += ' ' + this.getClassName('silent');
    }

    return attrs;
  },

  _getContent() {
    let message = this.props.content || this.props.children || this.getDefault().content;
    let errorData;

    if (this.props.errorData && !this.props.moreInfo) {
      errorData = <div className={this.getClassName("preWrapper")} key="errorData">
          <pre className={this.getClassName("pre")}>
            {JSON.stringify(this.props.errorData, null, 2)}
          </pre>
        </div>;
    }

    return errorData ? [message, errorData] : message;
  },

  _getMoreInfoContent(message) {
    let content = this._getErrorDetailContent(message);
    let className = this.getClassName("errorDetails");
    this.props.silent && (className += ' ' + this.getClassName("silent"));

    return <div className={className} key="errorDetails">
        <a className={this.getClassName("errorDetailsButton")} onClick={this._errorDetailsToggle}>
          {this.getLsiComponent(this.state.errorDetails ? 'hideErrorDetails' : 'showErrorDetails')}
          {this.state.errorDetails ? <span className={"mdi mdi-menu-up " + this.getClassName("icon")} /> : <span className={"mdi mdi-menu-down " + this.getClassName("icon")} />}
        </a>

        <div className={this.getClassName("errorDetailsBody")} style={{ display: this.state.errorDetails ? 'block' : 'none' }}>
          <Div className={this.getClassName("errorInfo")} style={{ display: this.props.errorInfo ? 'block' : 'none' }} content={this.props.errorInfo} />
          <div className={this.getClassName("preWrapper")}>
            <pre className={this.getClassName("pre")}>
              {JSON.stringify(content, null, 2)}
            </pre>
          </div>
        </div>
      </div>;
  },

  _getErrorDetailContent(message) {
    let session = Environment.getSession();
    let navigator = window.navigator || {};

    let errorMessage = message.toString();
    this.props.error && this.props.error.message && (errorMessage = this.props.error.message);

    let stackTrace = this.props.error ? this.props.error.stack : new window.Error().stack;

    return {
      message: errorMessage,
      data: this.props.errorData,
      stackTrace: stackTrace.split('\n'),
      uuIdentity: session ? session.uuIdentity : null,
      url: window.location.href,
      time: new Date().toISOString(),
      navigator: {
        appCodeName: navigator.appCodeName,
        appName: navigator.appName,
        appVersion: navigator.appVersion,
        connection: navigator.connection,
        cookieEnabled: navigator.cookieEnabled,
        doNotTrack: navigator.doNotTrack,
        hardwareConcurrency: navigator.hardwareConcurrency,
        language: navigator.language,
        languages: navigator.languages,
        maxTouchPoints: navigator.maxTouchPoints,
        onLine: navigator.onLine,
        platform: navigator.platform,
        product: navigator.product,
        productSub: navigator.productSub,
        userAgent: navigator.userAgent,
        vendor: navigator.vendor,
        vendorSub: navigator.vendorSub
      },
      libs: this._getRuntimeLibraries()
    };
  },

  _getRuntimeLibraries() {
    let libraries = {};
    libraries[Environment.name] = Environment.version;

    let runtimeLibraries = Environment.getRuntimeLibraries();
    Object.keys(runtimeLibraries).forEach(key => {
      libraries[key] = runtimeLibraries[key].version;
    });

    return libraries;
  },

  _errorDetailsToggle() {
    this.setState(state => {
      return { errorDetails: !state.errorDetails };
    });
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    let component;
    switch (this.props.inline ? "inline" : this.getNestingLevel()) {
      case 'smallBox':
        component = <div {...this._getMainAttrs()}>
            <div className={this.getClassName("mainWrapper")}>
              <div className={this.getClassName("iconWrapper")}>
                <span className={"mdi mdi-alert-circle " + this.getClassName("icon")} />
              </div>
              <div className={this.getClassName().content}>
                {this._getContent()}
              </div>
            </div>
            {this.props.moreInfo && this._getMoreInfoContent(this.props.content || this.props.children || this.getDefault().content)}


            {this.getDisabledCover()}
          </div>;
        break;
      case 'inline':
        component = <span {...this._getMainAttrs()}>
            {this._getContent()}
            {this.getDisabledCover()}
          </span>;
        break;
      default:
        component = null;
    }

    return component;
  }
  //@@viewOff:render
});

export default Error;