const UU5 = window.UU5 || {};

import Environment from './environment/environment.js';
let environment = Environment;

import * as Common from './common/common.js';
export { Common };
UU5.Common = Common;

if (UU5.Environment) {
  environment = UU5.Common.Tools.merge(Environment, UU5.Environment);
}

import EventListener from './common/event-listener.js';
environment.EventListener = new EventListener();

import CommonLsi from './common/common-lsi.js';
environment.Lsi.Common = CommonLsi;

export { environment as Environment };
UU5.Environment = environment;

// import * as Layout from './layout/layout.js';
// export {Layout};
// UU5.Layout = Layout;

import * as Icons from './environment/icons.js';
export { Icons };
UU5.Icons = Icons;

// workaround so that on-demand loaded UU5 modules can insert their own components
// into UU5 exports; i.e. if an application uses following:
//  import * as UU5 from "uu5g04";  // UU5 is a local variable containing new (separate) instance of exports
//  import "uu5g04-forms";
// then uu5g04-forms (UU5 module) wants to add "Forms" key into "root" of uu5g04 exports which
// isn't possible (exports are frozen by SystemJS), so instead uu5g04-forms will inject its components into
// pre-existing "Forms" key within uu5g04 exports
const Bricks = UU5.Bricks = {};
export { Bricks };

const Forms = UU5.Forms = {};
export { Forms };

const CodeKit = UU5.CodeKit = {};
export { CodeKit };

// const Addons = UU5.Addons = {};
// export {Addons};
// ...

window.UU5 = UU5;
export default UU5;