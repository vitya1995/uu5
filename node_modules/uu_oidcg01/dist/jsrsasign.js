(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Jsrsasign", [], factory);
	else if(typeof exports === 'object')
		exports["Jsrsasign"] = factory();
	else
		root["Jsrsasign"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!********************************!*\
  !*** ../.tmp/lib/jsrsasign.js ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	// Copyright (c) 2005  Tom Wu
	// All Rights Reserved.
	// See "LICENSE" for details.

	// Basic JavaScript BN library - subset useful for RSA encryption.

	// Bits per digit
	var dbits;

	// JavaScript engine analysis
	var canary = 0xdeadbeefcafe;
	var j_lm = ((canary&0xffffff)==0xefcafe);

	// (public) Constructor
	function BigInteger(a,b,c) {
	  if(a != null)
	    if("number" == typeof a) this.fromNumber(a,b,c);
	    else if(b == null && "string" != typeof a) this.fromString(a,256);
	    else this.fromString(a,b);
	}

	// return new, unset BigInteger
	function nbi() { return new BigInteger(null); }

	// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.

	// am1: use a single mult and divide to get the high bits,
	// max digit bits should be 26 because
	// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	function am1(i,x,w,j,c,n) {
	  while(--n >= 0) {
	    var v = x*this[i++]+w[j]+c;
	    c = Math.floor(v/0x4000000);
	    w[j++] = v&0x3ffffff;
	  }
	  return c;
	}
	// am2 avoids a big mult-and-extract completely.
	// Max digit bits should be <= 30 because we do bitwise ops
	// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	function am2(i,x,w,j,c,n) {
	  var xl = x&0x7fff, xh = x>>15;
	  while(--n >= 0) {
	    var l = this[i]&0x7fff;
	    var h = this[i++]>>15;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
	    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
	    w[j++] = l&0x3fffffff;
	  }
	  return c;
	}
	// Alternately, set max digit bits to 28 since some
	// browsers slow down when dealing with 32-bit numbers.
	function am3(i,x,w,j,c,n) {
	  var xl = x&0x3fff, xh = x>>14;
	  while(--n >= 0) {
	    var l = this[i]&0x3fff;
	    var h = this[i++]>>14;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x3fff)<<14)+w[j]+c;
	    c = (l>>28)+(m>>14)+xh*h;
	    w[j++] = l&0xfffffff;
	  }
	  return c;
	}
	if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
	  BigInteger.prototype.am = am2;
	  dbits = 30;
	}
	else if(j_lm && (navigator.appName != "Netscape")) {
	  BigInteger.prototype.am = am1;
	  dbits = 26;
	}
	else { // Mozilla/Netscape seems to prefer am3
	  BigInteger.prototype.am = am3;
	  dbits = 28;
	}

	BigInteger.prototype.DB = dbits;
	BigInteger.prototype.DM = ((1<<dbits)-1);
	BigInteger.prototype.DV = (1<<dbits);

	var BI_FP = 52;
	BigInteger.prototype.FV = Math.pow(2,BI_FP);
	BigInteger.prototype.F1 = BI_FP-dbits;
	BigInteger.prototype.F2 = 2*dbits-BI_FP;

	// Digit conversions
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	var BI_RC = new Array();
	var rr,vv;
	rr = "0".charCodeAt(0);
	for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	rr = "a".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	rr = "A".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	function int2char(n) { return BI_RM.charAt(n); }
	function intAt(s,i) {
	  var c = BI_RC[s.charCodeAt(i)];
	  return (c==null)?-1:c;
	}

	// (protected) copy this to r
	function bnpCopyTo(r) {
	  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
	  r.t = this.t;
	  r.s = this.s;
	}

	// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x) {
	  this.t = 1;
	  this.s = (x<0)?-1:0;
	  if(x > 0) this[0] = x;
	  else if(x < -1) this[0] = x+this.DV;
	  else this.t = 0;
	}

	// return bigint initialized to value
	function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	// (protected) set from string and radix
	function bnpFromString(s,b) {
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 256) k = 8; // byte array
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else { this.fromRadix(s,b); return; }
	  this.t = 0;
	  this.s = 0;
	  var i = s.length, mi = false, sh = 0;
	  while(--i >= 0) {
	    var x = (k==8)?s[i]&0xff:intAt(s,i);
	    if(x < 0) {
	      if(s.charAt(i) == "-") mi = true;
	      continue;
	    }
	    mi = false;
	    if(sh == 0)
	      this[this.t++] = x;
	    else if(sh+k > this.DB) {
	      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
	      this[this.t++] = (x>>(this.DB-sh));
	    }
	    else
	      this[this.t-1] |= x<<sh;
	    sh += k;
	    if(sh >= this.DB) sh -= this.DB;
	  }
	  if(k == 8 && (s[0]&0x80) != 0) {
	    this.s = -1;
	    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
	  }
	  this.clamp();
	  if(mi) BigInteger.ZERO.subTo(this,this);
	}

	// (protected) clamp off excess high words
	function bnpClamp() {
	  var c = this.s&this.DM;
	  while(this.t > 0 && this[this.t-1] == c) --this.t;
	}

	// (public) return string representation in given radix
	function bnToString(b) {
	  if(this.s < 0) return "-"+this.negate().toString(b);
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else return this.toRadix(b);
	  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
	  var p = this.DB-(i*this.DB)%k;
	  if(i-- > 0) {
	    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
	    while(i >= 0) {
	      if(p < k) {
	        d = (this[i]&((1<<p)-1))<<(k-p);
	        d |= this[--i]>>(p+=this.DB-k);
	      }
	      else {
	        d = (this[i]>>(p-=k))&km;
	        if(p <= 0) { p += this.DB; --i; }
	      }
	      if(d > 0) m = true;
	      if(m) r += int2char(d);
	    }
	  }
	  return m?r:"0";
	}

	// (public) -this
	function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

	// (public) |this|
	function bnAbs() { return (this.s<0)?this.negate():this; }

	// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a) {
	  var r = this.s-a.s;
	  if(r != 0) return r;
	  var i = this.t;
	  r = i-a.t;
	  if(r != 0) return (this.s<0)?-r:r;
	  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
	  return 0;
	}

	// returns bit length of the integer x
	function nbits(x) {
	  var r = 1, t;
	  if((t=x>>>16) != 0) { x = t; r += 16; }
	  if((t=x>>8) != 0) { x = t; r += 8; }
	  if((t=x>>4) != 0) { x = t; r += 4; }
	  if((t=x>>2) != 0) { x = t; r += 2; }
	  if((t=x>>1) != 0) { x = t; r += 1; }
	  return r;
	}

	// (public) return the number of bits in "this"
	function bnBitLength() {
	  if(this.t <= 0) return 0;
	  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
	}

	// (protected) r = this << n*DB
	function bnpDLShiftTo(n,r) {
	  var i;
	  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
	  for(i = n-1; i >= 0; --i) r[i] = 0;
	  r.t = this.t+n;
	  r.s = this.s;
	}

	// (protected) r = this >> n*DB
	function bnpDRShiftTo(n,r) {
	  for(var i = n; i < this.t; ++i) r[i-n] = this[i];
	  r.t = Math.max(this.t-n,0);
	  r.s = this.s;
	}

	// (protected) r = this << n
	function bnpLShiftTo(n,r) {
	  var bs = n%this.DB;
	  var cbs = this.DB-bs;
	  var bm = (1<<cbs)-1;
	  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
	  for(i = this.t-1; i >= 0; --i) {
	    r[i+ds+1] = (this[i]>>cbs)|c;
	    c = (this[i]&bm)<<bs;
	  }
	  for(i = ds-1; i >= 0; --i) r[i] = 0;
	  r[ds] = c;
	  r.t = this.t+ds+1;
	  r.s = this.s;
	  r.clamp();
	}

	// (protected) r = this >> n
	function bnpRShiftTo(n,r) {
	  r.s = this.s;
	  var ds = Math.floor(n/this.DB);
	  if(ds >= this.t) { r.t = 0; return; }
	  var bs = n%this.DB;
	  var cbs = this.DB-bs;
	  var bm = (1<<bs)-1;
	  r[0] = this[ds]>>bs;
	  for(var i = ds+1; i < this.t; ++i) {
	    r[i-ds-1] |= (this[i]&bm)<<cbs;
	    r[i-ds] = this[i]>>bs;
	  }
	  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
	  r.t = this.t-ds;
	  r.clamp();
	}

	// (protected) r = this - a
	function bnpSubTo(a,r) {
	  var i = 0, c = 0, m = Math.min(a.t,this.t);
	  while(i < m) {
	    c += this[i]-a[i];
	    r[i++] = c&this.DM;
	    c >>= this.DB;
	  }
	  if(a.t < this.t) {
	    c -= a.s;
	    while(i < this.t) {
	      c += this[i];
	      r[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    c += this.s;
	  }
	  else {
	    c += this.s;
	    while(i < a.t) {
	      c -= a[i];
	      r[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    c -= a.s;
	  }
	  r.s = (c<0)?-1:0;
	  if(c < -1) r[i++] = this.DV+c;
	  else if(c > 0) r[i++] = c;
	  r.t = i;
	  r.clamp();
	}

	// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a,r) {
	  var x = this.abs(), y = a.abs();
	  var i = x.t;
	  r.t = i+y.t;
	  while(--i >= 0) r[i] = 0;
	  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
	  r.s = 0;
	  r.clamp();
	  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
	}

	// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r) {
	  var x = this.abs();
	  var i = r.t = 2*x.t;
	  while(--i >= 0) r[i] = 0;
	  for(i = 0; i < x.t-1; ++i) {
	    var c = x.am(i,x[i],r,2*i,0,1);
	    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
	      r[i+x.t] -= x.DV;
	      r[i+x.t+1] = 1;
	    }
	  }
	  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
	  r.s = 0;
	  r.clamp();
	}

	// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m,q,r) {
	  var pm = m.abs();
	  if(pm.t <= 0) return;
	  var pt = this.abs();
	  if(pt.t < pm.t) {
	    if(q != null) q.fromInt(0);
	    if(r != null) this.copyTo(r);
	    return;
	  }
	  if(r == null) r = nbi();
	  var y = nbi(), ts = this.s, ms = m.s;
	  var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
	  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
	  else { pm.copyTo(y); pt.copyTo(r); }
	  var ys = y.t;
	  var y0 = y[ys-1];
	  if(y0 == 0) return;
	  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
	  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
	  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	  y.dlShiftTo(j,t);
	  if(r.compareTo(t) >= 0) {
	    r[r.t++] = 1;
	    r.subTo(t,r);
	  }
	  BigInteger.ONE.dlShiftTo(ys,t);
	  t.subTo(y,y);	// "negative" y so we can replace sub with am later
	  while(y.t < ys) y[y.t++] = 0;
	  while(--j >= 0) {
	    // Estimate quotient digit
	    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
	    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
	      y.dlShiftTo(j,t);
	      r.subTo(t,r);
	      while(r[i] < --qd) r.subTo(t,r);
	    }
	  }
	  if(q != null) {
	    r.drShiftTo(ys,q);
	    if(ts != ms) BigInteger.ZERO.subTo(q,q);
	  }
	  r.t = ys;
	  r.clamp();
	  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
	  if(ts < 0) BigInteger.ZERO.subTo(r,r);
	}

	// (public) this mod a
	function bnMod(a) {
	  var r = nbi();
	  this.abs().divRemTo(a,null,r);
	  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
	  return r;
	}

	// Modular reduction using "classic" algorithm
	function Classic(m) { this.m = m; }
	function cConvert(x) {
	  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	  else return x;
	}
	function cRevert(x) { return x; }
	function cReduce(x) { x.divRemTo(this.m,null,x); }
	function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	Classic.prototype.convert = cConvert;
	Classic.prototype.revert = cRevert;
	Classic.prototype.reduce = cReduce;
	Classic.prototype.mulTo = cMulTo;
	Classic.prototype.sqrTo = cSqrTo;

	// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit() {
	  if(this.t < 1) return 0;
	  var x = this[0];
	  if((x&1) == 0) return 0;
	  var y = x&3;		// y == 1/x mod 2^2
	  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
	  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
	  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
	  // last step - calculate inverse mod DV directly;
	  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
	  // we really want the negative inverse, and -DV < y < DV
	  return (y>0)?this.DV-y:-y;
	}

	// Montgomery reduction
	function Montgomery(m) {
	  this.m = m;
	  this.mp = m.invDigit();
	  this.mpl = this.mp&0x7fff;
	  this.mph = this.mp>>15;
	  this.um = (1<<(m.DB-15))-1;
	  this.mt2 = 2*m.t;
	}

	// xR mod m
	function montConvert(x) {
	  var r = nbi();
	  x.abs().dlShiftTo(this.m.t,r);
	  r.divRemTo(this.m,null,r);
	  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
	  return r;
	}

	// x/R mod m
	function montRevert(x) {
	  var r = nbi();
	  x.copyTo(r);
	  this.reduce(r);
	  return r;
	}

	// x = x/R mod m (HAC 14.32)
	function montReduce(x) {
	  while(x.t <= this.mt2)	// pad x so am has enough room later
	    x[x.t++] = 0;
	  for(var i = 0; i < this.m.t; ++i) {
	    // faster way of calculating u0 = x[i]*mp mod DV
	    var j = x[i]&0x7fff;
	    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
	    // use am to combine the multiply-shift-add into one call
	    j = i+this.m.t;
	    x[j] += this.m.am(0,u0,x,i,0,this.m.t);
	    // propagate carry
	    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
	  }
	  x.clamp();
	  x.drShiftTo(this.m.t,x);
	  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	// r = "x^2/R mod m"; x != r
	function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	// r = "xy/R mod m"; x,y != r
	function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Montgomery.prototype.convert = montConvert;
	Montgomery.prototype.revert = montRevert;
	Montgomery.prototype.reduce = montReduce;
	Montgomery.prototype.mulTo = montMulTo;
	Montgomery.prototype.sqrTo = montSqrTo;

	// (protected) true iff this is even
	function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

	// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e,z) {
	  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
	  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	  g.copyTo(r);
	  while(--i >= 0) {
	    z.sqrTo(r,r2);
	    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	    else { var t = r; r = r2; r2 = t; }
	  }
	  return z.revert(r);
	}

	// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e,m) {
	  var z;
	  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	  return this.exp(e,z);
	}

	// protected
	BigInteger.prototype.copyTo = bnpCopyTo;
	BigInteger.prototype.fromInt = bnpFromInt;
	BigInteger.prototype.fromString = bnpFromString;
	BigInteger.prototype.clamp = bnpClamp;
	BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	BigInteger.prototype.lShiftTo = bnpLShiftTo;
	BigInteger.prototype.rShiftTo = bnpRShiftTo;
	BigInteger.prototype.subTo = bnpSubTo;
	BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	BigInteger.prototype.squareTo = bnpSquareTo;
	BigInteger.prototype.divRemTo = bnpDivRemTo;
	BigInteger.prototype.invDigit = bnpInvDigit;
	BigInteger.prototype.isEven = bnpIsEven;
	BigInteger.prototype.exp = bnpExp;

	// public
	BigInteger.prototype.toString = bnToString;
	BigInteger.prototype.negate = bnNegate;
	BigInteger.prototype.abs = bnAbs;
	BigInteger.prototype.compareTo = bnCompareTo;
	BigInteger.prototype.bitLength = bnBitLength;
	BigInteger.prototype.mod = bnMod;
	BigInteger.prototype.modPowInt = bnModPowInt;

	// "constants"
	BigInteger.ZERO = nbv(0);
	BigInteger.ONE = nbv(1);

	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	var b64map="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	var b64pad="=";

	function hex2b64(h) {
	  var i;
	  var c;
	  var ret = "";
	  for(i = 0; i+3 <= h.length; i+=3) {
	    c = parseInt(h.substring(i,i+3),16);
	    ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);
	  }
	  if(i+1 == h.length) {
	    c = parseInt(h.substring(i,i+1),16);
	    ret += b64map.charAt(c << 2);
	  }
	  else if(i+2 == h.length) {
	    c = parseInt(h.substring(i,i+2),16);
	    ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);
	  }
	  if (b64pad) while((ret.length & 3) > 0) ret += b64pad;
	  return ret;
	}

	// convert a base64 string to hex
	function b64tohex(s) {
	  var ret = ""
	  var i;
	  var k = 0; // b64 state, 0-3
	  var slop;
	  var v;
	  for(i = 0; i < s.length; ++i) {
	    if(s.charAt(i) == b64pad) break;
	    v = b64map.indexOf(s.charAt(i));
	    if(v < 0) continue;
	    if(k == 0) {
	      ret += int2char(v >> 2);
	      slop = v & 3;
	      k = 1;
	    }
	    else if(k == 1) {
	      ret += int2char((slop << 2) | (v >> 4));
	      slop = v & 0xf;
	      k = 2;
	    }
	    else if(k == 2) {
	      ret += int2char(slop);
	      ret += int2char(v >> 2);
	      slop = v & 3;
	      k = 3;
	    }
	    else {
	      ret += int2char((slop << 2) | (v >> 4));
	      ret += int2char(v & 0xf);
	      k = 0;
	    }
	  }
	  if(k == 1)
	    ret += int2char(slop << 2);
	  return ret;
	}

	// convert a base64 string to a byte/number array
	function b64toBA(s) {
	  //piggyback on b64tohex for now, optimize later
	  var h = b64tohex(s);
	  var i;
	  var a = new Array();
	  for(i = 0; 2*i < h.length; ++i) {
	    a[i] = parseInt(h.substring(2*i,2*i+2),16);
	  }
	  return a;
	}

	/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
	 */
	// This source code is free for use in the public domain.
	// NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

	// http://code.google.com/p/json-sans-eval/

	/**
	 * Parses a string of well-formed JSON text.
	 *
	 * If the input is not well-formed, then behavior is undefined, but it is
	 * deterministic and is guaranteed not to modify any object other than its
	 * return value.
	 *
	 * This does not use `eval` so is less likely to have obscure security bugs than
	 * json2.js.
	 * It is optimized for speed, so is much faster than json_parse.js.
	 *
	 * This library should be used whenever security is a concern (when JSON may
	 * come from an untrusted source), speed is a concern, and erroring on malformed
	 * JSON is *not* a concern.
	 *
	 *                      Pros                   Cons
	 *                    +-----------------------+-----------------------+
	 * json_sans_eval.js  | Fast, secure          | Not validating        |
	 *                    +-----------------------+-----------------------+
	 * json_parse.js      | Validating, secure    | Slow                  |
	 *                    +-----------------------+-----------------------+
	 * json2.js           | Fast, some validation | Potentially insecure  |
	 *                    +-----------------------+-----------------------+
	 *
	 * json2.js is very fast, but potentially insecure since it calls `eval` to
	 * parse JSON data, so an attacker might be able to supply strange JS that
	 * looks like JSON, but that executes arbitrary javascript.
	 * If you do have to use json2.js with untrusted data, make sure you keep
	 * your version of json2.js up to date so that you get patches as they're
	 * released.
	 *
	 * @param {string} json per RFC 4627
	 * @param {function (this:Object, string, *):*} opt_reviver optional function
	 *     that reworks JSON objects post-parse per Chapter 15.12 of EcmaScript3.1.
	 *     If supplied, the function is called with a string key, and a value.
	 *     The value is the property of 'this'.  The reviver should return
	 *     the value to use in its place.  So if dates were serialized as
	 *     {@code { "type": "Date", "time": 1234 }}, then a reviver might look like
	 *     {@code
	 *     function (key, value) {
	 *       if (value && typeof value === 'object' && 'Date' === value.type) {
	 *         return new Date(value.time);
	 *       } else {
	 *         return value;
	 *       }
	 *     }}.
	 *     If the reviver returns {@code undefined} then the property named by key
	 *     will be deleted from its container.
	 *     {@code this} is bound to the object containing the specified property.
	 * @return {Object|Array}
	 * @author Mike Samuel <mikesamuel@gmail.com>
	 */
	var jsonParse = (function () {
	  var number
	      = '(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)';
	  var oneChar = '(?:[^\\0-\\x08\\x0a-\\x1f\"\\\\]'
	      + '|\\\\(?:[\"/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';
	  var string = '(?:\"' + oneChar + '*\")';

	  // Will match a value in a well-formed JSON file.
	  // If the input is not well-formed, may match strangely, but not in an unsafe
	  // way.
	  // Since this only matches value tokens, it does not match whitespace, colons,
	  // or commas.
	  var jsonToken = new RegExp(
	      '(?:false|true|null|[\\{\\}\\[\\]]'
	      + '|' + number
	      + '|' + string
	      + ')', 'g');

	  // Matches escape sequences in a string literal
	  var escapeSequence = new RegExp('\\\\(?:([^u])|u(.{4}))', 'g');

	  // Decodes escape sequences in object literals
	  var escapes = {
	    '"': '"',
	    '/': '/',
	    '\\': '\\',
	    'b': '\b',
	    'f': '\f',
	    'n': '\n',
	    'r': '\r',
	    't': '\t'
	  };
	  function unescapeOne(_, ch, hex) {
	    return ch ? escapes[ch] : String.fromCharCode(parseInt(hex, 16));
	  }

	  // A non-falsy value that coerces to the empty string when used as a key.
	  var EMPTY_STRING = new String('');
	  var SLASH = '\\';

	  // Constructor to use based on an open token.
	  var firstTokenCtors = { '{': Object, '[': Array };

	  var hop = Object.hasOwnProperty;

	  return function (json, opt_reviver) {
	    // Split into tokens
	    var toks = json.match(jsonToken);
	    // Construct the object to return
	    var result;
	    var tok = toks[0];
	    var topLevelPrimitive = false;
	    if ('{' === tok) {
	      result = {};
	    } else if ('[' === tok) {
	      result = [];
	    } else {
	      // The RFC only allows arrays or objects at the top level, but the JSON.parse
	      // defined by the EcmaScript 5 draft does allow strings, booleans, numbers, and null
	      // at the top level.
	      result = [];
	      topLevelPrimitive = true;
	    }

	    // If undefined, the key in an object key/value record to use for the next
	    // value parsed.
	    var key;
	    // Loop over remaining tokens maintaining a stack of uncompleted objects and
	    // arrays.
	    var stack = [result];
	    for (var i = 1 - topLevelPrimitive, n = toks.length; i < n; ++i) {
	      tok = toks[i];

	      var cont;
	      switch (tok.charCodeAt(0)) {
	        default:  // sign or digit
	          cont = stack[0];
	          cont[key || cont.length] = +(tok);
	          key = void 0;
	          break;
	        case 0x22:  // '"'
	          tok = tok.substring(1, tok.length - 1);
	          if (tok.indexOf(SLASH) !== -1) {
	            tok = tok.replace(escapeSequence, unescapeOne);
	          }
	          cont = stack[0];
	          if (!key) {
	            if (cont instanceof Array) {
	              key = cont.length;
	            } else {
	              key = tok || EMPTY_STRING;  // Use as key for next value seen.
	              break;
	            }
	          }
	          cont[key] = tok;
	          key = void 0;
	          break;
	        case 0x5b:  // '['
	          cont = stack[0];
	          stack.unshift(cont[key || cont.length] = []);
	          key = void 0;
	          break;
	        case 0x5d:  // ']'
	          stack.shift();
	          break;
	        case 0x66:  // 'f'
	          cont = stack[0];
	          cont[key || cont.length] = false;
	          key = void 0;
	          break;
	        case 0x6e:  // 'n'
	          cont = stack[0];
	          cont[key || cont.length] = null;
	          key = void 0;
	          break;
	        case 0x74:  // 't'
	          cont = stack[0];
	          cont[key || cont.length] = true;
	          key = void 0;
	          break;
	        case 0x7b:  // '{'
	          cont = stack[0];
	          stack.unshift(cont[key || cont.length] = {});
	          key = void 0;
	          break;
	        case 0x7d:  // '}'
	          stack.shift();
	          break;
	      }
	    }
	    // Fail if we've got an uncompleted object.
	    if (topLevelPrimitive) {
	      if (stack.length !== 1) { throw new Error(); }
	      result = result[0];
	    } else {
	      if (stack.length) { throw new Error(); }
	    }

	    if (opt_reviver) {
	      // Based on walk as implemented in http://www.json.org/json2.js
	      var walk = function (holder, key) {
	        var value = holder[key];
	        if (value && typeof value === 'object') {
	          var toDelete = null;
	          for (var k in value) {
	            if (hop.call(value, k) && value !== holder) {
	              // Recurse to properties first.  This has the effect of causing
	              // the reviver to be called on the object graph depth-first.

	              // Since 'this' is bound to the holder of the property, the
	              // reviver can access sibling properties of k including ones
	              // that have not yet been revived.

	              // The value returned by the reviver is used in place of the
	              // current value of property k.
	              // If it returns undefined then the property is deleted.
	              var v = walk(value, k);
	              if (v !== void 0) {
	                value[k] = v;
	              } else {
	                // Deleting properties inside the loop has vaguely defined
	                // semantics in ES3 and ES3.1.
	                if (!toDelete) { toDelete = []; }
	                toDelete.push(k);
	              }
	            }
	          }
	          if (toDelete) {
	            for (var i = toDelete.length; --i >= 0;) {
	              delete value[toDelete[i]];
	            }
	          }
	        }
	        return opt_reviver.call(holder, key, value);
	      };
	      result = walk({ '': result }, '');
	    }

	    return result;
	  };
	})();

	/*! base64x-1.1.8 (c) 2012-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	/*
	 * base64x.js - Base64url and supplementary functions for Tom Wu's base64.js library
	 *
	 * version: 1.1.8 (2016-Oct-16)
	 *
	 * Copyright (c) 2012-2016 Kenji Urushima (kenji.urushima@gmail.com)
	 *
	 * This software is licensed under the terms of the MIT License.
	 * http://kjur.github.com/jsjws/license/
	 *
	 * The above copyright and license notice shall be 
	 * included in all copies or substantial portions of the Software.
	 *
	 * DEPENDS ON:
	 *   - base64.js - Tom Wu's Base64 library
	 */

	/**
	 * @fileOverview
	 * @name base64x-1.1.js
	 * @author Kenji Urushima kenji.urushima@gmail.com
	 * @version asn1 1.1.8 (2016-Oct-16)
	 * @since jsrsasign 2.1
	 * @license <a href="http://kjur.github.io/jsrsasign/license/">MIT License</a>
	 */

	var KJUR;
	if (typeof KJUR == "undefined" || !KJUR) KJUR = {};
	if (typeof KJUR.lang == "undefined" || !KJUR.lang) KJUR.lang = {};

	/**
	 * String and its utility class <br/>
	 * This class provides some static utility methods for string.
	 * @class String and its utility class
	 * @author Kenji Urushima
	 * @version 1.0 (2016-Aug-05)
	 * @since base64x 1.1.7 jsrsasign 5.0.13
	 * @description
	 * <br/>
	 * This class provides static methods for string utility.
	 * <dl>
	 * <dt><b>STRING TYPE CHECKERS</b>
	 * <dd>
	 * <ul>
	 * <li>{@link KJUR.lang.String.isInteger} - check whether argument is an integer</li>
	 * <li>{@link KJUR.lang.String.isHex} - check whether argument is a hexadecimal string</li>
	 * <li>{@link KJUR.lang.String.isBase64} - check whether argument is a Base64 encoded string</li>
	 * <li>{@link KJUR.lang.String.isBase64URL} - check whether argument is a Base64URL encoded string</li>
	 * <li>{@link KJUR.lang.String.isIntegerArray} - check whether argument is an array of integers</li>
	 * </ul>
	 * </dl>
	 */
	KJUR.lang.String = function() {};

	/**
	 * Base64URL and supplementary functions for Tom Wu's base64.js library.<br/>
	 * This class is just provide information about global functions
	 * defined in 'base64x.js'. The 'base64x.js' script file provides
	 * global functions for converting following data each other.
	 * <ul>
	 * <li>(ASCII) String</li>
	 * <li>UTF8 String including CJK, Latin and other characters</li>
	 * <li>byte array</li>
	 * <li>hexadecimal encoded String</li>
	 * <li>Full URIComponent encoded String (such like "%69%94")</li>
	 * <li>Base64 encoded String</li>
	 * <li>Base64URL encoded String</li>
	 * </ul>
	 * All functions in 'base64x.js' are defined in {@link _global_} and not
	 * in this class.
	 * 
	 * @class Base64URL and supplementary functions for Tom Wu's base64.js library
	 * @author Kenji Urushima
	 * @version 1.1 (07 May 2012)
	 * @requires base64.js
	 * @see <a href="http://kjur.github.com/jsjws/">'jwjws'(JWS JavaScript Library) home page http://kjur.github.com/jsjws/</a>
	 * @see <a href="http://kjur.github.com/jsrsasigns/">'jwrsasign'(RSA Sign JavaScript Library) home page http://kjur.github.com/jsrsasign/</a>
	 */
	function Base64x() {
	}

	// ==== string / byte array ================================
	/**
	 * convert a string to an array of character codes
	 * @param {String} s
	 * @return {Array of Numbers} 
	 */
	function stoBA(s) {
	    var a = new Array();
	    for (var i = 0; i < s.length; i++) {
		a[i] = s.charCodeAt(i);
	    }
	    return a;
	}

	/**
	 * convert an array of character codes to a string
	 * @param {Array of Numbers} a array of character codes
	 * @return {String} s
	 */
	function BAtos(a) {
	    var s = "";
	    for (var i = 0; i < a.length; i++) {
		s = s + String.fromCharCode(a[i]);
	    }
	    return s;
	}

	// ==== byte array / hex ================================
	/**
	 * convert an array of bytes(Number) to hexadecimal string.<br/>
	 * @param {Array of Numbers} a array of bytes
	 * @return {String} hexadecimal string
	 */
	function BAtohex(a) {
	    var s = "";
	    for (var i = 0; i < a.length; i++) {
		var hex1 = a[i].toString(16);
		if (hex1.length == 1) hex1 = "0" + hex1;
		s = s + hex1;
	    }
	    return s;
	}

	// ==== string / hex ================================
	/**
	 * convert a ASCII string to a hexadecimal string of ASCII codes.<br/>
	 * NOTE: This can't be used for non ASCII characters.
	 * @param {s} s ASCII string
	 * @return {String} hexadecimal string
	 */
	function stohex(s) {
	    return BAtohex(stoBA(s));
	}

	// ==== string / base64 ================================
	/**
	 * convert a ASCII string to a Base64 encoded string.<br/>
	 * NOTE: This can't be used for non ASCII characters.
	 * @param {s} s ASCII string
	 * @return {String} Base64 encoded string
	 */
	function stob64(s) {
	    return hex2b64(stohex(s));
	}

	// ==== string / base64url ================================
	/**
	 * convert a ASCII string to a Base64URL encoded string.<br/>
	 * NOTE: This can't be used for non ASCII characters.
	 * @param {s} s ASCII string
	 * @return {String} Base64URL encoded string
	 */
	function stob64u(s) {
	    return b64tob64u(hex2b64(stohex(s)));
	}

	/**
	 * convert a Base64URL encoded string to a ASCII string.<br/>
	 * NOTE: This can't be used for Base64URL encoded non ASCII characters.
	 * @param {s} s Base64URL encoded string
	 * @return {String} ASCII string
	 */
	function b64utos(s) {
	    return BAtos(b64toBA(b64utob64(s)));
	}

	// ==== base64 / base64url ================================
	/**
	 * convert a Base64 encoded string to a Base64URL encoded string.<br/>
	 * @param {String} s Base64 encoded string
	 * @return {String} Base64URL encoded string
	 * @example
	 * b64tob64u("ab+c3f/==") &rarr; "ab-c3f_"
	 */
	function b64tob64u(s) {
	    s = s.replace(/\=/g, "");
	    s = s.replace(/\+/g, "-");
	    s = s.replace(/\//g, "_");
	    return s;
	}

	/**
	 * convert a Base64URL encoded string to a Base64 encoded string.<br/>
	 * @param {String} s Base64URL encoded string
	 * @return {String} Base64 encoded string
	 * @example
	 * b64utob64("ab-c3f_") &rarr; "ab+c3f/=="
	 */
	function b64utob64(s) {
	    if (s.length % 4 == 2) s = s + "==";
	    else if (s.length % 4 == 3) s = s + "=";
	    s = s.replace(/-/g, "+");
	    s = s.replace(/_/g, "/");
	    return s;
	}

	// ==== hex / base64url ================================
	/**
	 * convert a hexadecimal string to a Base64URL encoded string.<br/>
	 * @param {String} s hexadecimal string
	 * @return {String} Base64URL encoded string
	 * @description
	 * convert a hexadecimal string to a Base64URL encoded string.
	 * NOTE: If leading "0" is omitted and odd number length for
	 * hexadecimal leading "0" is automatically added.
	 */
	function hextob64u(s) {
	    if (s.length % 2 == 1) s = "0" + s;
	    return b64tob64u(hex2b64(s));
	}

	/**
	 * convert a Base64URL encoded string to a hexadecimal string.<br/>
	 * @param {String} s Base64URL encoded string
	 * @return {String} hexadecimal string
	 */
	function b64utohex(s) {
	    return b64tohex(b64utob64(s));
	}

	// ==== utf8 / base64url ================================

	/**
	 * convert a UTF-8 encoded string including CJK or Latin to a Base64URL encoded string.<br/>
	 * @param {String} s UTF-8 encoded string
	 * @return {String} Base64URL encoded string
	 * @since 1.1
	 */

	/**
	 * convert a Base64URL encoded string to a UTF-8 encoded string including CJK or Latin.<br/>
	 * @param {String} s Base64URL encoded string
	 * @return {String} UTF-8 encoded string
	 * @since 1.1
	 */

	var utf8tob64u, b64utoutf8;

	if (typeof Buffer === 'function') {
	  utf8tob64u = function (s) {
	    return b64tob64u(new Buffer(s, 'utf8').toString('base64'));
	  };

	  b64utoutf8 = function (s) {
	    return new Buffer(b64utob64(s), 'base64').toString('utf8');
	  };
	} else {
	  utf8tob64u = function (s) {
	    return hextob64u(uricmptohex(encodeURIComponentAll(s)));
	  };

	  b64utoutf8 = function (s) {
	    return decodeURIComponent(hextouricmp(b64utohex(s)));
	  };
	}

	// ==== utf8 / base64url ================================
	/**
	 * convert a UTF-8 encoded string including CJK or Latin to a Base64 encoded string.<br/>
	 * @param {String} s UTF-8 encoded string
	 * @return {String} Base64 encoded string
	 * @since 1.1.1
	 */
	function utf8tob64(s) {
	  return hex2b64(uricmptohex(encodeURIComponentAll(s)));
	}

	/**
	 * convert a Base64 encoded string to a UTF-8 encoded string including CJK or Latin.<br/>
	 * @param {String} s Base64 encoded string
	 * @return {String} UTF-8 encoded string
	 * @since 1.1.1
	 */
	function b64toutf8(s) {
	  return decodeURIComponent(hextouricmp(b64tohex(s)));
	}

	// ==== utf8 / hex ================================
	/**
	 * convert a UTF-8 encoded string including CJK or Latin to a hexadecimal encoded string.<br/>
	 * @param {String} s UTF-8 encoded string
	 * @return {String} hexadecimal encoded string
	 * @since 1.1.1
	 */
	function utf8tohex(s) {
	  return uricmptohex(encodeURIComponentAll(s));
	}

	/**
	 * convert a hexadecimal encoded string to a UTF-8 encoded string including CJK or Latin.<br/>
	 * Note that when input is improper hexadecimal string as UTF-8 string, this function returns
	 * 'null'.
	 * @param {String} s hexadecimal encoded string
	 * @return {String} UTF-8 encoded string or null
	 * @since 1.1.1
	 */
	function hextoutf8(s) {
	  return decodeURIComponent(hextouricmp(s));
	}

	/**
	 * convert a hexadecimal encoded string to raw string including non printable characters.<br/>
	 * @param {String} s hexadecimal encoded string
	 * @return {String} raw string
	 * @since 1.1.2
	 * @example
	 * hextorstr("610061") &rarr; "a\x00a"
	 */
	function hextorstr(sHex) {
	    var s = "";
	    for (var i = 0; i < sHex.length - 1; i += 2) {
	        s += String.fromCharCode(parseInt(sHex.substr(i, 2), 16));
	    }
	    return s;
	}

	/**
	 * convert a raw string including non printable characters to hexadecimal encoded string.<br/>
	 * @param {String} s raw string
	 * @return {String} hexadecimal encoded string
	 * @since 1.1.2
	 * @example
	 * rstrtohex("a\x00a") &rarr; "610061"
	 */
	function rstrtohex(s) {
	    var result = "";
	    for (var i = 0; i < s.length; i++) {
	        result += ("0" + s.charCodeAt(i).toString(16)).slice(-2);
	    }
	    return result;
	}

	// ==== hex / b64nl =======================================

	/**
	 * convert a hexadecimal string to Base64 encoded string<br/>
	 * @param {String} s hexadecimal string
	 * @return {String} resulted Base64 encoded string
	 * @since base64x 1.1.3
	 * @description
	 * This function converts from a hexadecimal string to Base64 encoded
	 * string without new lines.
	 * @example
	 * hextob64("616161") &rarr; "YWFh"
	 */
	function hextob64(s) {
	    return hex2b64(s);
	}

	/**
	 * convert a hexadecimal string to Base64 encoded string with new lines<br/>
	 * @param {String} s hexadecimal string
	 * @return {String} resulted Base64 encoded string with new lines
	 * @since base64x 1.1.3
	 * @description
	 * This function converts from a hexadecimal string to Base64 encoded
	 * string with new lines for each 64 characters. This is useful for
	 * PEM encoded file.
	 * @example
	 * hextob64nl("123456789012345678901234567890123456789012345678901234567890")
	 * &rarr;
	 * MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4 // new line
	 * OTAxMjM0NTY3ODkwCg==
	 */
	function hextob64nl(s) {
	    var b64 = hextob64(s);
	    var b64nl = b64.replace(/(.{64})/g, "$1\r\n");
	    b64nl = b64nl.replace(/\r\n$/, '');
	    return b64nl;
	}

	/**
	 * convert a Base64 encoded string with new lines to a hexadecimal string<br/>
	 * @param {String} s Base64 encoded string with new lines
	 * @return {String} hexadecimal string
	 * @since base64x 1.1.3
	 * @description
	 * This function converts from a Base64 encoded
	 * string with new lines to a hexadecimal string.
	 * This is useful to handle PEM encoded file.
	 * This function removes any non-Base64 characters (i.e. not 0-9,A-Z,a-z,\,+,=)
	 * including new line.
	 * @example
	 * hextob64nl(
	 * "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4\r\n" +
	 * "OTAxMjM0NTY3ODkwCg==\r\n")
	 * &rarr;
	 * "123456789012345678901234567890123456789012345678901234567890"
	 */
	function b64nltohex(s) {
	    var b64 = s.replace(/[^0-9A-Za-z\/+=]*/g, '');
	    var hex = b64tohex(b64);
	    return hex;
	} 

	// ==== hex / ArrayBuffer =================================

	/**
	 * convert a ArrayBuffer to a hexadecimal string<br/>
	 * @param {String} hex hexadecimal string
	 * @return {ArrayBuffer} ArrayBuffer
	 * @since jsrsasign 6.1.4 base64x 1.1.8
	 * @description
	 * This function converts from a ArrayBuffer to a hexadecimal string.
	 * @example
	 * var buffer = new ArrayBuffer(3);
	 * var view = new DataView(buffer);
	 * view.setUint8(0, 0xfa);
	 * view.setUint8(1, 0xfb);
	 * view.setUint8(2, 0x01);
	 * ArrayBuffertohex(buffer) &rarr; "fafb01"
	 */
	function hextoArrayBuffer(hex) {
	    if (hex.length % 2 != 0) throw "input is not even length";
	    if (hex.match(/^[0-9A-Fa-f]+$/) == null) throw "input is not hexadecimal";

	    var buffer = new ArrayBuffer(hex.length / 2);
	    var view = new DataView(buffer);

	    for (var i = 0; i < hex.length / 2; i++) {
		view.setUint8(i, parseInt(hex.substr(i * 2, 2), 16));
	    }

	    return buffer;
	}

	// ==== ArrayBuffer / hex =================================

	/**
	 * convert a ArrayBuffer to a hexadecimal string<br/>
	 * @param {ArrayBuffer} buffer ArrayBuffer
	 * @return {String} hexadecimal string
	 * @since jsrsasign 6.1.4 base64x 1.1.8
	 * @description
	 * This function converts from a ArrayBuffer to a hexadecimal string.
	 * @example
	 * hextoArrayBuffer("fffa01") &rarr; ArrayBuffer of [255, 250, 1]
	 */
	function ArrayBuffertohex(buffer) {
	    var hex = "";
	    var view = new DataView(buffer);

	    for (var i = 0; i < buffer.byteLength; i++) {
		hex += ("00" + view.getUint8(i).toString(16)).slice(-2);
	    }

	    return hex;
	}

	// ==== URIComponent / hex ================================
	/**
	 * convert a URLComponent string such like "%67%68" to a hexadecimal string.<br/>
	 * @param {String} s URIComponent string such like "%67%68"
	 * @return {String} hexadecimal string
	 * @since 1.1
	 */
	function uricmptohex(s) {
	  return s.replace(/%/g, "");
	}

	/**
	 * convert a hexadecimal string to a URLComponent string such like "%67%68".<br/>
	 * @param {String} s hexadecimal string
	 * @return {String} URIComponent string such like "%67%68"
	 * @since 1.1
	 */
	function hextouricmp(s) {
	  return s.replace(/(..)/g, "%$1");
	}

	// ==== URIComponent ================================
	/**
	 * convert UTFa hexadecimal string to a URLComponent string such like "%67%68".<br/>
	 * Note that these "<code>0-9A-Za-z!'()*-._~</code>" characters will not
	 * converted to "%xx" format by builtin 'encodeURIComponent()' function.
	 * However this 'encodeURIComponentAll()' function will convert 
	 * all of characters into "%xx" format.
	 * @param {String} s hexadecimal string
	 * @return {String} URIComponent string such like "%67%68"
	 * @since 1.1
	 */
	function encodeURIComponentAll(u8) {
	  var s = encodeURIComponent(u8);
	  var s2 = "";
	  for (var i = 0; i < s.length; i++) {
	    if (s[i] == "%") {
	      s2 = s2 + s.substr(i, 3);
	      i = i + 2;
	    } else {
	      s2 = s2 + "%" + stohex(s[i]);
	    }
	  }
	  return s2;
	}

	// ==== new lines ================================
	/**
	 * convert all DOS new line("\r\n") to UNIX new line("\n") in 
	 * a String "s".
	 * @param {String} s string 
	 * @return {String} converted string
	 */
	function newline_toUnix(s) {
	    s = s.replace(/\r\n/mg, "\n");
	    return s;
	}

	/**
	 * convert all UNIX new line("\r\n") to DOS new line("\n") in 
	 * a String "s".
	 * @param {String} s string 
	 * @return {String} converted string
	 */
	function newline_toDos(s) {
	    s = s.replace(/\r\n/mg, "\n");
	    s = s.replace(/\n/mg, "\r\n");
	    return s;
	}

	// ==== string type checker ===================

	/**
	 * check whether a string is an integer string or not<br/>
	 * @name isInteger
	 * @memberOf KJUR.lang.String
	 * @function
	 * @static
	 * @param {String} s input string
	 * @return {Boolean} true if a string "s" is an integer string otherwise false
	 * @since base64x 1.1.7 jsrsasign 5.0.13
	 * @example
	 * KJUR.lang.String.isInteger("12345") &rarr; true
	 * KJUR.lang.String.isInteger("123ab") &rarr; false
	 */
	KJUR.lang.String.isInteger = function(s) {
	    if (s.match(/^[0-9]+$/)) {
		return true;
	    } else if (s.match(/^-[0-9]+$/)) {
		return true;
	    } else {
		return false;
	    }
	};

	/**
	 * check whether a string is an hexadecimal string or not<br/>
	 * @name isHex
	 * @memberOf KJUR.lang.String
	 * @function
	 * @static
	 * @param {String} s input string
	 * @return {Boolean} true if a string "s" is an hexadecimal string otherwise false
	 * @since base64x 1.1.7 jsrsasign 5.0.13
	 * @example
	 * KJUR.lang.String.isHex("1234") &rarr; true
	 * KJUR.lang.String.isHex("12ab") &rarr; true
	 * KJUR.lang.String.isHex("12AB") &rarr; true
	 * KJUR.lang.String.isHex("12ZY") &rarr; false
	 * KJUR.lang.String.isHex("121") &rarr; false -- odd length
	 */
	KJUR.lang.String.isHex = function(s) {
	    if (s.length % 2 == 0 &&
		(s.match(/^[0-9a-f]+$/) || s.match(/^[0-9A-F]+$/))) {
		return true;
	    } else {
		return false;
	    }
	};

	/**
	 * check whether a string is a base64 encoded string or not<br/>
	 * Input string can conclude new lines or space characters.
	 * @name isBase64
	 * @memberOf KJUR.lang.String
	 * @function
	 * @static
	 * @param {String} s input string
	 * @return {Boolean} true if a string "s" is a base64 encoded string otherwise false
	 * @since base64x 1.1.7 jsrsasign 5.0.13
	 * @example
	 * KJUR.lang.String.isBase64("YWE=") &rarr; true
	 * KJUR.lang.String.isBase64("YW_=") &rarr; false
	 * KJUR.lang.String.isBase64("YWE") &rarr; false -- length shall be multiples of 4
	 */
	KJUR.lang.String.isBase64 = function(s) {
	    s = s.replace(/\s+/g, "");
	    if (s.match(/^[0-9A-Za-z+\/]+={0,3}$/) && s.length % 4 == 0) {
		return true;
	    } else {
		return false;
	    }
	};

	/**
	 * check whether a string is a base64url encoded string or not<br/>
	 * Input string can conclude new lines or space characters.
	 * @name isBase64URL
	 * @memberOf KJUR.lang.String
	 * @function
	 * @static
	 * @param {String} s input string
	 * @return {Boolean} true if a string "s" is a base64url encoded string otherwise false
	 * @since base64x 1.1.7 jsrsasign 5.0.13
	 * @example
	 * KJUR.lang.String.isBase64URL("YWE") &rarr; true
	 * KJUR.lang.String.isBase64URL("YW-") &rarr; true
	 * KJUR.lang.String.isBase64URL("YW+") &rarr; false
	 */
	KJUR.lang.String.isBase64URL = function(s) {
	    if (s.match(/[+/=]/)) return false;
	    s = b64utob64(s);
	    return KJUR.lang.String.isBase64(s);
	};

	/**
	 * check whether a string is a string of integer array or not<br/>
	 * Input string can conclude new lines or space characters.
	 * @name isIntegerArray
	 * @memberOf KJUR.lang.String
	 * @function
	 * @static
	 * @param {String} s input string
	 * @return {Boolean} true if a string "s" is a string of integer array otherwise false
	 * @since base64x 1.1.7 jsrsasign 5.0.13
	 * @example
	 * KJUR.lang.String.isIntegerArray("[1,2,3]") &rarr; true
	 * KJUR.lang.String.isIntegerArray("  [1, 2, 3  ] ") &rarr; true
	 * KJUR.lang.String.isIntegerArray("[a,2]") &rarr; false
	 */
	KJUR.lang.String.isIntegerArray = function(s) {
	    s = s.replace(/\s+/g, "");
	    if (s.match(/^\[[0-9,]+\]$/)) {
		return true;
	    } else {
		return false;
	    }
	};

	// ==== others ================================

	/**
	 * convert string of integer array to hexadecimal string.<br/>
	 * @param {String} s string of integer array
	 * @return {String} hexadecimal string
	 * @since base64x 1.1.6 jsrsasign 5.0.2
	 * @throws "malformed integer array string: *" for wrong input
	 * @description
	 * This function converts a string of JavaScript integer array to
	 * a hexadecimal string. Each integer value shall be in a range 
	 * from 0 to 255 otherwise it raise exception. Input string can
	 * have extra space or newline string so that they will be ignored.
	 * 
	 * @example
	 * intarystrtohex(" [123, 34, 101, 34, 58] ")
	 * &rarr; 7b2265223a (i.e. '{"e":' as string)
	 */
	function intarystrtohex(s) {
	  s = s.replace(/^\s*\[\s*/, '');
	  s = s.replace(/\s*\]\s*$/, '');
	  s = s.replace(/\s*/g, '');
	  try {
	    var hex = s.split(/,/).map(function(element, index, array) {
	      var i = parseInt(element);
	      if (i < 0 || 255 < i) throw "integer not in range 0-255";
	      var hI = ("00" + i.toString(16)).slice(-2);
	      return hI;
	    }).join('');
	    return hex;
	  } catch(ex) {
	    throw "malformed integer array string: " + ex;
	  }
	}

	/**
	 * find index of string where two string differs
	 * @param {String} s1 string to compare
	 * @param {String} s2 string to compare
	 * @return {Number} string index of where character differs. Return -1 if same.
	 * @since jsrsasign 4.9.0 base64x 1.1.5
	 * @example
	 * strdiffidx("abcdefg", "abcd4fg") -> 4
	 * strdiffidx("abcdefg", "abcdefg") -> -1
	 * strdiffidx("abcdefg", "abcdef") -> 6
	 * strdiffidx("abcdefgh", "abcdef") -> 6
	 */
	var strdiffidx = function(s1, s2) {
	    var n = s1.length;
	    if (s1.length > s2.length) n = s2.length;
	    for (var i = 0; i < n; i++) {
		if (s1.charCodeAt(i) != s2.charCodeAt(i)) return i;
	    }
	    if (s1.length != s2.length) return n;
	    return -1; // same
	};



	/*! jws-3.3.5 (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	/*
	 * jws.js - JSON Web Signature(JWS) and JSON Web Token(JWT) Class
	 *
	 * version: 3.3.4 (2016 May 17)
	 *
	 * Copyright (c) 2010-2016 Kenji Urushima (kenji.urushima@gmail.com)
	 *
	 * This software is licensed under the terms of the MIT License.
	 * http://kjur.github.com/jsrsasign/license/
	 *
	 * The above copyright and license notice shall be 
	 * included in all copies or substantial portions of the Software.
	 */

	/**
	 * @fileOverview
	 * @name jws-3.3.js
	 * @author Kenji Urushima kenji.urushima@gmail.com
	 * @version 3.3.5 (2016-Oct-08)
	 * @since jsjws 1.0, jsrsasign 4.8.0
	 * @license <a href="http://kjur.github.io/jsrsasign/license/">MIT License</a>
	 */

	if (typeof KJUR == "undefined" || !KJUR) KJUR = {};

	/**
	 * kjur's JSON Web Signature/Token(JWS/JWT) library name space
	 * <p>
	 * This namespace privides following JWS/JWS related classes.
	 * <ul>
	 * <li>{@link KJUR.jws.JWS} - JSON Web Signature/Token(JWS/JWT) class</li>
	 * <li>{@link KJUR.jws.JWSJS} - JWS JSON Serialization(JWSJS) class</li>
	 * <li>{@link KJUR.jws.IntDate} - UNIX origin time utility class</li>
	 * </ul>
	 * NOTE: Please ignore method summary and document of this namespace. This caused by a bug of jsdoc2.
	 * </p>
	 * @name KJUR.jws
	 * @namespace
	 */
	if (typeof KJUR.jws == "undefined" || !KJUR.jws) KJUR.jws = {};

	/**
	 * JSON Web Signature(JWS) class.<br/>
	 * @name KJUR.jws.JWS
	 * @class JSON Web Signature(JWS) class
	 * @see <a href="http://kjur.github.com/jsjws/">'jwjws'(JWS JavaScript Library) home page http://kjur.github.com/jsjws/</a>
	 * @see <a href="http://kjur.github.com/jsrsasigns/">'jwrsasign'(RSA Sign JavaScript Library) home page http://kjur.github.com/jsrsasign/</a>
	 * @see <a href="http://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-14">IETF I-D JSON Web Algorithms (JWA)</a>
	 * @since jsjws 1.0
	 * @description
	 * This class provides JSON Web Signature(JWS)/JSON Web Token(JWT) signing and validation.
	 *
	 * <h4>METHOD SUMMARY</h4>
	 * Here is major methods of {@link KJUR.jws.JWS} class.
	 * <ul>
	 * <li><b>SIGN</b><br/>
	 * <li>{@link KJUR.jws.JWS.sign} - sign JWS</li>
	 * </li>
	 * <li><b>VERIFY</b><br/>
	 * <li>{@link KJUR.jws.JWS.verify} - verify JWS signature</li>
	 * <li>{@link KJUR.jws.JWS.verifyJWT} - verify properties of JWT token at specified time</li>
	 * </li>
	 * <li><b>UTILITY</b><br/>
	 * <li>{@link KJUR.jws.JWS.getJWKthumbprint} - get RFC 7638 JWK thumbprint</li>
	 * <li>{@link KJUR.jws.JWS.isSafeJSONString} - check whether safe JSON string or not</li>
	 * <li>{@link KJUR.jws.JWS.readSafeJSONString} - read safe JSON string only</li>
	 * </li>
	 * </ul> 
	 *
	 * <h4>SUPPORTED SIGNATURE ALGORITHMS</h4>
	 * Here is supported algorithm names for {@link KJUR.jws.JWS.sign} and
	 * {@link KJUR.jws.JWS.verify} methods.
	 * <table>
	 * <tr><th>alg value</th><th>spec requirement</th><th>jsjws support</th></tr>
	 * <tr><td>HS256</td><td>REQUIRED</td><td>SUPPORTED</td></tr>
	 * <tr><td>HS384</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>HS512</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>RS256</td><td>RECOMMENDED</td><td>SUPPORTED</td></tr>
	 * <tr><td>RS384</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>RS512</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>ES256</td><td>RECOMMENDED+</td><td>SUPPORTED</td></tr>
	 * <tr><td>ES384</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>ES512</td><td>OPTIONAL</td><td>-</td></tr>
	 * <tr><td>PS256</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>PS384</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>PS512</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>none</td><td>REQUIRED</td><td>SUPPORTED(signature generation only)</td></tr>
	 * </table>
	 * <dl>
	 * <dt><b>NOTE1</b>
	 * <dd>HS384 is supported since jsjws 3.0.2 with jsrsasign 4.1.4.
	 * <dt><b>NOTE2</b>
	 * <dd>Some deprecated methods have been removed since jws 3.3 of jsrsasign 4.10.0.
	 * Removed methods are following:
	 * <ul>
	 * <li>JWS.verifyJWSByNE</li>
	 * <li>JWS.verifyJWSByKey</li>
	 * <li>JWS.generateJWSByNED</li>
	 * <li>JWS.generateJWSByKey</li>
	 * <li>JWS.generateJWSByP1PrvKey</li>
	 * </ul>
	 * </dl>
	 * <b>EXAMPLE</b><br/>
	 * @example
	 * // JWS signing 
	 * sJWS = KJUR.jws.JWS.sign(null, '{"alg":"HS256", "cty":"JWT"}', '{"age": 21}', {"utf8": "password"});
	 * // JWS validation
	 * isValid = KJUR.jws.JWS.verify('eyJjdHkiOiJKV1QiLCJhbGc...', {"utf8": "password"});
	 * // JWT validation
	 * isValid = KJUR.jws.JWS.verifyJWT('eyJh...', {"utf8": "password"}, {
	 *   alg: ['HS256', 'HS384'],
	 *   iss: ['http://foo.com']
	 * });
	 */
	KJUR.jws.JWS = function() {
	    var ns1 = KJUR.jws.JWS;

	    // === utility =============================================================

	    /**
	     * parse JWS string and set public property 'parsedJWS' dictionary.<br/>
	     * @name parseJWS
	     * @memberOf KJUR.jws.JWS
	     * @function
	     * @param {String} sJWS JWS signature string to be parsed.
	     * @throws if sJWS is not comma separated string such like "Header.Payload.Signature".
	     * @throws if JWS Header is a malformed JSON string.
	     * @since jws 1.1
	     */
	    this.parseJWS = function(sJWS, sigValNotNeeded) {
		if ((this.parsedJWS !== undefined) &&
		    (sigValNotNeeded || (this.parsedJWS.sigvalH !== undefined))) {
		    return;
		}
	    var matchResult = sJWS.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);
		if (matchResult == null) {
		    throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
		}
		var b6Head = matchResult[1];
		var b6Payload = matchResult[2];
		var b6SigVal = matchResult[3];
		var sSI = b6Head + "." + b6Payload;
		this.parsedJWS = {};
		this.parsedJWS.headB64U = b6Head;
		this.parsedJWS.payloadB64U = b6Payload;
		this.parsedJWS.sigvalB64U = b6SigVal;
		this.parsedJWS.si = sSI;

		if (!sigValNotNeeded) {
		    var hSigVal = b64utohex(b6SigVal);
		    var biSigVal = parseBigInt(hSigVal, 16);
		    this.parsedJWS.sigvalH = hSigVal;
		    this.parsedJWS.sigvalBI = biSigVal;
		}

		var sHead = b64utoutf8(b6Head);
		var sPayload = b64utoutf8(b6Payload);
		this.parsedJWS.headS = sHead;
		this.parsedJWS.payloadS = sPayload;

		if (! ns1.isSafeJSONString(sHead, this.parsedJWS, 'headP'))
		    throw "malformed JSON string for JWS Head: " + sHead;
	    };
	};

	// === major static method ========================================================

	/**
	 * generate JWS signature by specified key<br/>
	 * @name sign
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {String} alg JWS algorithm name to sign and force set to sHead or null 
	 * @param {String} spHead string or object of JWS Header
	 * @param {String} spPayload string or object of JWS Payload
	 * @param {String} key string of private key or mac key object to sign
	 * @param {String} pass (OPTION)passcode to use encrypted asymmetric private key 
	 * @return {String} JWS signature string
	 * @since jws 3.0.0
	 * @see <a href="http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Signature.html">jsrsasign KJUR.crypto.Signature method</a>
	 * @see <a href="http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Mac.html">jsrsasign KJUR.crypto.Mac method</a>
	 * @description
	 * This method supports following algorithms.
	 * <table>
	 * <tr><th>alg value</th><th>spec requirement</th><th>jsjws support</th></tr>
	 * <tr><td>HS256</td><td>REQUIRED</td><td>SUPPORTED</td></tr>
	 * <tr><td>HS384</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>HS512</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>RS256</td><td>RECOMMENDED</td><td>SUPPORTED</td></tr>
	 * <tr><td>RS384</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>RS512</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>ES256</td><td>RECOMMENDED+</td><td>SUPPORTED</td></tr>
	 * <tr><td>ES384</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>ES512</td><td>OPTIONAL</td><td>-</td></tr>
	 * <tr><td>PS256</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>PS384</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>PS512</td><td>OPTIONAL</td><td>SUPPORTED</td></tr>
	 * <tr><td>none</td><td>REQUIRED</td><td>SUPPORTED(signature generation only)</td></tr>
	 * </table>
	 * <dl>
	 * <dt>NOTE1:
	 * <dd>salt length of RSAPSS signature is the same as the hash algorithm length
	 * because of <a href="http://www.ietf.org/mail-archive/web/jose/current/msg02901.html">IETF JOSE ML discussion</a>.
	 * <dt>NOTE2:
	 * <dd>To support HS384, patched version of CryptoJS is used.
	 * <a href="https://code.google.com/p/crypto-js/issues/detail?id=84">See here for detail</a>.
	 * <dt>NOTE3:
	 * From jsrsasign 4.10.0 jws 3.3.0, Way to provide password
	 * for HS* algorithm is changed. The 'key' attribute value is
	 * passed to {@link KJUR.crypto.Mac.setPassword} so please see
	 * {@link KJUR.crypto.Mac.setPassword} for detail.
	 * As for backword compatibility, if key is a string, has even length and
	 * 0..9, A-F or a-f characters, key string is treated as a hexadecimal
	 * otherwise it is treated as a raw string.
	 * <dd>
	 * </dl>
	 * <b>EXAMPLE</b><br/>
	 * @example
	 * // sign HS256 signature with password "aaa" implicitly handled as string
	 * sJWS = KJUR.jws.JWS.sign(null, {alg: "HS256", cty: "JWT"}, {age: 21}, "aaa");
	 * // sign HS256 signature with password "6161" implicitly handled as hex
	 * sJWS = KJUR.jws.JWS.sign(null, {alg: "HS256", cty: "JWT"}, {age: 21}, "6161");
	 * // sign HS256 signature with base64 password
	 * sJWS = KJUR.jws.JWS.sign(null, {alg: "HS256"}, {age: 21}, {b64: "Mi/8..a="});
	 * // sign RS256 signature with PKCS#8 PEM RSA private key
	 * sJWS = KJUR.jws.JWS.sign(null, {alg: "RS256"}, {age: 21}, "-----BEGIN PRIVATE KEY...");
	 * // sign RS256 signature with PKCS#8 PEM ECC private key with passcode
	 * sJWS = KJUR.jws.JWS.sign(null, {alg: "ES256"}, {age: 21}, 
	 *                          "-----BEGIN PRIVATE KEY...", "keypass");
	 * // header and payload can be passed by both string and object
	 * sJWS = KJUR.jws.JWS.sign(null, '{alg:"HS256",cty:"JWT"}', '{age:21}', "aaa");
	 */
	KJUR.jws.JWS.sign = function(alg, spHeader, spPayload, key, pass) {
	    var ns1 = KJUR.jws.JWS;
	    var sHeader, pHeader, sPayload;

	    // 1. check signatureInput(Header, Payload) is string or object
	    if (typeof spHeader != 'string' && typeof spHeader != 'object')
		throw "spHeader must be JSON string or object: " + spHeader;

	    if (typeof spHeader == 'object') {
		pHeader = spHeader;
		sHeader = JSON.stringify(pHeader);
	    }

	    if (typeof spHeader == 'string') {
		sHeader = spHeader;
		if (! ns1.isSafeJSONString(sHeader))
		    throw "JWS Head is not safe JSON string: " + sHeader;
		pHeader = ns1.readSafeJSONString(sHeader);

	    }

	    sPayload = spPayload;
	    if (typeof spPayload == 'object') sPayload = JSON.stringify(spPayload);

	    // 2. use alg if defined in sHeader
	    if ((alg == '' || alg == null) &&
		pHeader['alg'] !== undefined) {
		alg = pHeader['alg'];
	    }

	    // 3. update sHeader to add alg if alg undefined
	    if ((alg != '' && alg != null) &&
		pHeader['alg'] === undefined) {
		pHeader['alg'] = alg;
		sHeader = JSON.stringify(pHeader);
	    }

	    // 4. check explicit algorithm doesn't match with JWS header.
	    if (alg !== pHeader.alg)
		throw "alg and sHeader.alg doesn't match: " + alg + "!=" + pHeader.alg;

	    // 5. set signature algorithm like SHA1withRSA
	    var sigAlg = null;
	    if (ns1.jwsalg2sigalg[alg] === undefined) {
		throw "unsupported alg name: " + alg;
	    } else {
		sigAlg = ns1.jwsalg2sigalg[alg];
	    }
	    
	    var uHeader = utf8tob64u(sHeader);
	    var uPayload = utf8tob64u(sPayload);
	    var uSignatureInput = uHeader + "." + uPayload
	    // 6. sign
	    var hSig = "";
	    if (sigAlg.substr(0, 4) == "Hmac") {
		if (key === undefined)
		    throw "mac key shall be specified for HS* alg";
		//alert("sigAlg=" + sigAlg);
		var mac = new KJUR.crypto.Mac({'alg': sigAlg, 'prov': 'cryptojs', 'pass': key});
		mac.updateString(uSignatureInput);
		hSig = mac.doFinal();
	    } else if (sigAlg.indexOf("withECDSA") != -1) {
		var sig = new KJUR.crypto.Signature({'alg': sigAlg});
		sig.init(key, pass);
		sig.updateString(uSignatureInput);
		hASN1Sig = sig.sign();
		hSig = KJUR.crypto.ECDSA.asn1SigToConcatSig(hASN1Sig);
	    } else if (sigAlg != "none") {
		var sig = new KJUR.crypto.Signature({'alg': sigAlg});
		sig.init(key, pass);
		sig.updateString(uSignatureInput);
		hSig = sig.sign();
	    }

	    var uSig = hextob64u(hSig);
	    return uSignatureInput + "." + uSig;
	};

	/**
	 * verify JWS signature by specified key or certificate<br/>
	 * @name verify
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {String} sJWS string of JWS signature to verify
	 * @param {Object} key string of public key, certificate or key object to verify
	 * @param {String} acceptAlgs array of algorithm name strings (OPTION)
	 * @return {Boolean} true if the signature is valid otherwise false
	 * @since jws 3.0.0
	 * @see <a href="http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Signature.html">jsrsasign KJUR.crypto.Signature method</a>
	 * @see <a href="http://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Mac.html">jsrsasign KJUR.crypto.Mac method</a>
	 * @description
	 * <p>
	 * This method verifies a JSON Web Signature Compact Serialization string by the validation 
	 * algorithm as described in 
	 * <a href="http://self-issued.info/docs/draft-jones-json-web-signature-04.html#anchor5">
	 * the section 5 of Internet Draft draft-jones-json-web-signature-04.</a>
	 * </p>
	 * <p>
	 * Since 3.2.0 strict key checking has been provided against a JWS algorithm
	 * in a JWS header.
	 * <ul>
	 * <li>In case 'alg' is 'HS*' in the JWS header,
	 * 'key' shall be hexadecimal string for Hmac{256,384,512} shared secret key.
	 * Otherwise it raise an error.</li>
	 * <li>In case 'alg' is 'RS*' or 'PS*' in the JWS header,
	 * 'key' shall be a RSAKey object or a PEM string of
	 * X.509 RSA public key certificate or PKCS#8 RSA public key.
	 * Otherwise it raise an error.</li>
	 * <li>In case 'alg' is 'ES*' in the JWS header,
	 * 'key' shall be a KJUR.crypto.ECDSA object or a PEM string of
	 * X.509 ECC public key certificate or PKCS#8 ECC public key.
	 * Otherwise it raise an error.</li>
	 * <li>In case 'alg' is 'none' in the JWS header,
	 * validation not supported after jsjws 3.1.0.</li>
	 * </ul>
	 * </p>
	 * <p>
	 * NOTE1: The argument 'acceptAlgs' is supported since 3.2.0.
	 * Strongly recommended to provide acceptAlgs to mitigate
	 * signature replacement attacks.<br/>
	 * </p>
	 * <p>
	 * NOTE2: From jsrsasign 4.9.0 jws 3.2.5, Way to provide password
	 * for HS* algorithm is changed. The 'key' attribute value is
	 * passed to {@link KJUR.crypto.Mac.setPassword} so please see
	 * {@link KJUR.crypto.Mac.setPassword} for detail.
	 * As for backword compatibility, if key is a string, has even length and
	 * 0..9, A-F or a-f characters, key string is treated as a hexadecimal
	 * otherwise it is treated as a raw string.
	 * </p>
	 * @example
	 * // 1) verify a RS256 JWS signature by a certificate string.
	 * isValid = KJUR.jws.JWS.verify('eyJh...', '-----BEGIN...', ['RS256']);
	 * 
	 * // 2) verify a HS256 JWS signature by a certificate string.
	 * isValid = KJUR.jws.JWS.verify('eyJh...', {hex: '6f62ad...'}, ['HS256']);
	 * isValid = KJUR.jws.JWS.verify('eyJh...', {b64: 'Mi/ab8...a=='}, ['HS256']);
	 * isValid = KJUR.jws.JWS.verify('eyJh...', {utf8: 'Secret秘密'}, ['HS256']);
	 * isValid = KJUR.jws.JWS.verify('eyJh...', '6f62ad', ['HS256']); // implicit hex
	 * isValid = KJUR.jws.JWS.verify('eyJh...', '6f62ada', ['HS256']); // implicit raw string
	 *
	 * // 3) verify a ES256 JWS signature by a KJUR.crypto.ECDSA key object.
	 * var pubkey = KEYUTIL.getKey('-----BEGIN CERT...');
	 * var isValid = KJUR.jws.JWS.verify('eyJh...', pubkey);
	 */
	KJUR.jws.JWS.verify = function(sJWS, key, acceptAlgs) {
	    var jws = KJUR.jws.JWS;
	    var a = sJWS.split(".");
	    var uHeader = a[0];
	    var uPayload = a[1];
	    var uSignatureInput = uHeader + "." + uPayload;
	    var hSig = b64utohex(a[2]);

	    // 1. parse JWS header
	    var pHeader = jws.readSafeJSONString(b64utoutf8(a[0]));
	    var alg = null;
	    var algType = null; // HS|RS|PS|ES|no
	    if (pHeader.alg === undefined) {
		throw "algorithm not specified in header";
	    } else {
		alg = pHeader.alg;
		algType = alg.substr(0, 2);
	    }

	    // 2. check whether alg is acceptable algorithms
	    if (acceptAlgs != null &&
	        Object.prototype.toString.call(acceptAlgs) === '[object Array]' &&
	        acceptAlgs.length > 0) {
		var acceptAlgStr = ":" + acceptAlgs.join(":") + ":";
		if (acceptAlgStr.indexOf(":" + alg + ":") == -1) {
		    throw "algorithm '" + alg + "' not accepted in the list";
		}
	    }

	    // 3. check whether key is a proper key for alg.
	    if (alg != "none" && key === null) {
		throw "key shall be specified to verify.";
	    }

	    // 3.1. There is no key check for HS* because Mac will check it.
	    //      since jsrsasign 5.0.0.

	    // 3.2. convert key object if key is a public key or cert PEM string
	    if (typeof key == "string" &&
		key.indexOf("-----BEGIN ") != -1) {
		key = KEYUTIL.getKey(key);
	    }

	    // 3.3. check whether key is RSAKey obj if alg is RS* or PS*.
	    if (algType == "RS" || algType == "PS") {
		if (!(key instanceof RSAKey)) {
		    throw "key shall be a RSAKey obj for RS* and PS* algs";
		}
	    }

	    // 3.4. check whether key is ECDSA obj if alg is ES*.
	    if (algType == "ES") {
		if (!(key instanceof KJUR.crypto.ECDSA)) {
		    throw "key shall be a ECDSA obj for ES* algs";
		}
	    }

	    // 3.5. check when alg is 'none'
	    if (alg == "none") {
	    }

	    // 4. check whether alg is supported alg in jsjws.
	    var sigAlg = null;
	    if (jws.jwsalg2sigalg[pHeader.alg] === undefined) {
		throw "unsupported alg name: " + alg;
	    } else {
		sigAlg = jws.jwsalg2sigalg[alg];
	    }

	    // 5. verify
	    if (sigAlg == "none") {
	        throw "not supported";
	    } else if (sigAlg.substr(0, 4) == "Hmac") {
		var hSig2 = null;
		if (key === undefined)
		    throw "hexadecimal key shall be specified for HMAC";
		//try {
		    var mac = new KJUR.crypto.Mac({'alg': sigAlg, 'pass': key});
		    mac.updateString(uSignatureInput);
		    hSig2 = mac.doFinal();
		//} catch(ex) {};
		return hSig == hSig2;
	    } else if (sigAlg.indexOf("withECDSA") != -1) {
		var hASN1Sig = null;
	        try {
		    hASN1Sig = KJUR.crypto.ECDSA.concatSigToASN1Sig(hSig);
		} catch (ex) {
		    return false;
		}
		var sig = new KJUR.crypto.Signature({'alg': sigAlg});
		sig.init(key)
		sig.updateString(uSignatureInput);
		return sig.verify(hASN1Sig);
	    } else {
		var sig = new KJUR.crypto.Signature({'alg': sigAlg});
		sig.init(key)
		sig.updateString(uSignatureInput);
		return sig.verify(hSig);
	    }
	};

	/**
	 * parse header and payload of JWS signature<br/>
	 * @name parse
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {String} sJWS string of JWS signature to parse
	 * @return {Array} associative array of parsed header and payload. See below.
	 * @throws if sJWS is malformed JWS signature
	 * @since jws 3.3.3
	 * @description
	 * This method parses JWS signature string. 
	 * Resulted associative array has following properties:
	 * <ul>
	 * <li>headerObj - JSON object of header</li>
	 * <li>payloadObj - JSON object of payload if payload is JSON string otherwise undefined</li>
	 * <li>headerPP - pretty printed JSON header by stringify</li>
	 * <li>payloadPP - pretty printed JSON payload by stringify if payload is JSON otherwise Base64URL decoded raw string of payload</li>
	 * <li>sigHex - hexadecimal string of signature</li>
	 * </ul>
	 * @example
	 * KJUR.jws.JWS.parse(sJWS) ->
	 * { 
	 *   headerObj: {"alg": "RS256", "typ": "JWS"},
	 *   payloadObj: {"product": "orange", "quantity": 100},
	 *   headerPP: 
	 *   '{
	 *     "alg": "RS256",
	 *     "typ": "JWS"
	 *   }',
	 *   payloadPP: 
	 *   '{
	 *     "product": "orange",
	 *     "quantity": 100
	 *   }',
	 *   sigHex: "91f3cd..." 
	 * }
	 */
	KJUR.jws.JWS.parse = function(sJWS) {
	    var a = sJWS.split(".");
	    var result = {};
	    var uHeader, uPayload, uSig;
	    if (a.length != 2 && a.length != 3)
		throw "malformed sJWS: wrong number of '.' splitted elements";

	    uHeader = a[0];
	    uPayload = a[1];
	    if (a.length == 3) uSig = a[2]; 

	    result.headerObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(uHeader));
	    result.payloadObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(uPayload));

	    result.headerPP = JSON.stringify(result.headerObj, null, "  ");
	    if (result.payloadObj == null) {
		result.payloadPP = b64utoutf8(uPayload);
	    } else {
		result.payloadPP = JSON.stringify(result.payloadObj, null, "  ");
	    }

	    if (uSig !== undefined) {
		result.sigHex = b64utohex(uSig);
	    }

	    return result;
	};

	/**
	 * @name verifyJWT
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {String} sJWT string of JSON Web Token(JWT) to verify
	 * @param {Object} key string of public key, certificate or key object to verify
	 * @param {Array} acceptField associative array of acceptable fields (OPTION)
	 * @return {Boolean} true if the JWT token is valid otherwise false
	 * @since jws 3.2.3 jsrsasign 4.8.0
	 *
	 * @description
	 * This method verifies a
	 * <a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a> 
	 * JSON Web Token(JWT).
	 * It will verify following:
	 * <ul>
	 * <li>Header.alg
	 * <ul>
	 * <li>alg is specified in JWT header.</li>
	 * <li>alg is included in acceptField.alg array. (MANDATORY)</li>
	 * <li>alg is proper for key.</li>
	 * </ul>
	 * </li>
	 * <li>Payload.iss (issuer) - Payload.iss is included in acceptField.iss array if specified. (OPTION)</li>
	 * <li>Payload.sub (subject) - Payload.sub is included in acceptField.sub array if specified. (OPTION)</li>
	 * <li>Payload.aud (audience) - Payload.aud is included in acceptField.aud array or 
	 *     the same as value if specified. (OPTION)</li>
	 * <li>Time validity
	 * <ul>
	 * <li>
	 * If acceptField.verifyAt as number of UNIX origin time is specifed for validation time, 
	 * this method will verify at the time for it, otherwise current time will be used to verify.
	 * </li>
	 * <li>
	 * Clock of JWT generator or verifier can be fast or slow. If these clocks are
	 * very different, JWT validation may fail. To avoid such case, 'jsrsasign' supports
	 * 'acceptField.gracePeriod' parameter which specifies acceptable time difference
	 * of those clocks in seconds. So if you want to accept slow or fast in 2 hours,
	 * you can specify <code>acceptField.gracePeriod = 2 * 60 * 60;</code>.
	 * "gracePeriod" is zero by default.
	 * "gracePeriod" is supported since jsrsasign 5.0.12.
	 * </li>
	 * <li>Payload.exp (expire) - Validation time is smaller than Payload.exp + gracePeriod.</li>
	 * <li>Payload.nbf (not before) - Validation time is greater than Payload.nbf - gracePeriod.</li>
	 * <li>Payload.iat (issued at) - Validation time is greater than Payload.iat - gracePeriod.</li>
	 * </ul>
	 * </li>
	 * <li>Payload.jti (JWT id) - Payload.jti is included in acceptField.jti if specified. (OPTION)</li>
	 * <li>JWS signature of JWS is valid for specified key.</li>
	 * </ul>
	 *
	 * <h4>acceptField parameters</h4>
	 * Here is available acceptField argument parameters:
	 * <ul>
	 * <li>alg - array of acceptable signature algorithm names (ex. ["HS256", "HS384"])</li>
	 * <li>iss - array of acceptable issuer names (ex. ['http://foo.com'])</li>
	 * <li>sub - array of acceptable subject names (ex. ['mailto:john@foo.com'])</li>
	 * <li>aud - array or string of acceptable audience name(s) (ex. ['http://foo.com'])</li>
	 * <li>jti - string of acceptable JWT ID (OPTION) (ex. 'id1234')</li>
	 * <li>
	 * verifyAt - time to verify 'nbf', 'iat' and 'exp' in UNIX seconds 
	 * (OPTION) (ex. 1377663900).  
	 * If this is not specified, current time of verifier will be used. 
	 * {@link KJUR.jws.IntDate} may be useful to specify it.
	 * </li>
	 * <li>gracePeriod - acceptable time difference between signer and verifier
	 * in seconds (ex. 3600). If this is not specified, zero will be used.</li>
	 * </ul>
	 *
	 * @example
	 * // simple validation for HS256
	 * isValid = KJUR.jws.JWS.verifyJWT("eyJhbG...", "616161", {alg: ["HS256"]}),
	 *
	 * // full validation for RS or PS
	 * pubkey = KEYUTIL.getKey('-----BEGIN CERT...');
	 * isValid = KJUR.jws.JWS.verifyJWT('eyJh...', pubkey, {
	 *   alg: ['RS256', 'RS512', 'PS256', 'PS512'],
	 *   iss: ['http://foo.com'],
	 *   sub: ['mailto:john@foo.com', 'mailto:alice@foo.com'],
	 *   verifyAt: KJUR.jws.IntDate.get('20150520235959Z'),
	 *   aud: ['http://foo.com'], // aud: 'http://foo.com' is fine too.
	 *   jti: 'id123456',
	 *   gracePeriod: 1 * 60 * 60 // accept 1 hour slow or fast
	 * });
	 */
	KJUR.jws.JWS.verifyJWT = function(sJWT, key, acceptField) {
	    var ns1 = KJUR.jws.JWS;

	    // 1. parse JWT
	    var a = sJWT.split(".");
	    var uHeader = a[0];
	    var uPayload = a[1];
	    var uSignatureInput = uHeader + "." + uPayload;
	    var hSig = b64utohex(a[2]);

	    // 2. parse JWS header
	    var pHeader = ns1.readSafeJSONString(b64utoutf8(uHeader));

	    // 3. parse JWS payload
	    var pPayload = ns1.readSafeJSONString(b64utoutf8(uPayload));

	    // 4. algorithm ('alg' in header) check
	    if (pHeader.alg === undefined) return false;
	    if (acceptField.alg === undefined)
		throw "acceptField.alg shall be specified";
	    if (! ns1.inArray(pHeader.alg, acceptField.alg)) return false;

	    // 5. issuer ('iss' in payload) check
	    if (pPayload.iss !== undefined && typeof acceptField.iss === "object") {
		if (! ns1.inArray(pPayload.iss, acceptField.iss)) return false;
	    }

	    // 6. subject ('sub' in payload) check
	    if (pPayload.sub !== undefined && typeof acceptField.sub === "object") {
		if (! ns1.inArray(pPayload.sub, acceptField.sub)) return false;
	    }

	    // 7. audience ('aud' in payload) check
	    if (pPayload.aud !== undefined && typeof acceptField.aud === "object") {
		if (typeof pPayload.aud == "string") {
		    if (! ns1.inArray(pPayload.aud, acceptField.aud))
			return false;
		} else if (typeof pPayload.aud == "object") {
		    if (! ns1.includedArray(pPayload.aud, acceptField.aud))
			return false;
		}
	    }

	    // 8. time validity 
	    //   (nbf - gracePeriod < now < exp + gracePeriod) && (iat - gracePeriod < now)
	    var now = KJUR.jws.IntDate.getNow();
	    if (acceptField.verifyAt !== undefined && typeof acceptField.verifyAt === "number") {
		now = acceptField.verifyAt;
	    }
	    if (acceptField.gracePeriod === undefined || 
	        typeof acceptField.gracePeriod !== "number") {
		acceptField.gracePeriod = 0;
	    }

	    // 8.1 expired time 'exp' check
	    if (pPayload.exp !== undefined && typeof pPayload.exp == "number") {
		if (pPayload.exp + acceptField.gracePeriod < now) return false;
	    }

	    // 8.2 not before time 'nbf' check
	    if (pPayload.nbf !== undefined && typeof pPayload.nbf == "number") {
		if (now < pPayload.nbf - acceptField.gracePeriod) return false;
	    }
	    
	    // 8.3 issued at time 'iat' check
	    if (pPayload.iat !== undefined && typeof pPayload.iat == "number") {
		if (now < pPayload.iat - acceptField.gracePeriod) return false;
	    }

	    // 9 JWT id 'jti' check
	    if (pPayload.jti !== undefined && acceptField.jti !== undefined) {
	      if (pPayload.jti !== acceptField.jti) return false;
	    }

	    // 10 JWS signature check
	    if (! KJUR.jws.JWS.verify(sJWT, key, acceptField.alg)) return false;

	    // 11 passed all check
	    return true;
	};

	/**
	 * check whether array is included by another array
	 * @name includedArray
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {Array} a1 check whether set a1 is included by a2
	 * @param {Array} a2 check whether set a1 is included by a2
	 * @return {Boolean} check whether set a1 is included by a2
	 * @since jws 3.2.3
	 * This method verifies whether an array is included by another array.
	 * It doesn't care about item ordering in a array.
	 * @example
	 * KJUR.jws.JWS.includedArray(['b'], ['b', 'c', 'a']) => true
	 * KJUR.jws.JWS.includedArray(['a', 'b'], ['b', 'c', 'a']) => true
	 * KJUR.jws.JWS.includedArray(['a', 'b'], ['b', 'c']) => false
	 */
	KJUR.jws.JWS.includedArray = function(a1, a2) {
	    var inArray = KJUR.jws.JWS.inArray;
	    if (a1 === null) return false;
	    if (typeof a1 !== "object") return false;
	    if (typeof a1.length !== "number") return false;

	    for (var i = 0; i < a1.length; i++) {
		if (! inArray(a1[i], a2)) return false;
	    }
	    return true;
	};

	/**
	 * check whether item is included by array
	 * @name inArray
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {String} item check whether item is included by array
	 * @param {Array} a check whether item is included by array
	 * @return {Boolean} check whether item is included by array
	 * @since jws 3.2.3
	 * This method verifies whether an item is included by an array.
	 * It doesn't care about item ordering in an array.
	 * @example
	 * KJUR.jws.JWS.inArray('b', ['b', 'c', 'a']) => true
	 * KJUR.jws.JWS.inArray('a', ['b', 'c', 'a']) => true
	 * KJUR.jws.JWS.inArray('a', ['b', 'c']) => false
	 */
	KJUR.jws.JWS.inArray = function(item, a) {
	    if (a === null) return false;
	    if (typeof a !== "object") return false;
	    if (typeof a.length !== "number") return false;
	    for (var i = 0; i < a.length; i++) {
		if (a[i] == item) return true;
	    }
	    return false;
	};

	/**
	 * static associative array of general signature algorithm name from JWS algorithm name
	 * @since jws 3.0.0
	 */
	KJUR.jws.JWS.jwsalg2sigalg = {
	    "HS256":	"HmacSHA256",
	    "HS384":	"HmacSHA384",
	    "HS512":	"HmacSHA512",
	    "RS256":	"SHA256withRSA",
	    "RS384":	"SHA384withRSA",
	    "RS512":	"SHA512withRSA",
	    "ES256":	"SHA256withECDSA",
	    "ES384":	"SHA384withECDSA",
	    //"ES512":	"SHA512withECDSA", // unsupported because of jsrsasign's bug
	    "PS256":	"SHA256withRSAandMGF1",
	    "PS384":	"SHA384withRSAandMGF1",
	    "PS512":	"SHA512withRSAandMGF1",
	    "none":	"none",
	};

	// === utility static method ==================================================

	/**
	 * check whether a String "s" is a safe JSON string or not.<br/>
	 * If a String "s" is a malformed JSON string or an other object type
	 * this returns 0, otherwise this returns 1.
	 * @name isSafeJSONString
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {String} s JSON string
	 * @return {Number} 1 or 0
	 */
	KJUR.jws.JWS.isSafeJSONString = function(s, h, p) {
	    var o = null;
	    try {
		o = jsonParse(s);
		if (typeof o != "object") return 0;
		if (o.constructor === Array) return 0;
		if (h) h[p] = o;
		return 1;
	    } catch (ex) {
		return 0;
	    }
	};

	/**
	 * read a String "s" as JSON object if it is safe.<br/>
	 * If a String "s" is a malformed JSON string or not JSON string,
	 * this returns null, otherwise returns JSON object.
	 * @name readSafeJSONString
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {String} s JSON string
	 * @return {Object} JSON object or null
	 * @since 1.1.1
	 */
	KJUR.jws.JWS.readSafeJSONString = function(s) {
	    var o = null;
	    try {
		o = jsonParse(s);
		if (typeof o != "object") return null;
		if (o.constructor === Array) return null;
		return o;
	    } catch (ex) {
		return null;
	    }
	};

	/**
	 * get Encoed Signature Value from JWS string.<br/>
	 * @name getEncodedSignatureValueFromJWS
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {String} sJWS JWS signature string to be verified
	 * @return {String} string of Encoded Signature Value 
	 * @throws if sJWS is not comma separated string such like "Header.Payload.Signature".
	 */
	KJUR.jws.JWS.getEncodedSignatureValueFromJWS = function(sJWS) {
	    var matchResult = sJWS.match(/^[^.]+\.[^.]+\.([^.]+)$/);
	    if (matchResult == null) {
		throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
	    }
	    return matchResult[1];
	};

	/**
	 * get RFC 7638 JWK thumbprint from JWK object
	 * @name getJWKthumbprint
	 * @memberOf KJUR.jws.JWS
	 * @function
	 * @static
	 * @param {Object} o JWK object to be calculated thumbprint
	 * @return {String} Base64 URL encoded JWK thumbprint value
	 * @since jsrsasign 5.0.2 jws 3.3.2
	 * @description
	 * This method calculates JWK thmubprint for specified JWK object
	 * as described in 
	 * <a href="https://tools.ietf.org/html/rfc7638">RFC 7638</a>.
	 * It supports all type of "kty". (i.e. "RSA", "EC" and "oct"
	 * (for symmetric key))
	 * Working sample is 
	 * <a href="https://kjur.github.io/jsrsasign/sample/tool_jwktp.html">here</a>.
	 * @example
	 * jwk = {"kty":"RSA", "n":"0vx...", "e":"AQAB", ...};
	 * thumbprint = KJUR.jws.JWS.getJWKthumbprint(jwk);
	 */
	KJUR.jws.JWS.getJWKthumbprint = function(o) {
	    if (o.kty !== "RSA" &&
		o.kty !== "EC" &&
		o.kty !== "oct")
		throw "unsupported algorithm for JWK Thumprint";

	    // 1. get canonically ordered json string
	    var s = '{';
	    if (o.kty === "RSA") {
		if (typeof o.n != "string" || typeof o.e != "string")
		    throw "wrong n and e value for RSA key";
		s += '"' + 'e' + '":"' + o.e + '",';
		s += '"' + 'kty' + '":"' + o.kty + '",';
		s += '"' + 'n' + '":"' + o.n + '"}';
	    } else if (o.kty === "EC") {
		if (typeof o.crv != "string" || 
		    typeof o.x != "string" ||
		    typeof o.y != "string")
		    throw "wrong crv, x and y value for EC key";
		s += '"' + 'crv' + '":"' + o.crv + '",';
		s += '"' + 'kty' + '":"' + o.kty + '",';
		s += '"' + 'x' + '":"' + o.x + '",';
		s += '"' + 'y' + '":"' + o.y + '"}';
	    } else if (o.kty === "oct") {
		if (typeof o.k != "string")
		    throw "wrong k value for oct(symmetric) key";
		s += '"' + 'kty' + '":"' + o.kty + '",';
		s += '"' + 'k' + '":"' + o.k + '"}';
	    }
	    //alert(s);

	    // 2. get thumb print
	    var hJWK = rstrtohex(s);
	    var hash = KJUR.crypto.Util.hashHex(hJWK, "sha256");
	    var hashB64U = hextob64u(hash);

	    return hashB64U;
	};

	/**
	 * IntDate class for time representation for JSON Web Token(JWT)
	 * @class KJUR.jws.IntDate class
	 * @name KJUR.jws.IntDate
	 * @since jws 3.0.1
	 * @description
	 * Utility class for IntDate which is integer representation of UNIX origin time
	 * used in JSON Web Token(JWT).
	 */
	KJUR.jws.IntDate = {};

	/**
	 * get UNIX origin time from by string
	 * @name get
	 * @memberOf KJUR.jws.IntDate
	 * @function
	 * @static
	 * @param {String} s string of time representation
	 * @return {Integer} UNIX origin time in seconds for argument 's'
	 * @since jws 3.0.1
	 * @throws "unsupported format: s" when malformed format
	 * @description
	 * This method will accept following representation of time.
	 * <ul>
	 * <li>now - current time</li>
	 * <li>now + 1hour - after 1 hour from now</li>
	 * <li>now + 1day - after 1 day from now</li>
	 * <li>now + 1month - after 30 days from now</li>
	 * <li>now + 1year - after 365 days from now</li>
	 * <li>YYYYmmDDHHMMSSZ - UTC time (ex. 20130828235959Z)</li>
	 * <li>number - UNIX origin time (seconds from 1970-01-01 00:00:00) (ex. 1377714748)</li>
	 * </ul>
	 */
	KJUR.jws.IntDate.get = function(s) {
	    if (s == "now") {
		return KJUR.jws.IntDate.getNow();
	    } else if (s == "now + 1hour") {
		return KJUR.jws.IntDate.getNow() + 60 * 60;
	    } else if (s == "now + 1day") {
		return KJUR.jws.IntDate.getNow() + 60 * 60 * 24;
	    } else if (s == "now + 1month") {
		return KJUR.jws.IntDate.getNow() + 60 * 60 * 24 * 30;
	    } else if (s == "now + 1year") {
		return KJUR.jws.IntDate.getNow() + 60 * 60 * 24 * 365;
	    } else if (s.match(/Z$/)) {
		return KJUR.jws.IntDate.getZulu(s);
	    } else if (s.match(/^[0-9]+$/)) {
		return parseInt(s);
	    }
	    throw "unsupported format: " + s;
	};

	/**
	 * get UNIX origin time from Zulu time representation string
	 * @name getZulu
	 * @memberOf KJUR.jws.IntDate
	 * @function
	 * @static
	 * @param {String} s string of Zulu time representation (ex. 20151012125959Z)
	 * @return {Integer} UNIX origin time in seconds for argument 's'
	 * @since jws 3.0.1
	 * @throws "unsupported format: s" when malformed format
	 * @description
	 * This method provides UNIX origin time from Zulu time.
	 * Following representations are supported:
	 * <ul>
	 * <li>YYYYMMDDHHmmSSZ - GeneralizedTime format</li>
	 * <li>YYMMDDHHmmSSZ - UTCTime format. If YY is greater or equal to 
	 * 50 then it represents 19YY otherwise 20YY.</li>
	 * </ul>
	 * @example
	 * KJUR.jws.IntDate.getZulu("20151012125959Z") => 1478...
	 * KJUR.jws.IntDate.getZulu("151012125959Z") => 1478...
	 */
	KJUR.jws.IntDate.getZulu = function(s) {
	    var matchResult = s.match(/(\d+)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)Z/);
	    if (matchResult) {
	        var sYear = matchResult[1];
		var year = parseInt(sYear);
		if (sYear.length == 4) {
	        } else if (sYear.length == 2) {
		    if (50 <= year && year < 100) {
			year = 1900 + year;
		    } else if (0 <= year && year < 50) {
			year = 2000 + year;
		    } else {
			throw "malformed year string for UTCTime";
		    }
		} else {
		    throw "malformed year string";
		}
		var month = parseInt(matchResult[2]) - 1;
		var day = parseInt(matchResult[3]);
		var hour = parseInt(matchResult[4]);
		var min = parseInt(matchResult[5]);
		var sec = parseInt(matchResult[6]);
		var d = new Date(Date.UTC(year, month, day, hour, min, sec));
		return ~~(d / 1000);
	    }
	    throw "unsupported format: " + s;
	};

	/**
	 * get UNIX origin time of current time
	 * @name getNow
	 * @memberOf KJUR.jws.IntDate
	 * @function
	 * @static
	 * @return {Integer} UNIX origin time for current time
	 * @since jws 3.0.1
	 * @description
	 * This method provides UNIX origin time for current time
	 * @example
	 * KJUR.jws.IntDate.getNow() => 1478...
	 */
	KJUR.jws.IntDate.getNow = function() {
	    var d = ~~(new Date() / 1000);
	    return d;
	};

	/**
	 * get UTC time string from UNIX origin time value
	 * @name intDate2UTCString
	 * @memberOf KJUR.jws.IntDate
	 * @function
	 * @static
	 * @param {Integer} intDate UNIX origin time value (ex. 1478...)
	 * @return {String} UTC time string
	 * @since jws 3.0.1
	 * @description
	 * This method provides UTC time string for UNIX origin time value.
	 * @example
	 * KJUR.jws.IntDate.intDate2UTCString(1478...) => "2015 Oct ..."
	 */
	KJUR.jws.IntDate.intDate2UTCString = function(intDate) {
	    var d = new Date(intDate * 1000);
	    return d.toUTCString();
	};

	/**
	 * get UTC time string from UNIX origin time value
	 * @name intDate2Zulu
	 * @memberOf KJUR.jws.IntDate
	 * @function
	 * @static
	 * @param {Integer} intDate UNIX origin time value (ex. 1478...)
	 * @return {String} Zulu time string
	 * @since jws 3.0.1
	 * @description
	 * This method provides Zulu time string for UNIX origin time value.
	 * @example
	 * KJUR.jws.IntDate.intDate2UTCString(1478...) => "20151012...Z"
	 */
	KJUR.jws.IntDate.intDate2Zulu = function(intDate) {
	    var d = new Date(intDate * 1000);
	    var year = ("0000" + d.getUTCFullYear()).slice(-4);    
	    var mon =  ("00" + (d.getUTCMonth() + 1)).slice(-2);    
	    var day =  ("00" + d.getUTCDate()).slice(-2);    
	    var hour = ("00" + d.getUTCHours()).slice(-2);    
	    var min =  ("00" + d.getUTCMinutes()).slice(-2);    
	    var sec =  ("00" + d.getUTCSeconds()).slice(-2);    
	    return year + mon + day + hour + min + sec + "Z";
	};


	/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
	 */
	// Depends on jsbn.js and rng.js

	// Version 1.1: support utf-8 encoding in pkcs1pad2

	// convert a (hex) string to a bignum object
	function parseBigInt(str,r) {
	  return new BigInteger(str,r);
	}

	function linebrk(s,n) {
	  var ret = "";
	  var i = 0;
	  while(i + n < s.length) {
	    ret += s.substring(i,i+n) + "\n";
	    i += n;
	  }
	  return ret + s.substring(i,s.length);
	}

	function byte2Hex(b) {
	  if(b < 0x10)
	    return "0" + b.toString(16);
	  else
	    return b.toString(16);
	}

	// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint
	function pkcs1pad2(s,n) {
	  if(n < s.length + 11) { // TODO: fix for utf-8
	    alert("Message too long for RSA");
	    return null;
	  }
	  var ba = new Array();
	  var i = s.length - 1;
	  while(i >= 0 && n > 0) {
	    var c = s.charCodeAt(i--);
	    if(c < 128) { // encode using utf-8
	      ba[--n] = c;
	    }
	    else if((c > 127) && (c < 2048)) {
	      ba[--n] = (c & 63) | 128;
	      ba[--n] = (c >> 6) | 192;
	    }
	    else {
	      ba[--n] = (c & 63) | 128;
	      ba[--n] = ((c >> 6) & 63) | 128;
	      ba[--n] = (c >> 12) | 224;
	    }
	  }
	  ba[--n] = 0;
	  var rng = new SecureRandom();
	  var x = new Array();
	  while(n > 2) { // random non-zero pad
	    x[0] = 0;
	    while(x[0] == 0) rng.nextBytes(x);
	    ba[--n] = x[0];
	  }
	  ba[--n] = 2;
	  ba[--n] = 0;
	  return new BigInteger(ba);
	}

	// PKCS#1 (OAEP) mask generation function
	function oaep_mgf1_arr(seed, len, hash)
	{
	    var mask = '', i = 0;

	    while (mask.length < len)
	    {
	        mask += hash(String.fromCharCode.apply(String, seed.concat([
	                (i & 0xff000000) >> 24,
	                (i & 0x00ff0000) >> 16,
	                (i & 0x0000ff00) >> 8,
	                i & 0x000000ff])));
	        i += 1;
	    }

	    return mask;
	}

	/**
	 * PKCS#1 (OAEP) pad input string s to n bytes, and return a bigint
	 * @name oaep_pad
	 * @param s raw string of message
	 * @param n key length of RSA key
	 * @param hash JavaScript function to calculate raw hash value from raw string or algorithm name (ex. "SHA1") 
	 * @param hashLen byte length of resulted hash value (ex. 20 for SHA1)
	 * @return {BigInteger} BigInteger object of resulted PKCS#1 OAEP padded message
	 * @description
	 * This function calculates OAEP padded message from original message.<br/>
	 * NOTE: Since jsrsasign 6.2.0, 'hash' argument can accept an algorithm name such as "sha1".
	 * @example
	 * oaep_pad("aaa", 128) &rarr; big integer object // SHA-1 by default
	 * oaep_pad("aaa", 128, function(s) {...}, 20);
	 * oaep_pad("aaa", 128, "sha1");
	 */
	function oaep_pad(s, n, hash, hashLen) {
	    var MD = KJUR.crypto.MessageDigest;
	    var Util = KJUR.crypto.Util;
	    var algName = null;

	    if (!hash) hash = "sha1";

	    if (typeof hash === "string") {
		algName = MD.getCanonicalAlgName(hash);
		hashLen = MD.getHashLength(algName);
	        hash = function(s) { return hextorstr(Util.hashString(s, algName)); };
	    }

	    if (s.length + 2 * hashLen + 2 > n) {
	        throw "Message too long for RSA";
	    }

	    var PS = '', i;

	    for (i = 0; i < n - s.length - 2 * hashLen - 2; i += 1) {
	        PS += '\x00';
	    }

	    var DB = hash('') + PS + '\x01' + s;
	    var seed = new Array(hashLen);
	    new SecureRandom().nextBytes(seed);
	    
	    var dbMask = oaep_mgf1_arr(seed, DB.length, hash);
	    var maskedDB = [];

	    for (i = 0; i < DB.length; i += 1) {
	        maskedDB[i] = DB.charCodeAt(i) ^ dbMask.charCodeAt(i);
	    }

	    var seedMask = oaep_mgf1_arr(maskedDB, seed.length, hash);
	    var maskedSeed = [0];

	    for (i = 0; i < seed.length; i += 1) {
	        maskedSeed[i + 1] = seed[i] ^ seedMask.charCodeAt(i);
	    }

	    return new BigInteger(maskedSeed.concat(maskedDB));
	}

	// "empty" RSA key constructor
	function RSAKey() {
	  this.n = null;
	  this.e = 0;
	  this.d = null;
	  this.p = null;
	  this.q = null;
	  this.dmp1 = null;
	  this.dmq1 = null;
	  this.coeff = null;
	}

	// Set the public key fields N and e from hex strings
	function RSASetPublic(N,E) {
	  this.isPublic = true;
	  if (typeof N !== "string") 
	  {
	    this.n = N;
	    this.e = E;
	  }
	  else if(N != null && E != null && N.length > 0 && E.length > 0) {
	    this.n = parseBigInt(N,16);
	    this.e = parseInt(E,16);
	  }
	  else
	    alert("Invalid RSA public key");
	}

	// Perform raw public operation on "x": return x^e (mod n)
	function RSADoPublic(x) {
	  return x.modPowInt(this.e, this.n);
	}

	// Return the PKCS#1 RSA encryption of "text" as an even-length hex string
	function RSAEncrypt(text) {
	  var m = pkcs1pad2(text,(this.n.bitLength()+7)>>3);
	  if(m == null) return null;
	  var c = this.doPublic(m);
	  if(c == null) return null;
	  var h = c.toString(16);
	  if((h.length & 1) == 0) return h; else return "0" + h;
	}

	// Return the PKCS#1 OAEP RSA encryption of "text" as an even-length hex string
	function RSAEncryptOAEP(text, hash, hashLen) {
	  var m = oaep_pad(text, (this.n.bitLength() + 7) >> 3, hash, hashLen);
	  if(m == null) return null;
	  var c = this.doPublic(m);
	  if(c == null) return null;
	  var h = c.toString(16);
	  if((h.length & 1) == 0) return h; else return "0" + h;
	}

	// Return the PKCS#1 RSA encryption of "text" as a Base64-encoded string
	//function RSAEncryptB64(text) {
	//  var h = this.encrypt(text);
	//  if(h) return hex2b64(h); else return null;
	//}

	// protected
	RSAKey.prototype.doPublic = RSADoPublic;

	// public
	RSAKey.prototype.setPublic = RSASetPublic;
	RSAKey.prototype.encrypt = RSAEncrypt;
	RSAKey.prototype.encryptOAEP = RSAEncryptOAEP;
	//RSAKey.prototype.encrypt_b64 = RSAEncryptB64;

	RSAKey.prototype.type = "RSA";

	/*! CryptoJS v3.1.2 core-fix.js
	 * code.google.com/p/crypto-js
	 * (c) 2009-2013 by Jeff Mott. All rights reserved.
	 * code.google.com/p/crypto-js/wiki/License
	 * THIS IS FIX of 'core.js' to fix Hmac issue.
	 * https://code.google.com/p/crypto-js/issues/detail?id=84
	 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
	 */
	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {
	        function F() {}

	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                F.prototype = this;
	                var subtype = new F();

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init')) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];
	            for (var i = 0; i < nBytes; i += 4) {
	                words.push((Math.random() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));

	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));

	/*! keyutil-1.0.14.js (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	/*
	 * keyutil.js - key utility for PKCS#1/5/8 PEM, RSA/DSA/ECDSA key object
	 *
	 * Copyright (c) 2013-2016 Kenji Urushima (kenji.urushima@gmail.com)
	 *
	 * This software is licensed under the terms of the MIT License.
	 * http://kjur.github.com/jsrsasign/license
	 *
	 * The above copyright and license notice shall be 
	 * included in all copies or substantial portions of the Software.
	 */
	/**
	 * @fileOverview
	 * @name keyutil-1.0.js
	 * @author Kenji Urushima kenji.urushima@gmail.com
	 * @version keyutil 1.0.14 (2016-Oct-08)
	 * @since jsrsasign 4.1.4
	 * @license <a href="http://kjur.github.io/jsrsasign/license/">MIT License</a>
	 */

	/**
	 * @name KEYUTIL
	 * @class class for RSA/ECC/DSA key utility
	 * @description 
	 * <br/>
	 * {@link KEYUTIL} class is an update of former {@link PKCS5PKEY} class.
	 * So for now, {@link PKCS5PKEY} is deprecated class.
	 * {@link KEYUTIL} class has following features:
	 * <dl>
	 * <dt><b>key loading - {@link KEYUTIL.getKey}</b>
	 * <dd>
	 * <ul>
	 * <li>supports RSAKey and KJUR.crypto.{ECDSA,DSA} key object</li>
	 * <li>supports private key and public key</li>
	 * <li>supports encrypted and plain private key</li>
	 * <li>supports PKCS#1, PKCS#5 and PKCS#8 key</li>
	 * <li>supports public key in X.509 certificate</li>
	 * <li>key represented by JSON object</li>
	 * </ul>
	 * NOTE1: Encrypted PKCS#8 only supports PBKDF2/HmacSHA1/3DES <br/>
	 * NOTE2: Encrypted PKCS#5 supports DES-CBC, DES-EDE3-CBC, AES-{128,192.256}-CBC <br/>
	 *
	 * <dt><b>exporting key - {@link KEYUTIL.getPEM}</b>
	 * <dd>
	 * {@link KEYUTIL.getPEM} method supports following formats:
	 * <ul>
	 * <li>supports RSA/EC/DSA keys</li>
	 * <li>PKCS#1 plain RSA/EC/DSA private key</li>
	 * <li>PKCS#5 encrypted RSA/EC/DSA private key with DES-CBC, DES-EDE3-CBC, AES-{128,192.256}-CBC</li>
	 * <li>PKCS#8 plain RSA/EC/DSA private key</li>
	 * <li>PKCS#8 encrypted RSA/EC/DSA private key with PBKDF2_HmacSHA1_3DES</li>
	 * </ul>
	 *
	 * <dt><b>keypair generation - {@link KEYUTIL.generateKeypair}</b>
	 * <ul>
	 * <li>generate key pair of {@link RSAKey} or {@link KJUR.crypto.ECDSA}.</li>
	 * <li>generate private key and convert it to PKCS#5 encrypted private key.</li>
	 * </ul>
	 * NOTE: {@link KJUR.crypto.DSA} is not yet supported.
	 * </dl>
	 * 
	 * @example
	 * // 1. loading PEM private key
	 * var key = KEYUTIL.getKey(pemPKCS1PrivateKey);
	 * var key = KEYUTIL.getKey(pemPKCS5EncryptedPrivateKey, "passcode");
	 * var key = KEYUTIL.getKey(pemPKC85PlainPrivateKey);
	 * var key = KEYUTIL.getKey(pemPKC85EncryptedPrivateKey, "passcode");
	 * // 2. loading PEM public key
	 * var key = KEYUTIL.getKey(pemPKCS8PublicKey);
	 * var key = KEYUTIL.getKey(pemX509Certificate);
	 * // 3. exporting private key
	 * var pem = KEYUTIL.getPEM(privateKeyObj, "PKCS1PRV");
	 * var pem = KEYUTIL.getPEM(privateKeyObj, "PKCS5PRV", "passcode"); // DES-EDE3-CBC by default
	 * var pem = KEYUTIL.getPEM(privateKeyObj, "PKCS5PRV", "passcode", "DES-CBC");
	 * var pem = KEYUTIL.getPEM(privateKeyObj, "PKCS8PRV");
	 * var pem = KEYUTIL.getPEM(privateKeyObj, "PKCS8PRV", "passcode");
	 * // 4. exporting public key
	 * var pem = KEYUTIL.getPEM(publicKeyObj);
	 */
	/*
	 * DEPRECATED METHODS
	 * GET PKCS8
	 * KEYUTIL.getRSAKeyFromPlainPKCS8PEM
	 * KEYUTIL.getRSAKeyFromPlainPKCS8Hex
	 * KEYUTIL.getRSAKeyFromEncryptedPKCS8PEM
	 * P8 UTIL (make internal use)
	 * KEYUTIL.getPlainPKCS8HexFromEncryptedPKCS8PEM
	 * GET PKCS8 PUB
	 * KEYUTIL.getKeyFromPublicPKCS8PEM
	 * KEYUTIL.getKeyFromPublicPKCS8Hex
	 * KEYUTIL.getRSAKeyFromPublicPKCS8PEM
	 * KEYUTIL.getRSAKeyFromPublicPKCS8Hex
	 * GET PKCS5
	 * KEYUTIL.getRSAKeyFromEncryptedPKCS5PEM
	 * PUT PKCS5
	 * KEYUTIL.getEncryptedPKCS5PEMFromRSAKey
	 * OTHER METHODS (FOR INTERNAL?)
	 * KEYUTIL.getHexFromPEM
	 * KEYUTIL.getDecryptedKeyHexByKeyIV
	 */
	var KEYUTIL = function() {
	    // *****************************************************************
	    // *** PRIVATE PROPERTIES AND METHODS *******************************
	    // *****************************************************************
	    // shared key decryption ------------------------------------------
	    var decryptAES = function(dataHex, keyHex, ivHex) {
	        return decryptGeneral(CryptoJS.AES, dataHex, keyHex, ivHex);
	    };

	    var decrypt3DES = function(dataHex, keyHex, ivHex) {
	        return decryptGeneral(CryptoJS.TripleDES, dataHex, keyHex, ivHex);
	    };

	    var decryptDES = function(dataHex, keyHex, ivHex) {
	        return decryptGeneral(CryptoJS.DES, dataHex, keyHex, ivHex);
	    };

	    var decryptGeneral = function(f, dataHex, keyHex, ivHex) {
	        var data = CryptoJS.enc.Hex.parse(dataHex);
	        var key = CryptoJS.enc.Hex.parse(keyHex);
	        var iv = CryptoJS.enc.Hex.parse(ivHex);
	        var encrypted = {};
	        encrypted.key = key;
	        encrypted.iv = iv;
	        encrypted.ciphertext = data;
	        var decrypted = f.decrypt(encrypted, key, { iv: iv });
	        return CryptoJS.enc.Hex.stringify(decrypted);
	    };

	    // shared key decryption ------------------------------------------
	    var encryptAES = function(dataHex, keyHex, ivHex) {
	        return encryptGeneral(CryptoJS.AES, dataHex, keyHex, ivHex);
	    };

	    var encrypt3DES = function(dataHex, keyHex, ivHex) {
	        return encryptGeneral(CryptoJS.TripleDES, dataHex, keyHex, ivHex);
	    };

	    var encryptDES = function(dataHex, keyHex, ivHex) {
	        return encryptGeneral(CryptoJS.DES, dataHex, keyHex, ivHex);
	    };

	    var encryptGeneral = function(f, dataHex, keyHex, ivHex) {
	        var data = CryptoJS.enc.Hex.parse(dataHex);
	        var key = CryptoJS.enc.Hex.parse(keyHex);
	        var iv = CryptoJS.enc.Hex.parse(ivHex);
	        var encryptedHex = f.encrypt(data, key, { iv: iv });
	        var encryptedWA = CryptoJS.enc.Hex.parse(encryptedHex.toString());
	        var encryptedB64 = CryptoJS.enc.Base64.stringify(encryptedWA);
	        return encryptedB64;
	    };

	    // other methods and properties ----------------------------------------
	    var ALGLIST = {
	        'AES-256-CBC':  { 'proc': decryptAES,  'eproc': encryptAES,  keylen: 32, ivlen: 16 },
	        'AES-192-CBC':  { 'proc': decryptAES,  'eproc': encryptAES,  keylen: 24, ivlen: 16 },
	        'AES-128-CBC':  { 'proc': decryptAES,  'eproc': encryptAES,  keylen: 16, ivlen: 16 },
	        'DES-EDE3-CBC': { 'proc': decrypt3DES, 'eproc': encrypt3DES, keylen: 24, ivlen: 8 },
	        'DES-CBC':      { 'proc': decryptDES,  'eproc': encryptDES,  keylen: 8,  ivlen: 8 }
	    };

	    var getFuncByName = function(algName) {
	        return ALGLIST[algName]['proc'];
	    };

	    var _generateIvSaltHex = function(numBytes) {
	        var wa = CryptoJS.lib.WordArray.random(numBytes);
	        var hex = CryptoJS.enc.Hex.stringify(wa);
	        return hex;
	    };

	    var _parsePKCS5PEM = function(sPKCS5PEM) {
	        var info = {};
	        var matchResult1 = sPKCS5PEM.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));
	        if (matchResult1) {
	            info.cipher = matchResult1[1];
	            info.ivsalt = matchResult1[2];
	        }
	        var matchResult2 = sPKCS5PEM.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));
	        if (matchResult2) {
	            info.type = matchResult2[1];
	        }
	        var i1 = -1;
	        var lenNEWLINE = 0;
	        if (sPKCS5PEM.indexOf("\r\n\r\n") != -1) {
	            i1 = sPKCS5PEM.indexOf("\r\n\r\n");
	            lenNEWLINE = 2;
	        }
	        if (sPKCS5PEM.indexOf("\n\n") != -1) {
	            i1 = sPKCS5PEM.indexOf("\n\n");
	            lenNEWLINE = 1;
	        }
	        var i2 = sPKCS5PEM.indexOf("-----END");
	        if (i1 != -1 && i2 != -1) {
	            var s = sPKCS5PEM.substring(i1 + lenNEWLINE * 2, i2 - lenNEWLINE);
	            s = s.replace(/\s+/g, '');
	            info.data = s;
	        }
	        return info;
	    };

	    var _getKeyAndUnusedIvByPasscodeAndIvsalt = function(algName, passcode, ivsaltHex) {
	        //alert("ivsaltHex(2) = " + ivsaltHex);
	        var saltHex = ivsaltHex.substring(0, 16);
	        //alert("salt = " + saltHex);
	        
	        var salt = CryptoJS.enc.Hex.parse(saltHex);
	        var data = CryptoJS.enc.Utf8.parse(passcode);
	        //alert("salt = " + salt);
	        //alert("data = " + data);

	        var nRequiredBytes = ALGLIST[algName]['keylen'] + ALGLIST[algName]['ivlen'];
	        var hHexValueJoined = '';
	        var hLastValue = null;
	        //alert("nRequiredBytes = " + nRequiredBytes);
	        for (;;) {
	            var h = CryptoJS.algo.MD5.create();
	            if (hLastValue != null) {
	                h.update(hLastValue);
	            }
	            h.update(data);
	            h.update(salt);
	            hLastValue = h.finalize();
	            hHexValueJoined = hHexValueJoined + CryptoJS.enc.Hex.stringify(hLastValue);
	            //alert("joined = " + hHexValueJoined);
	            if (hHexValueJoined.length >= nRequiredBytes * 2) {
	                break;
	            }
	        }
	        var result = {};
	        result.keyhex = hHexValueJoined.substr(0, ALGLIST[algName]['keylen'] * 2);
	        result.ivhex = hHexValueJoined.substr(ALGLIST[algName]['keylen'] * 2, ALGLIST[algName]['ivlen'] * 2);
	        return result;
	    };

	    /*
	     * @param {String} privateKeyB64 base64 string of encrypted private key
	     * @param {String} sharedKeyAlgName algorithm name of shared key encryption
	     * @param {String} sharedKeyHex hexadecimal string of shared key to encrypt
	     * @param {String} ivsaltHex hexadecimal string of IV and salt
	     * @param {String} hexadecimal string of decrypted private key
	     */
	    var _decryptKeyB64 = function(privateKeyB64, sharedKeyAlgName, sharedKeyHex, ivsaltHex) {
	        var privateKeyWA = CryptoJS.enc.Base64.parse(privateKeyB64);
	        var privateKeyHex = CryptoJS.enc.Hex.stringify(privateKeyWA);
	        var f = ALGLIST[sharedKeyAlgName]['proc'];
	        var decryptedKeyHex = f(privateKeyHex, sharedKeyHex, ivsaltHex);
	        return decryptedKeyHex;
	    };
	    
	    /*
	     * @param {String} privateKeyHex hexadecimal string of private key
	     * @param {String} sharedKeyAlgName algorithm name of shared key encryption
	     * @param {String} sharedKeyHex hexadecimal string of shared key to encrypt
	     * @param {String} ivsaltHex hexadecimal string of IV and salt
	     * @param {String} base64 string of encrypted private key
	     */
	    var _encryptKeyHex = function(privateKeyHex, sharedKeyAlgName, sharedKeyHex, ivsaltHex) {
	        var f = ALGLIST[sharedKeyAlgName]['eproc'];
	        var encryptedKeyB64 = f(privateKeyHex, sharedKeyHex, ivsaltHex);
	        return encryptedKeyB64;
	    };

	    // *****************************************************************
	    // *** PUBLIC PROPERTIES AND METHODS *******************************
	    // *****************************************************************
	    return {
	        // -- UTILITY METHODS ------------------------------------------------------------
	        /**
	         * decrypt private key by shared key
	         * @name version
	         * @memberOf KEYUTIL
	         * @property {String} version
	         * @description version string of KEYUTIL class
	         */
	        version: "1.0.0",

	        /**
	         * get hexacedimal string of PEM format
	         * @name getHexFromPEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} sPEM PEM formatted string
	         * @param {String} sHead PEM header string without BEGIN/END
	         * @return {String} hexadecimal string data of PEM contents
	         * @since pkcs5pkey 1.0.5
	         */
	        getHexFromPEM: function(sPEM, sHead) {
	            var s = sPEM;
	            if (s.indexOf("-----BEGIN ") == -1) {
	                throw "can't find PEM header: " + sHead;
	            }
	            if (typeof sHead == "string" && sHead != "") {
	                s = s.replace("-----BEGIN " + sHead + "-----", "");
	                s = s.replace("-----END " + sHead + "-----", "");
	            } else {
	                s = s.replace(/-----BEGIN [^-]+-----/, '');
	                s = s.replace(/-----END [^-]+-----/, '');
	            }
	            var sB64 = s.replace(/\s+/g, '');
	            var dataHex = b64tohex(sB64);
	            return dataHex;
	        },

	        /**
	         * decrypt private key by shared key
	         * @name getDecryptedKeyHexByKeyIV
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} encryptedKeyHex hexadecimal string of encrypted private key
	         * @param {String} algName name of symmetric key algorithm (ex. 'DES-EBE3-CBC')
	         * @param {String} sharedKeyHex hexadecimal string of symmetric key
	         * @param {String} ivHex hexadecimal string of initial vector(IV).
	         * @return {String} hexadecimal string of decrypted privated key
	         */
	        getDecryptedKeyHexByKeyIV: function(encryptedKeyHex, algName, sharedKeyHex, ivHex) {
	            var f1 = getFuncByName(algName);
	            return f1(encryptedKeyHex, sharedKeyHex, ivHex);
	        },

	        /**
	         * parse PEM formatted passcode protected PKCS#5 private key
	         * @name parsePKCS5PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} sEncryptedPEM PEM formatted protected passcode protected PKCS#5 private key
	         * @return {Hash} hash of key information
	         * @description
	         * Resulted hash has following attributes.
	         * <ul>
	         * <li>cipher - symmetric key algorithm name (ex. 'DES-EBE3-CBC', 'AES-256-CBC')</li>
	         * <li>ivsalt - IV used for decrypt. Its heading 8 bytes will be used for passcode salt.</li>
	         * <li>type - asymmetric key algorithm name of private key described in PEM header.</li>
	         * <li>data - base64 encoded encrypted private key.</li>
	         * </ul>
	         *
	         */
	        parsePKCS5PEM: function(sPKCS5PEM) {
	            return _parsePKCS5PEM(sPKCS5PEM);
	        },

	        /**
	         * the same function as OpenSSL EVP_BytsToKey to generate shared key and IV
	         * @name getKeyAndUnusedIvByPasscodeAndIvsalt
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} algName name of symmetric key algorithm (ex. 'DES-EBE3-CBC')
	         * @param {String} passcode passcode to decrypt private key (ex. 'password')
	         * @param {String} hexadecimal string of IV. heading 8 bytes will be used for passcode salt
	         * @return {Hash} hash of key and unused IV (ex. {keyhex:2fe3..., ivhex:3fad..})
	         */
	        getKeyAndUnusedIvByPasscodeAndIvsalt: function(algName, passcode, ivsaltHex) {
	            return _getKeyAndUnusedIvByPasscodeAndIvsalt(algName, passcode, ivsaltHex);
	        },

	        decryptKeyB64: function(privateKeyB64, sharedKeyAlgName, sharedKeyHex, ivsaltHex) {
	            return _decryptKeyB64(privateKeyB64, sharedKeyAlgName, sharedKeyHex, ivsaltHex);
	        },

	        /**
	         * decrypt PEM formatted protected PKCS#5 private key with passcode
	         * @name getDecryptedKeyHex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} sEncryptedPEM PEM formatted protected passcode protected PKCS#5 private key
	         * @param {String} passcode passcode to decrypt private key (ex. 'password')
	         * @return {String} hexadecimal string of decrypted RSA priavte key
	         */
	        getDecryptedKeyHex: function(sEncryptedPEM, passcode) {
	            // 1. parse pem
	            var info = _parsePKCS5PEM(sEncryptedPEM);
	            var publicKeyAlgName = info.type;
	            var sharedKeyAlgName = info.cipher;
	            var ivsaltHex = info.ivsalt;
	            var privateKeyB64 = info.data;
	            //alert("ivsaltHex = " + ivsaltHex);

	            // 2. generate shared key
	            var sharedKeyInfo = _getKeyAndUnusedIvByPasscodeAndIvsalt(sharedKeyAlgName, passcode, ivsaltHex);
	            var sharedKeyHex = sharedKeyInfo.keyhex;
	            //alert("sharedKeyHex = " + sharedKeyHex);

	            // 3. decrypt private key
	            var decryptedKey = _decryptKeyB64(privateKeyB64, sharedKeyAlgName, sharedKeyHex, ivsaltHex);
	            return decryptedKey;
	        },

	        /**
	         * (DEPRECATED) read PEM formatted encrypted PKCS#5 private key and returns RSAKey object
	         * @name getRSAKeyFromEncryptedPKCS5PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} sEncryptedP5PEM PEM formatted encrypted PKCS#5 private key
	         * @param {String} passcode passcode to decrypt private key
	         * @return {RSAKey} loaded RSAKey object of RSA private key
	         * @since pkcs5pkey 1.0.2
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getKey#}.
	         */
	        getRSAKeyFromEncryptedPKCS5PEM: function(sEncryptedP5PEM, passcode) {
	            var hPKey = this.getDecryptedKeyHex(sEncryptedP5PEM, passcode);
	            var rsaKey = new RSAKey();
	            rsaKey.readPrivateKeyFromASN1HexString(hPKey);
	            return rsaKey;
	        },

	        /*
	         * get PEM formatted encrypted PKCS#5 private key from hexadecimal string of plain private key
	         * @name getEncryptedPKCS5PEMFromPrvKeyHex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pemHeadAlg algorithm name in the pem header (i.e. RSA,EC or DSA)
	         * @param {String} hPrvKey hexadecimal string of plain private key
	         * @param {String} passcode pass code to protect private key (ex. password)
	         * @param {String} sharedKeyAlgName algorithm name to protect private key (ex. AES-256-CBC)
	         * @param {String} ivsaltHex hexadecimal string of IV and salt
	         * @return {String} string of PEM formatted encrypted PKCS#5 private key
	         * @since pkcs5pkey 1.0.2
	         * @description
	         * <br/>
	         * generate PEM formatted encrypted PKCS#5 private key by hexadecimal string encoded
	         * ASN.1 object of plain RSA private key.
	         * Following arguments can be omitted.
	         * <ul>
	         * <li>alg - AES-256-CBC will be used if omitted.</li>
	         * <li>ivsaltHex - automatically generate IV and salt which length depends on algorithm</li>
	         * </ul>
	         * NOTE1: DES-CBC, DES-EDE3-CBC, AES-{128,192.256}-CBC algorithm are supported.
	         * @example
	         * var pem = 
	         *   KEYUTIL.getEncryptedPKCS5PEMFromPrvKeyHex(plainKeyHex, "password");
	         * var pem2 = 
	         *   KEYUTIL.getEncryptedPKCS5PEMFromPrvKeyHex(plainKeyHex, "password", "AES-128-CBC");
	         * var pem3 = 
	         *   KEYUTIL.getEncryptedPKCS5PEMFromPrvKeyHex(plainKeyHex, "password", "AES-128-CBC", "1f3d02...");
	         */
	        getEncryptedPKCS5PEMFromPrvKeyHex: function(pemHeadAlg, hPrvKey, passcode, sharedKeyAlgName, ivsaltHex) {
	            var sPEM = "";

	            // 1. set sharedKeyAlgName if undefined (default AES-256-CBC)
	            if (typeof sharedKeyAlgName == "undefined" || sharedKeyAlgName == null) {
	                sharedKeyAlgName = "AES-256-CBC";
	            }
	            if (typeof ALGLIST[sharedKeyAlgName] == "undefined")
	                throw "KEYUTIL unsupported algorithm: " + sharedKeyAlgName;

	            // 2. set ivsaltHex if undefined
	            if (typeof ivsaltHex == "undefined" || ivsaltHex == null) {
	                var ivlen = ALGLIST[sharedKeyAlgName]['ivlen'];
	                var randIV = _generateIvSaltHex(ivlen);
	                ivsaltHex = randIV.toUpperCase();
	            }

	            // 3. get shared key
	            //alert("ivsalthex=" + ivsaltHex);
	            var sharedKeyInfo = _getKeyAndUnusedIvByPasscodeAndIvsalt(sharedKeyAlgName, passcode, ivsaltHex);
	            var sharedKeyHex = sharedKeyInfo.keyhex;
	            // alert("sharedKeyHex = " + sharedKeyHex);

	            // 3. get encrypted Key in Base64
	            var encryptedKeyB64 = _encryptKeyHex(hPrvKey, sharedKeyAlgName, sharedKeyHex, ivsaltHex);

	            var pemBody = encryptedKeyB64.replace(/(.{64})/g, "$1\r\n");
	            var sPEM = "-----BEGIN " + pemHeadAlg + " PRIVATE KEY-----\r\n";
	            sPEM += "Proc-Type: 4,ENCRYPTED\r\n";
	            sPEM += "DEK-Info: " + sharedKeyAlgName + "," + ivsaltHex + "\r\n";
	            sPEM += "\r\n";
	            sPEM += pemBody;
	            sPEM += "\r\n-----END " + pemHeadAlg + " PRIVATE KEY-----\r\n";

	            return sPEM;
	        },

	        /**
	         * (DEPRECATED) get PEM formatted encrypted PKCS#5 private key from RSAKey object of private key
	         * @name getEncryptedPKCS5PEMFromRSAKey
	         * @memberOf KEYUTIL
	         * @function
	         * @param {RSAKey} pKey RSAKey object of private key
	         * @param {String} passcode pass code to protect private key (ex. password)
	         * @param {String} alg algorithm name to protect private key (default AES-256-CBC)
	         * @param {String} ivsaltHex hexadecimal string of IV and salt (default generated random IV)
	         * @return {String} string of PEM formatted encrypted PKCS#5 private key
	         * @since pkcs5pkey 1.0.2
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getPEM#}.
	         * @description
	         * <br/>
	         * generate PEM formatted encrypted PKCS#5 private key by
	         * {@link RSAKey} object of RSA private key and passcode.
	         * Following argument can be omitted.
	         * <ul>
	         * <li>alg - AES-256-CBC will be used if omitted.</li>
	         * <li>ivsaltHex - automatically generate IV and salt which length depends on algorithm</li>
	         * </ul>
	         * @example
	         * var pkey = new RSAKey();
	         * pkey.generate(1024, '10001'); // generate 1024bit RSA private key with public exponent 'x010001'
	         * var pem = KEYUTIL.getEncryptedPKCS5PEMFromRSAKey(pkey, "password");
	         */
	        getEncryptedPKCS5PEMFromRSAKey: function(pKey, passcode, alg, ivsaltHex) {
	            var version = new KJUR.asn1.DERInteger({'int': 0});
	            var n = new KJUR.asn1.DERInteger({'bigint': pKey.n});
	            var e = new KJUR.asn1.DERInteger({'int': pKey.e});
	            var d = new KJUR.asn1.DERInteger({'bigint': pKey.d});
	            var p = new KJUR.asn1.DERInteger({'bigint': pKey.p});
	            var q = new KJUR.asn1.DERInteger({'bigint': pKey.q});
	            var dmp1 = new KJUR.asn1.DERInteger({'bigint': pKey.dmp1});
	            var dmq1 = new KJUR.asn1.DERInteger({'bigint': pKey.dmq1});
	            var coeff = new KJUR.asn1.DERInteger({'bigint': pKey.coeff});
	            var seq = new KJUR.asn1.DERSequence({'array': [version, n, e, d, p, q, dmp1, dmq1, coeff]});
	            var hex = seq.getEncodedHex();
	            return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", hex, passcode, alg, ivsaltHex);
	        },

	        /**
	         * generate RSAKey and PEM formatted encrypted PKCS#5 private key
	         * @name newEncryptedPKCS5PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} passcode pass code to protect private key (ex. password)
	         * @param {Integer} keyLen key bit length of RSA key to be generated. (default 1024)
	         * @param {String} hPublicExponent hexadecimal string of public exponent (default 10001)
	         * @param {String} alg shared key algorithm to encrypt private key (default AES-258-CBC)
	         * @return {String} string of PEM formatted encrypted PKCS#5 private key
	         * @since pkcs5pkey 1.0.2
	         * @example
	         * var pem1 = KEYUTIL.newEncryptedPKCS5PEM("password");           // RSA1024bit/10001/AES-256-CBC
	         * var pem2 = KEYUTIL.newEncryptedPKCS5PEM("password", 512);      // RSA 512bit/10001/AES-256-CBC
	         * var pem3 = KEYUTIL.newEncryptedPKCS5PEM("password", 512, '3'); // RSA 512bit/    3/AES-256-CBC
	         */
	        newEncryptedPKCS5PEM: function(passcode, keyLen, hPublicExponent, alg) {
	            if (typeof keyLen == "undefined" || keyLen == null) {
	                keyLen = 1024;
	            }
	            if (typeof hPublicExponent == "undefined" || hPublicExponent == null) {
	                hPublicExponent = '10001';
	            }
	            var pKey = new RSAKey();
	            pKey.generate(keyLen, hPublicExponent);
	            var pem = null;
	            if (typeof alg == "undefined" || alg == null) {
	                pem = this.getEncryptedPKCS5PEMFromRSAKey(pKey, passcode);
	            } else {
	                pem = this.getEncryptedPKCS5PEMFromRSAKey(pKey, passcode, alg);
	            }
	            return pem;
	        },

	        // === PKCS8 ===============================================================

	        /**
	         * (DEPRECATED) read PEM formatted unencrypted PKCS#8 private key and returns RSAKey object
	         * @name getRSAKeyFromPlainPKCS8PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PEM PEM formatted unencrypted PKCS#8 private key
	         * @return {RSAKey} loaded RSAKey object of RSA private key
	         * @since pkcs5pkey 1.0.1
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getKey#}.
	         */
	        getRSAKeyFromPlainPKCS8PEM: function(pkcs8PEM) {
	            if (pkcs8PEM.match(/ENCRYPTED/))
	                throw "pem shall be not ENCRYPTED";
	            var prvKeyHex = this.getHexFromPEM(pkcs8PEM, "PRIVATE KEY");
	            var rsaKey = this.getRSAKeyFromPlainPKCS8Hex(prvKeyHex);
	            return rsaKey;
	        },

	        /**
	         * (DEPRECATED) provide hexadecimal string of unencrypted PKCS#8 private key and returns RSAKey object
	         * @name getRSAKeyFromPlainPKCS8Hex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} prvKeyHex hexadecimal string of unencrypted PKCS#8 private key
	         * @return {RSAKey} loaded RSAKey object of RSA private key
	         * @since pkcs5pkey 1.0.3
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getKey#}.
	         */
	        getRSAKeyFromPlainPKCS8Hex: function(prvKeyHex) {
	            var a1 = ASN1HEX.getPosArrayOfChildren_AtObj(prvKeyHex, 0);
	            if (a1.length != 3)
	                throw "outer DERSequence shall have 3 elements: " + a1.length;
	            var algIdTLV =ASN1HEX.getHexOfTLV_AtObj(prvKeyHex, a1[1]);
	            if (algIdTLV != "300d06092a864886f70d0101010500") // AlgId rsaEncryption
	                throw "PKCS8 AlgorithmIdentifier is not rsaEnc: " + algIdTLV;
	            var algIdTLV = ASN1HEX.getHexOfTLV_AtObj(prvKeyHex, a1[1]);
	            var octetStr = ASN1HEX.getHexOfTLV_AtObj(prvKeyHex, a1[2]);
	            var p5KeyHex = ASN1HEX.getHexOfV_AtObj(octetStr, 0);
	            //alert(p5KeyHex);
	            var rsaKey = new RSAKey();
	            rsaKey.readPrivateKeyFromASN1HexString(p5KeyHex);
	            return rsaKey;
	        },

	        /**
	         * generate PBKDF2 key hexstring with specified passcode and information
	         * @name parseHexOfEncryptedPKCS8
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} passcode passcode to decrypto private key
	         * @return {Array} info associative array of PKCS#8 parameters
	         * @since pkcs5pkey 1.0.3
	         * @description
	         * The associative array which is returned by this method has following properties:
	         * <ul>
	         * <li>info.pbkdf2Salt - hexadecimal string of PBKDF2 salt</li>
	         * <li>info.pkbdf2Iter - iteration count</li>
	         * <li>info.ciphertext - hexadecimal string of encrypted private key</li>
	         * <li>info.encryptionSchemeAlg - encryption algorithm name (currently TripleDES only)</li>
	         * <li>info.encryptionSchemeIV - initial vector for encryption algorithm</li>
	         * </ul>
	         * Currently, this method only supports PKCS#5v2.0 with PBES2/PBDKF2 of HmacSHA1 and TripleDES.
	         * <ul>
	         * <li>keyDerivationFunc = pkcs5PBKDF2 with HmacSHA1</li>
	         * <li>encryptionScheme = des-EDE3-CBC(i.e. TripleDES</li>
	         * </ul>
	         * @example
	         * // to convert plain PKCS#5 private key to encrypted PKCS#8 private
	         * // key with PBKDF2 with TripleDES
	         * % openssl pkcs8 -in plain_p5.pem -topk8 -v2 -des3 -out encrypted_p8.pem
	         */
	        parseHexOfEncryptedPKCS8: function(sHEX) {
	            var info = {};
	            
	            var a0 = ASN1HEX.getPosArrayOfChildren_AtObj(sHEX, 0);
	            if (a0.length != 2)
	                throw "malformed format: SEQUENCE(0).items != 2: " + a0.length;

	            // 1. ciphertext
	            info.ciphertext = ASN1HEX.getHexOfV_AtObj(sHEX, a0[1]);

	            // 2. pkcs5PBES2
	            var a0_0 = ASN1HEX.getPosArrayOfChildren_AtObj(sHEX, a0[0]); 
	            if (a0_0.length != 2)
	                throw "malformed format: SEQUENCE(0.0).items != 2: " + a0_0.length;

	            // 2.1 check if pkcs5PBES2(1 2 840 113549 1 5 13)
	            if (ASN1HEX.getHexOfV_AtObj(sHEX, a0_0[0]) != "2a864886f70d01050d")
	                throw "this only supports pkcs5PBES2";

	            // 2.2 pkcs5PBES2 param
	            var a0_0_1 = ASN1HEX.getPosArrayOfChildren_AtObj(sHEX, a0_0[1]); 
	            if (a0_0.length != 2)
	                throw "malformed format: SEQUENCE(0.0.1).items != 2: " + a0_0_1.length;

	            // 2.2.1 encryptionScheme
	            var a0_0_1_1 = ASN1HEX.getPosArrayOfChildren_AtObj(sHEX, a0_0_1[1]); 
	            if (a0_0_1_1.length != 2)
	                throw "malformed format: SEQUENCE(0.0.1.1).items != 2: " + a0_0_1_1.length;
	            if (ASN1HEX.getHexOfV_AtObj(sHEX, a0_0_1_1[0]) != "2a864886f70d0307")
	                throw "this only supports TripleDES";
	            info.encryptionSchemeAlg = "TripleDES";

	            // 2.2.1.1 IV of encryptionScheme
	            info.encryptionSchemeIV = ASN1HEX.getHexOfV_AtObj(sHEX, a0_0_1_1[1]);

	            // 2.2.2 keyDerivationFunc
	            var a0_0_1_0 = ASN1HEX.getPosArrayOfChildren_AtObj(sHEX, a0_0_1[0]); 
	            if (a0_0_1_0.length != 2)
	                throw "malformed format: SEQUENCE(0.0.1.0).items != 2: " + a0_0_1_0.length;
	            if (ASN1HEX.getHexOfV_AtObj(sHEX, a0_0_1_0[0]) != "2a864886f70d01050c")
	                throw "this only supports pkcs5PBKDF2";

	            // 2.2.2.1 pkcs5PBKDF2 param
	            var a0_0_1_0_1 = ASN1HEX.getPosArrayOfChildren_AtObj(sHEX, a0_0_1_0[1]); 
	            if (a0_0_1_0_1.length < 2)
	                throw "malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + a0_0_1_0_1.length;

	            // 2.2.2.1.1 PBKDF2 salt
	            info.pbkdf2Salt = ASN1HEX.getHexOfV_AtObj(sHEX, a0_0_1_0_1[0]);

	            // 2.2.2.1.2 PBKDF2 iter
	            var iterNumHex = ASN1HEX.getHexOfV_AtObj(sHEX, a0_0_1_0_1[1]);
	            try {
	                info.pbkdf2Iter = parseInt(iterNumHex, 16);
	            } catch(ex) {
	                throw "malformed format pbkdf2Iter: " + iterNumHex;
	            }

	            return info;
	        },

	        /**
	         * generate PBKDF2 key hexstring with specified passcode and information
	         * @name getPBKDF2KeyHexFromParam
	         * @memberOf KEYUTIL
	         * @function
	         * @param {Array} info result of {@link parseHexOfEncryptedPKCS8} which has preference of PKCS#8 file
	         * @param {String} passcode passcode to decrypto private key
	         * @return {String} hexadecimal string of PBKDF2 key
	         * @since pkcs5pkey 1.0.3
	         * @description
	         * As for info, this uses following properties:
	         * <ul>
	         * <li>info.pbkdf2Salt - hexadecimal string of PBKDF2 salt</li>
	         * <li>info.pkbdf2Iter - iteration count</li>
	         * </ul>
	         * Currently, this method only supports PKCS#5v2.0 with PBES2/PBDKF2 of HmacSHA1 and TripleDES.
	         * <ul>
	         * <li>keyDerivationFunc = pkcs5PBKDF2 with HmacSHA1</li>
	         * <li>encryptionScheme = des-EDE3-CBC(i.e. TripleDES</li>
	         * </ul>
	         * @example
	         * // to convert plain PKCS#5 private key to encrypted PKCS#8 private
	         * // key with PBKDF2 with TripleDES
	         * % openssl pkcs8 -in plain_p5.pem -topk8 -v2 -des3 -out encrypted_p8.pem
	         */
	        getPBKDF2KeyHexFromParam: function(info, passcode) {
	            var pbkdf2SaltWS = CryptoJS.enc.Hex.parse(info.pbkdf2Salt);
	            var pbkdf2Iter = info.pbkdf2Iter;
	            var pbkdf2KeyWS = CryptoJS.PBKDF2(passcode, 
	                                              pbkdf2SaltWS, 
	                                              { keySize: 192/32, iterations: pbkdf2Iter });
	            var pbkdf2KeyHex = CryptoJS.enc.Hex.stringify(pbkdf2KeyWS);
	            return pbkdf2KeyHex;
	        },

	        /**
	         * read PEM formatted encrypted PKCS#8 private key and returns hexadecimal string of plain PKCS#8 private key
	         * @name getPlainPKCS8HexFromEncryptedPKCS8PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PEM PEM formatted encrypted PKCS#8 private key
	         * @param {String} passcode passcode to decrypto private key
	         * @return {String} hexadecimal string of plain PKCS#8 private key
	         * @since pkcs5pkey 1.0.3
	         * @description
	         * Currently, this method only supports PKCS#5v2.0 with PBES2/PBDKF2 of HmacSHA1 and TripleDES.
	         * <ul>
	         * <li>keyDerivationFunc = pkcs5PBKDF2 with HmacSHA1</li>
	         * <li>encryptionScheme = des-EDE3-CBC(i.e. TripleDES</li>
	         * </ul>
	         * @example
	         * // to convert plain PKCS#5 private key to encrypted PKCS#8 private
	         * // key with PBKDF2 with TripleDES
	         * % openssl pkcs8 -in plain_p5.pem -topk8 -v2 -des3 -out encrypted_p8.pem
	         */
	        getPlainPKCS8HexFromEncryptedPKCS8PEM: function(pkcs8PEM, passcode) {
	            // 1. derHex - PKCS#8 private key encrypted by PBKDF2
	            var derHex = this.getHexFromPEM(pkcs8PEM, "ENCRYPTED PRIVATE KEY");
	            // 2. info - PKCS#5 PBES info
	            var info = this.parseHexOfEncryptedPKCS8(derHex);
	            // 3. hKey - PBKDF2 key
	            var pbkdf2KeyHex = KEYUTIL.getPBKDF2KeyHexFromParam(info, passcode);
	            // 4. decrypt ciphertext by PBKDF2 key
	            var encrypted = {};
	            encrypted.ciphertext = CryptoJS.enc.Hex.parse(info.ciphertext);
	            var pbkdf2KeyWS = CryptoJS.enc.Hex.parse(pbkdf2KeyHex);
	            var des3IVWS = CryptoJS.enc.Hex.parse(info.encryptionSchemeIV);
	            var decWS = CryptoJS.TripleDES.decrypt(encrypted, pbkdf2KeyWS, { iv: des3IVWS });
	            var decHex = CryptoJS.enc.Hex.stringify(decWS);
	            return decHex;
	        },

	        /**
	         * (DEPRECATED) read PEM formatted encrypted PKCS#8 private key and returns RSAKey object
	         * @name getRSAKeyFromEncryptedPKCS8PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PEM PEM formatted encrypted PKCS#8 private key
	         * @param {String} passcode passcode to decrypto private key
	         * @return {RSAKey} loaded RSAKey object of RSA private key
	         * @since pkcs5pkey 1.0.3
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getKey#}.
	         * @description
	         * Currently, this method only supports PKCS#5v2.0 with PBES2/PBDKF2 of HmacSHA1 and TripleDES.
	         * <ul>
	         * <li>keyDerivationFunc = pkcs5PBKDF2 with HmacSHA1</li>
	         * <li>encryptionScheme = des-EDE3-CBC(i.e. TripleDES</li>
	         * </ul>
	         * @example
	         * // to convert plain PKCS#5 private key to encrypted PKCS#8 private
	         * // key with PBKDF2 with TripleDES
	         * % openssl pkcs8 -in plain_p5.pem -topk8 -v2 -des3 -out encrypted_p8.pem
	         */
	        getRSAKeyFromEncryptedPKCS8PEM: function(pkcs8PEM, passcode) {
	            var prvKeyHex = this.getPlainPKCS8HexFromEncryptedPKCS8PEM(pkcs8PEM, passcode);
	            var rsaKey = this.getRSAKeyFromPlainPKCS8Hex(prvKeyHex);
	            return rsaKey;
	        },

	        /**
	         * get RSAKey/ECDSA private key object from encrypted PEM PKCS#8 private key
	         * @name getKeyFromEncryptedPKCS8PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PEM string of PEM formatted PKCS#8 private key
	         * @param {String} passcode passcode string to decrypt key
	         * @return {Object} RSAKey or KJUR.crypto.ECDSA private key object
	         * @since pkcs5pkey 1.0.5
	         */
	        getKeyFromEncryptedPKCS8PEM: function(pkcs8PEM, passcode) {
	            var prvKeyHex = this.getPlainPKCS8HexFromEncryptedPKCS8PEM(pkcs8PEM, passcode);
	            var key = this.getKeyFromPlainPrivatePKCS8Hex(prvKeyHex);
	            return key;
	        },

	        /**
	         * parse hexadecimal string of plain PKCS#8 private key
	         * @name parsePlainPrivatePKCS8Hex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PrvHex hexadecimal string of PKCS#8 plain private key
	         * @return {Array} associative array of parsed key
	         * @since pkcs5pkey 1.0.5
	         * @description
	         * Resulted associative array has following properties:
	         * <ul>
	         * <li>algoid - hexadecimal string of OID of asymmetric key algorithm</li>
	         * <li>algparam - hexadecimal string of OID of ECC curve name or null</li>
	         * <li>keyidx - string starting index of key in pkcs8PrvHex</li>
	         * </ul>
	         */
	        parsePlainPrivatePKCS8Hex: function(pkcs8PrvHex) {
	            var result = {};
	            result.algparam = null;

	            // 1. sequence
	            if (pkcs8PrvHex.substr(0, 2) != "30")
	                throw "malformed plain PKCS8 private key(code:001)"; // not sequence

	            var a1 = ASN1HEX.getPosArrayOfChildren_AtObj(pkcs8PrvHex, 0);
	            if (a1.length != 3)
	                throw "malformed plain PKCS8 private key(code:002)";

	            // 2. AlgID
	            if (pkcs8PrvHex.substr(a1[1], 2) != "30")
	                throw "malformed PKCS8 private key(code:003)"; // AlgId not sequence

	            var a2 = ASN1HEX.getPosArrayOfChildren_AtObj(pkcs8PrvHex, a1[1]);
	            if (a2.length != 2)
	                throw "malformed PKCS8 private key(code:004)"; // AlgId not have two elements

	            // 2.1. AlgID OID
	            if (pkcs8PrvHex.substr(a2[0], 2) != "06")
	                throw "malformed PKCS8 private key(code:005)"; // AlgId.oid is not OID

	            result.algoid = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a2[0]);

	            // 2.2. AlgID param
	            if (pkcs8PrvHex.substr(a2[1], 2) == "06") {
	                result.algparam = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a2[1]);
	            }

	            // 3. Key index
	            if (pkcs8PrvHex.substr(a1[2], 2) != "04")
	                throw "malformed PKCS8 private key(code:006)"; // not octet string

	            result.keyidx = ASN1HEX.getStartPosOfV_AtObj(pkcs8PrvHex, a1[2]);

	            return result;
	        },

	        /**
	         * get RSAKey/ECDSA private key object from PEM plain PEM PKCS#8 private key
	         * @name getKeyFromPlainPrivatePKCS8PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PEM string of plain PEM formatted PKCS#8 private key
	         * @return {Object} RSAKey or KJUR.crypto.ECDSA private key object
	         * @since pkcs5pkey 1.0.5
	         */
	        getKeyFromPlainPrivatePKCS8PEM: function(prvKeyPEM) {
	            var prvKeyHex = this.getHexFromPEM(prvKeyPEM, "PRIVATE KEY");
	            var key = this.getKeyFromPlainPrivatePKCS8Hex(prvKeyHex);
	            return key;
	        },

	        /**
	         * get RSAKey/ECDSA private key object from HEX plain PEM PKCS#8 private key
	         * @name getKeyFromPlainPrivatePKCS8Hex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} prvKeyHex hexadecimal string of plain PKCS#8 private key
	         * @return {Object} RSAKey or KJUR.crypto.ECDSA private key object
	         * @since pkcs5pkey 1.0.5
	         */
	        getKeyFromPlainPrivatePKCS8Hex: function(prvKeyHex) {
	            var p8 = this.parsePlainPrivatePKCS8Hex(prvKeyHex);
	            
	            if (p8.algoid == "2a864886f70d010101") { // RSA
	                this.parsePrivateRawRSAKeyHexAtObj(prvKeyHex, p8);
	                var k = p8.key;
	                var key = new RSAKey();
	                key.setPrivateEx(k.n, k.e, k.d, k.p, k.q, k.dp, k.dq, k.co);
	                return key;
	            } else if (p8.algoid == "2a8648ce3d0201") { // ECC
	                this.parsePrivateRawECKeyHexAtObj(prvKeyHex, p8);
	                if (KJUR.crypto.OID.oidhex2name[p8.algparam] === undefined)
	                    throw "KJUR.crypto.OID.oidhex2name undefined: " + p8.algparam;
	                var curveName = KJUR.crypto.OID.oidhex2name[p8.algparam];
	                var key = new KJUR.crypto.ECDSA({'curve': curveName});
	                key.setPublicKeyHex(p8.pubkey);
	                key.setPrivateKeyHex(p8.key);
	                key.isPublic = false;
	                return key;
	            } else if (p8.algoid == "2a8648ce380401") { // DSA
	                var hP = ASN1HEX.getVbyList(prvKeyHex, 0, [1,1,0], "02");
	                var hQ = ASN1HEX.getVbyList(prvKeyHex, 0, [1,1,1], "02");
	                var hG = ASN1HEX.getVbyList(prvKeyHex, 0, [1,1,2], "02");
	                var hX = ASN1HEX.getVbyList(prvKeyHex, 0, [2,0], "02");
	                var biP = new BigInteger(hP, 16);
	                var biQ = new BigInteger(hQ, 16);
	                var biG = new BigInteger(hG, 16);
	                var biX = new BigInteger(hX, 16);
	                var key = new KJUR.crypto.DSA();
	                key.setPrivate(biP, biQ, biG, null, biX);
	                return key;
	            } else {
	                throw "unsupported private key algorithm";
	            }
	        },

	        // === PKCS8 RSA Public Key ================================================
	        /**
	         * (DEPRECATED) read PEM formatted PKCS#8 public key and returns RSAKey object
	         * @name getRSAKeyFromPublicPKCS8PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PubPEM PEM formatted PKCS#8 public key
	         * @return {RSAKey} loaded RSAKey object of RSA public key
	         * @since pkcs5pkey 1.0.4
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getKey#}.
	         */
	        getRSAKeyFromPublicPKCS8PEM: function(pkcs8PubPEM) {
	            var pubKeyHex = this.getHexFromPEM(pkcs8PubPEM, "PUBLIC KEY");
	            var rsaKey = this.getRSAKeyFromPublicPKCS8Hex(pubKeyHex);
	            return rsaKey;
	        },

	        /**
	         * (DEPRECATED) get RSAKey/ECDSA public key object from PEM PKCS#8 public key
	         * @name getKeyFromPublicPKCS8PEM
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcsPub8PEM string of PEM formatted PKCS#8 public key
	         * @return {Object} RSAKey or KJUR.crypto.ECDSA private key object
	         * @since pkcs5pkey 1.0.5
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getKey#}.
	         */
	        getKeyFromPublicPKCS8PEM: function(pkcs8PubPEM) {
	            var pubKeyHex = this.getHexFromPEM(pkcs8PubPEM, "PUBLIC KEY");
	            var key = this.getKeyFromPublicPKCS8Hex(pubKeyHex);
	            return key;
	        },

	        /**
	         * (DEPRECATED) get RSAKey/DSA/ECDSA public key object from hexadecimal string of PKCS#8 public key
	         * @name getKeyFromPublicPKCS8Hex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcsPub8Hex hexadecimal string of PKCS#8 public key
	         * @return {Object} RSAKey or KJUR.crypto.{ECDSA,DSA} private key object
	         * @since pkcs5pkey 1.0.5
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getKey#}.
	         */
	        getKeyFromPublicPKCS8Hex: function(pkcs8PubHex) {
	            var p8 = this.parsePublicPKCS8Hex(pkcs8PubHex);
	            
	            if (p8.algoid == "2a864886f70d010101") { // RSA
	                var aRSA = this.parsePublicRawRSAKeyHex(p8.key);
	                var key = new RSAKey();
	                key.setPublic(aRSA.n, aRSA.e);
	                return key;
	            } else if (p8.algoid == "2a8648ce3d0201") { // ECC
	                if (KJUR.crypto.OID.oidhex2name[p8.algparam] === undefined)
	                    throw "KJUR.crypto.OID.oidhex2name undefined: " + p8.algparam;
	                var curveName = KJUR.crypto.OID.oidhex2name[p8.algparam];
	                var key = new KJUR.crypto.ECDSA({'curve': curveName, 'pub': p8.key});
	                return key;
	            } else if (p8.algoid == "2a8648ce380401") { // DSA 1.2.840.10040.4.1
	                var param = p8.algparam;
	                var y = ASN1HEX.getHexOfV_AtObj(p8.key, 0);
	                var key = new KJUR.crypto.DSA();
	                key.setPublic(new BigInteger(param.p, 16),
	                              new BigInteger(param.q, 16),
	                              new BigInteger(param.g, 16),
	                              new BigInteger(y, 16));
	                return key;
	            } else {
	                throw "unsupported public key algorithm";
	            }
	        },

	        /**
	         * parse hexadecimal string of plain PKCS#8 private key
	         * @name parsePublicRawRSAKeyHex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pubRawRSAHex hexadecimal string of ASN.1 encoded PKCS#8 public key
	         * @return {Array} associative array of parsed key
	         * @since pkcs5pkey 1.0.5
	         * @description
	         * Resulted associative array has following properties:
	         * <ul>
	         * <li>n - hexadecimal string of public key
	         * <li>e - hexadecimal string of public exponent
	         * </ul>
	         */
	        parsePublicRawRSAKeyHex: function(pubRawRSAHex) {
	            var result = {};
	            
	            // 1. Sequence
	            if (pubRawRSAHex.substr(0, 2) != "30")
	                throw "malformed RSA key(code:001)"; // not sequence
	            
	            var a1 = ASN1HEX.getPosArrayOfChildren_AtObj(pubRawRSAHex, 0);
	            if (a1.length != 2)
	                throw "malformed RSA key(code:002)"; // not 2 items in seq

	            // 2. public key "N"
	            if (pubRawRSAHex.substr(a1[0], 2) != "02")
	                throw "malformed RSA key(code:003)"; // 1st item is not integer

	            result.n = ASN1HEX.getHexOfV_AtObj(pubRawRSAHex, a1[0]);

	            // 3. public key "E"
	            if (pubRawRSAHex.substr(a1[1], 2) != "02")
	                throw "malformed RSA key(code:004)"; // 2nd item is not integer

	            result.e = ASN1HEX.getHexOfV_AtObj(pubRawRSAHex, a1[1]);

	            return result;
	        },

	        /**
	         * parse hexadecimal string of RSA private key
	         * @name parsePrivateRawRSAKeyHexAtObj
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PrvHex hexadecimal string of PKCS#8 private key concluding RSA private key
	         * @return {Array} info associative array to add parsed RSA private key information
	         * @since pkcs5pkey 1.0.5
	         * @description
	         * Following properties are added to associative array 'info'
	         * <ul>
	         * <li>n - hexadecimal string of public key
	         * <li>e - hexadecimal string of public exponent
	         * <li>d - hexadecimal string of private key
	         * <li>p - hexadecimal string
	         * <li>q - hexadecimal string
	         * <li>dp - hexadecimal string
	         * <li>dq - hexadecimal string
	         * <li>co - hexadecimal string
	         * </ul>
	         */
	        parsePrivateRawRSAKeyHexAtObj: function(pkcs8PrvHex, info) {
	            var keyIdx = info.keyidx;
	            
	            // 1. sequence
	            if (pkcs8PrvHex.substr(keyIdx, 2) != "30")
	                throw "malformed RSA private key(code:001)"; // not sequence

	            var a1 = ASN1HEX.getPosArrayOfChildren_AtObj(pkcs8PrvHex, keyIdx);
	            if (a1.length != 9)
	                throw "malformed RSA private key(code:002)"; // not sequence

	            // 2. RSA key
	            info.key = {};
	            info.key.n = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a1[1]);
	            info.key.e = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a1[2]);
	            info.key.d = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a1[3]);
	            info.key.p = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a1[4]);
	            info.key.q = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a1[5]);
	            info.key.dp = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a1[6]);
	            info.key.dq = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a1[7]);
	            info.key.co = ASN1HEX.getHexOfV_AtObj(pkcs8PrvHex, a1[8]);
	        },

	        /**
	         * parse hexadecimal string of ECC private key
	         * @name parsePrivateRawECKeyHexAtObj
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PrvHex hexadecimal string of PKCS#8 private key concluding EC private key
	         * @return {Array} info associative array to add parsed ECC private key information
	         * @since pkcs5pkey 1.0.5
	         * @description
	         * Following properties are added to associative array 'info'
	         * <ul>
	         * <li>key - hexadecimal string of ECC private key
	         * </ul>
	         */
	        parsePrivateRawECKeyHexAtObj: function(pkcs8PrvHex, info) {
	            var keyIdx = info.keyidx;
	            
	            var key = ASN1HEX.getVbyList(pkcs8PrvHex, keyIdx, [1], "04");
	            var pubkey = ASN1HEX.getVbyList(pkcs8PrvHex, keyIdx, [2,0], "03").substr(2);

	            info.key = key;
	            info.pubkey = pubkey;
	        },

	        /**
	         * parse hexadecimal string of PKCS#8 RSA/EC/DSA public key
	         * @name parsePublicPKCS8Hex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PubHex hexadecimal string of PKCS#8 public key
	         * @return {Hash} hash of key information
	         * @description
	         * Resulted hash has following attributes.
	         * <ul>
	         * <li>algoid - hexadecimal string of OID of asymmetric key algorithm</li>
	         * <li>algparam - hexadecimal string of OID of ECC curve name, parameter SEQUENCE of DSA or null</li>
	         * <li>key - hexadecimal string of public key</li>
	         * </ul>
	         */
	        parsePublicPKCS8Hex: function(pkcs8PubHex) {
	            var result = {};
	            result.algparam = null;

	            // 1. AlgID and Key bit string
	            var a1 = ASN1HEX.getPosArrayOfChildren_AtObj(pkcs8PubHex, 0);
	            if (a1.length != 2)
	                throw "outer DERSequence shall have 2 elements: " + a1.length;

	            // 2. AlgID
	            var idxAlgIdTLV = a1[0];
	            if (pkcs8PubHex.substr(idxAlgIdTLV, 2) != "30")
	                throw "malformed PKCS8 public key(code:001)"; // AlgId not sequence

	            var a2 = ASN1HEX.getPosArrayOfChildren_AtObj(pkcs8PubHex, idxAlgIdTLV);
	            if (a2.length != 2)
	                throw "malformed PKCS8 public key(code:002)"; // AlgId not have two elements

	            // 2.1. AlgID OID
	            if (pkcs8PubHex.substr(a2[0], 2) != "06")
	                throw "malformed PKCS8 public key(code:003)"; // AlgId.oid is not OID

	            result.algoid = ASN1HEX.getHexOfV_AtObj(pkcs8PubHex, a2[0]);

	            // 2.2. AlgID param
	            if (pkcs8PubHex.substr(a2[1], 2) == "06") { // OID for EC
	                result.algparam = ASN1HEX.getHexOfV_AtObj(pkcs8PubHex, a2[1]);
	            } else if (pkcs8PubHex.substr(a2[1], 2) == "30") { // SEQ for DSA
	                result.algparam = {};
	                result.algparam.p = ASN1HEX.getVbyList(pkcs8PubHex, a2[1], [0], "02");
	                result.algparam.q = ASN1HEX.getVbyList(pkcs8PubHex, a2[1], [1], "02");
	                result.algparam.g = ASN1HEX.getVbyList(pkcs8PubHex, a2[1], [2], "02");
	            }

	            // 3. Key
	            if (pkcs8PubHex.substr(a1[1], 2) != "03")
	                throw "malformed PKCS8 public key(code:004)"; // Key is not bit string

	            result.key = ASN1HEX.getHexOfV_AtObj(pkcs8PubHex, a1[1]).substr(2);
	            
	            // 4. return result assoc array
	            return result;
	        },

	        /**
	         * (DEPRECATED) provide hexadecimal string of unencrypted PKCS#8 private key and returns RSAKey object
	         * @name getRSAKeyFromPublicPKCS8Hex
	         * @memberOf KEYUTIL
	         * @function
	         * @param {String} pkcs8PubHex hexadecimal string of unencrypted PKCS#8 public key
	         * @return {RSAKey} loaded RSAKey object of RSA public key
	         * @since pkcs5pkey 1.0.4
	         * @deprecated From jsrsasign 4.2.1 please use {@link KEYUTIL.getKey#}.
	         */
	        getRSAKeyFromPublicPKCS8Hex: function(pkcs8PubHex) {
	            var a1 = ASN1HEX.getPosArrayOfChildren_AtObj(pkcs8PubHex, 0);
	            if (a1.length != 2)
	                throw "outer DERSequence shall have 2 elements: " + a1.length;

	            var algIdTLV =ASN1HEX.getHexOfTLV_AtObj(pkcs8PubHex, a1[0]);
	            if (algIdTLV != "300d06092a864886f70d0101010500") // AlgId rsaEncryption
	                throw "PKCS8 AlgorithmId is not rsaEncryption";
	            
	            if (pkcs8PubHex.substr(a1[1], 2) != "03")
	                throw "PKCS8 Public Key is not BITSTRING encapslated.";

	            var idxPub = ASN1HEX.getStartPosOfV_AtObj(pkcs8PubHex, a1[1]) + 2; // 2 for unused bit
	            
	            if (pkcs8PubHex.substr(idxPub, 2) != "30")
	                throw "PKCS8 Public Key is not SEQUENCE.";

	            var a2 = ASN1HEX.getPosArrayOfChildren_AtObj(pkcs8PubHex, idxPub);
	            if (a2.length != 2)
	                throw "inner DERSequence shall have 2 elements: " + a2.length;

	            if (pkcs8PubHex.substr(a2[0], 2) != "02") 
	                throw "N is not ASN.1 INTEGER";
	            if (pkcs8PubHex.substr(a2[1], 2) != "02") 
	                throw "E is not ASN.1 INTEGER";
	            
	            var hN = ASN1HEX.getHexOfV_AtObj(pkcs8PubHex, a2[0]);
	            var hE = ASN1HEX.getHexOfV_AtObj(pkcs8PubHex, a2[1]);

	            var pubKey = new RSAKey();
	            pubKey.setPublic(hN, hE);
	            
	            return pubKey;
	        },

	        //addAlgorithm: function(functionObject, algName, keyLen, ivLen) {
	        //}
	    };
	}();

	// -- MAJOR PUBLIC METHODS -------------------------------------------------------
	/**
	 * get private or public key object from any arguments
	 * @name getKey
	 * @memberOf KEYUTIL
	 * @function
	 * @static
	 * @param {Object} param parameter to get key object. see description in detail.
	 * @param {String} passcode (OPTION) parameter to get key object. see description in detail.
	 * @param {String} hextype (OPTOIN) parameter to get key object. see description in detail.
	 * @return {Object} {@link RSAKey}, {@link KJUR.crypto.ECDSA} or {@link KJUR.crypto.ECDSA} object
	 * @since keyutil 1.0.0
	 * @description
	 * This method gets private or public key object({@link RSAKey}, {@link KJUR.crypto.DSA} or {@link KJUR.crypto.ECDSA})
	 * for RSA, DSA and ECC.
	 * Arguments for this methods depends on a key format you specify.
	 * Following key representations are supported.
	 * <ul>
	 * <li>ECC private/public key object(as is): param=KJUR.crypto.ECDSA</li>
	 * <li>DSA private/public key object(as is): param=KJUR.crypto.DSA</li>
	 * <li>RSA private/public key object(as is): param=RSAKey </li>
	 * <li>ECC private key parameters: param={d: d, curve: curveName}</li>
	 * <li>RSA private key parameters: param={n: n, e: e, d: d, p: p, q: q, dp: dp, dq: dq, co: co}<br/>
	 * NOTE: Each value shall be hexadecimal string of key spec.</li>
	 * <li>DSA private key parameters: param={p: p, q: q, g: g, y: y, x: x}<br/>
	 * NOTE: Each value shall be hexadecimal string of key spec.</li>
	 * <li>ECC public key parameters: param={xy: xy, curve: curveName}<br/>
	 * NOTE: ECC public key 'xy' shall be concatination of "04", x-bytes-hex and y-bytes-hex.</li>
	 * <li>DSA public key parameters: param={p: p, q: q, g: g, y: y}<br/>
	 * NOTE: Each value shall be hexadecimal string of key spec.</li>
	 * <li>RSA public key parameters: param={n: n, e: e} </li>
	 * <li>X.509v1/v3 PEM certificate (RSA/DSA/ECC): param=pemString</li>
	 * <li>PKCS#8 hexadecimal RSA/ECC public key: param=pemString, null, "pkcs8pub"</li>
	 * <li>PKCS#8 PEM RSA/DSA/ECC public key: param=pemString</li>
	 * <li>PKCS#5 plain hexadecimal RSA private key: param=hexString, null, "pkcs5prv"</li>
	 * <li>PKCS#5 plain PEM DSA/RSA private key: param=pemString</li>
	 * <li>PKCS#8 plain PEM RSA/ECDSA private key: param=pemString</li>
	 * <li>PKCS#5 encrypted PEM RSA/DSA private key: param=pemString, passcode</li>
	 * <li>PKCS#8 encrypted PEM RSA/ECDSA private key: param=pemString, passcode</li>
	 * </ul>
	 * Please note following limitation on encrypted keys:
	 * <ul>
	 * <li>Encrypted PKCS#8 only supports PBKDF2/HmacSHA1/3DES</li>
	 * <li>Encrypted PKCS#5 supports DES-CBC, DES-EDE3-CBC, AES-{128,192.256}-CBC</li>
	 * <li>JWT plain ECC private/public key</li>
	 * <li>JWT plain RSA public key</li>
	 * <li>JWT plain RSA private key with P/Q/DP/DQ/COEFF</li>
	 * <li>JWT plain RSA private key without P/Q/DP/DQ/COEFF (since jsrsasign 5.0.0)</li>
	 * </ul>
	 * NOTE1: <a href="https://tools.ietf.org/html/rfc7517">RFC 7517 JSON Web Key(JWK)</a> support for RSA/ECC private/public key from jsrsasign 4.8.1.<br/>
	 * NOTE2: X509v1 support is added since jsrsasign 5.0.11.
	 * 
	 * <h5>EXAMPLE</h5>
	 * @example
	 * // 1. loading private key from PEM string
	 * keyObj = KEYUTIL.getKey("-----BEGIN RSA PRIVATE KEY...");
	 * keyObj = KEYUTIL.getKey("-----BEGIN RSA PRIVATE KEY..., "passcode");
	 * keyObj = KEYUTIL.getKey("-----BEGIN PRIVATE KEY...");
	 * keyObj = KEYUTIL.getKey("-----BEGIN PRIVATE KEY...", "passcode");
	 * // 2. loading public key from PEM string
	 * keyObj = KEYUTIL.getKey("-----BEGIN PUBLIC KEY...");
	 * keyObj = KEYUTIL.getKey("-----BEGIN X509 CERTIFICATE...");
	 * // 3. loading hexadecimal PKCS#5/PKCS#8 key
	 * keyObj = KEYUTIL.getKey("308205c1...", null, "pkcs8pub");
	 * keyObj = KEYUTIL.getKey("3082048b...", null, "pkcs5prv");
	 * // 4. loading JSON Web Key(JWK)
	 * keyObj = KEYUTIL.getKey({kty: "RSA", n: "0vx7...", e: "AQAB"});
	 * keyObj = KEYUTIL.getKey({kty: "EC", crv: "P-256", 
	 *                          x: "MKBC...", y: "4Etl6...", d: "870Mb..."});
	 * // 5. bare hexadecimal key
	 * keyObj = KEYUTIL.getKey({n: "75ab..", e: "010001"});
	 */
	KEYUTIL.getKey = function(param, passcode, hextype) {
	    // 1. by key RSAKey/KJUR.crypto.ECDSA/KJUR.crypto.DSA object
	    if (typeof RSAKey != 'undefined' && param instanceof RSAKey)
	        return param;
	    if (typeof KJUR.crypto.ECDSA != 'undefined' && param instanceof KJUR.crypto.ECDSA)
	        return param;
	    if (typeof KJUR.crypto.DSA != 'undefined' && param instanceof KJUR.crypto.DSA)
	        return param;

	    // 2. by parameters of key

	    // 2.1. bare ECC
	    // 2.1.1. bare ECC public key by hex values
	    if (param.curve !== undefined &&
		param.xy !== undefined && param.d === undefined) {
	        return new KJUR.crypto.ECDSA({pub: param.xy, curve: param.curve});
	    }

	    // 2.1.2. bare ECC private key by hex values
	    if (param.curve !== undefined && param.d !== undefined) {
	        return new KJUR.crypto.ECDSA({prv: param.d, curve: param.curve});
	    }

	    // 2.2. bare RSA
	    // 2.2.1. bare RSA public key by hex values
	    if (param.kty === undefined &&
		param.n !== undefined && param.e !== undefined &&
	        param.d === undefined) {
	        var key = new RSAKey();
	        key.setPublic(param.n, param.e);
	        return key;
	    }

	    // 2.2.2. bare RSA private key with P/Q/DP/DQ/COEFF by hex values
	    if (param.kty === undefined &&
		param.n !== undefined &&
		param.e !== undefined &&
		param.d !== undefined &&
	        param.p !== undefined &&
		param.q !== undefined &&
	        param.dp !== undefined &&
		param.dq !== undefined &&
		param.co !== undefined &&
	        param.qi === undefined) {
	        var key = new RSAKey();
	        key.setPrivateEx(param.n, param.e, param.d, param.p, param.q,
	                         param.dp, param.dq, param.co);
	        return key;
	    }

	    // 2.2.3. bare RSA public key without P/Q/DP/DQ/COEFF by hex values
	    if (param.kty === undefined &&
		param.n !== undefined &&
		param.e !== undefined &&
		param.d !== undefined &&
	        param.p === undefined) {
	        var key = new RSAKey();
	        key.setPrivate(param.n, param.e, param.d);
	        return key;
	    }

	    // 2.3. bare DSA
	    // 2.3.1. bare DSA public key by hex values
	    if (param.p !== undefined && param.q !== undefined &&
		param.g !== undefined &&
	        param.y !== undefined && param.x === undefined) {
	        var key = new KJUR.crypto.DSA();
	        key.setPublic(param.p, param.q, param.g, param.y);
	        return key;
	    }

	    // 2.3.2. bare DSA private key by hex values
	    if (param.p !== undefined && param.q !== undefined &&
		param.g !== undefined &&
	        param.y !== undefined && param.x !== undefined) {
	        var key = new KJUR.crypto.DSA();
	        key.setPrivate(param.p, param.q, param.g, param.y, param.x);
	        return key;
	    }

	    // 3. JWK
	    // 3.1. JWK RSA
	    // 3.1.1. JWK RSA public key by b64u values
	    if (param.kty === "RSA" &&
		param.n !== undefined &&
		param.e !== undefined &&
		param.d === undefined) {
		var key = new RSAKey();
		key.setPublic(b64utohex(param.n), b64utohex(param.e));
		return key;
	    }

	    // 3.1.2. JWK RSA private key with p/q/dp/dq/coeff by b64u values
	    if (param.kty === "RSA" &&
		param.n !== undefined &&
		param.e !== undefined &&
		param.d !== undefined &&
		param.p !== undefined &&
		param.q !== undefined &&
		param.dp !== undefined &&
		param.dq !== undefined &&
		param.qi !== undefined) {
		var key = new RSAKey();
	        key.setPrivateEx(b64utohex(param.n),
				 b64utohex(param.e),
				 b64utohex(param.d),
				 b64utohex(param.p),
				 b64utohex(param.q),
	                         b64utohex(param.dp),
				 b64utohex(param.dq),
				 b64utohex(param.qi));
		return key;
	    }

	    // 3.1.3. JWK RSA private key without p/q/dp/dq/coeff by b64u
	    //        since jsrsasign 5.0.0 keyutil 1.0.11
	    if (param.kty === "RSA" &&
		param.n !== undefined &&
		param.e !== undefined &&
		param.d !== undefined) {
		var key = new RSAKey();
	        key.setPrivate(b64utohex(param.n),
			       b64utohex(param.e),
			       b64utohex(param.d));
		return key;
	    }

	    // 3.2. JWK ECC
	    // 3.2.1. JWK ECC public key by b64u values
	    if (param.kty === "EC" &&
		param.crv !== undefined &&
		param.x !== undefined &&
		param.y !== undefined &&
	        param.d === undefined) {
		var ec = new KJUR.crypto.ECDSA({"curve": param.crv});
		var charlen = ec.ecparams.keylen / 4;
	        var hX   = ("0000000000" + b64utohex(param.x)).slice(- charlen);
	        var hY   = ("0000000000" + b64utohex(param.y)).slice(- charlen);
	        var hPub = "04" + hX + hY;
		ec.setPublicKeyHex(hPub);
		return ec;
	    }

	    // 3.2.2. JWK ECC private key by b64u values
	    if (param.kty === "EC" &&
		param.crv !== undefined &&
		param.x !== undefined &&
		param.y !== undefined &&
	        param.d !== undefined) {
		var ec = new KJUR.crypto.ECDSA({"curve": param.crv});
		var charlen = ec.ecparams.keylen / 4;
	        var hX   = ("0000000000" + b64utohex(param.x)).slice(- charlen);
	        var hY   = ("0000000000" + b64utohex(param.y)).slice(- charlen);
	        var hPub = "04" + hX + hY;
	        var hPrv = ("0000000000" + b64utohex(param.d)).slice(- charlen);
		ec.setPublicKeyHex(hPub);
		ec.setPrivateKeyHex(hPrv);
		return ec;
	    }
	    
	    // 4. by PEM certificate (-----BEGIN ... CERTIFITE----)
	    if (param.indexOf("-END CERTIFICATE-", 0) != -1 ||
	        param.indexOf("-END X509 CERTIFICATE-", 0) != -1 ||
	        param.indexOf("-END TRUSTED CERTIFICATE-", 0) != -1) {
	        return X509.getPublicKeyFromCertPEM(param);
	    }

	    // 4. public key by PKCS#8 hexadecimal string
	    if (hextype === "pkcs8pub") {
	        return KEYUTIL.getKeyFromPublicPKCS8Hex(param);
	    }

	    // 5. public key by PKCS#8 PEM string
	    if (param.indexOf("-END PUBLIC KEY-") != -1) {
	        return KEYUTIL.getKeyFromPublicPKCS8PEM(param);
	    }
	    
	    // 6. private key by PKCS#5 plain hexadecimal RSA string
	    if (hextype === "pkcs5prv") {
	        var key = new RSAKey();
	        key.readPrivateKeyFromASN1HexString(param);
	        return key;
	    }

	    // 7. private key by plain PKCS#5 hexadecimal RSA string
	    if (hextype === "pkcs5prv") {
	        var key = new RSAKey();
	        key.readPrivateKeyFromASN1HexString(param);
	        return key;
	    }

	    // 8. private key by plain PKCS#5 PEM RSA string 
	    //    getKey("-----BEGIN RSA PRIVATE KEY-...")
	    if (param.indexOf("-END RSA PRIVATE KEY-") != -1 &&
	        param.indexOf("4,ENCRYPTED") == -1) {
	        var hex = KEYUTIL.getHexFromPEM(param, "RSA PRIVATE KEY");
	        return KEYUTIL.getKey(hex, null, "pkcs5prv");
	    }

	    // 8.2. private key by plain PKCS#5 PEM DSA string
	    if (param.indexOf("-END DSA PRIVATE KEY-") != -1 &&
	        param.indexOf("4,ENCRYPTED") == -1) {

	        var hKey = this.getHexFromPEM(param, "DSA PRIVATE KEY");
	        var p = ASN1HEX.getVbyList(hKey, 0, [1], "02");
	        var q = ASN1HEX.getVbyList(hKey, 0, [2], "02");
	        var g = ASN1HEX.getVbyList(hKey, 0, [3], "02");
	        var y = ASN1HEX.getVbyList(hKey, 0, [4], "02");
	        var x = ASN1HEX.getVbyList(hKey, 0, [5], "02");
	        var key = new KJUR.crypto.DSA();
	        key.setPrivate(new BigInteger(p, 16),
	                       new BigInteger(q, 16),
	                       new BigInteger(g, 16),
	                       new BigInteger(y, 16),
	                       new BigInteger(x, 16));
	        return key;
	    }

	    // 9. private key by plain PKCS#8 PEM ECC/RSA string
	    if (param.indexOf("-END PRIVATE KEY-") != -1) {
	        return KEYUTIL.getKeyFromPlainPrivatePKCS8PEM(param);
	    }

	    // 10. private key by encrypted PKCS#5 PEM RSA string
	    if (param.indexOf("-END RSA PRIVATE KEY-") != -1 &&
	        param.indexOf("4,ENCRYPTED") != -1) {
	        return KEYUTIL.getRSAKeyFromEncryptedPKCS5PEM(param, passcode);
	    }

	    // 10.2. private key by encrypted PKCS#5 PEM ECDSA string
	    if (param.indexOf("-END EC PRIVATE KEY-") != -1 &&
	        param.indexOf("4,ENCRYPTED") != -1) {
	        var hKey = KEYUTIL.getDecryptedKeyHex(param, passcode);

	        var key = ASN1HEX.getVbyList(hKey, 0, [1], "04");
	        var curveNameOidHex = ASN1HEX.getVbyList(hKey, 0, [2,0], "06");
	        var pubkey = ASN1HEX.getVbyList(hKey, 0, [3,0], "03").substr(2);
	        var curveName = "";

	        if (KJUR.crypto.OID.oidhex2name[curveNameOidHex] !== undefined) {
	            curveName = KJUR.crypto.OID.oidhex2name[curveNameOidHex];
	        } else {
	            throw "undefined OID(hex) in KJUR.crypto.OID: " + curveNameOidHex;
	        }

	        var ec = new KJUR.crypto.ECDSA({'name': curveName});
	        ec.setPublicKeyHex(pubkey);
	        ec.setPrivateKeyHex(key);
	        ec.isPublic = false;
	        return ec;
	    }

	    // 10.3. private key by encrypted PKCS#5 PEM DSA string
	    if (param.indexOf("-END DSA PRIVATE KEY-") != -1 &&
	        param.indexOf("4,ENCRYPTED") != -1) {
	        var hKey = KEYUTIL.getDecryptedKeyHex(param, passcode);
	        var p = ASN1HEX.getVbyList(hKey, 0, [1], "02");
	        var q = ASN1HEX.getVbyList(hKey, 0, [2], "02");
	        var g = ASN1HEX.getVbyList(hKey, 0, [3], "02");
	        var y = ASN1HEX.getVbyList(hKey, 0, [4], "02");
	        var x = ASN1HEX.getVbyList(hKey, 0, [5], "02");
	        var key = new KJUR.crypto.DSA();
	        key.setPrivate(new BigInteger(p, 16),
	                       new BigInteger(q, 16),
	                       new BigInteger(g, 16),
	                       new BigInteger(y, 16),
	                       new BigInteger(x, 16));
	        return key;
	    }

	    // 11. private key by encrypted PKCS#8 hexadecimal RSA/ECDSA string
	    if (param.indexOf("-END ENCRYPTED PRIVATE KEY-") != -1) {
	        return KEYUTIL.getKeyFromEncryptedPKCS8PEM(param, passcode);
	    }

	    throw "not supported argument";
	};

	/**
	 * @name generateKeypair
	 * @memberOf KEYUTIL
	 * @function
	 * @static
	 * @param {String} alg 'RSA' or 'EC'
	 * @param {Object} keylenOrCurve key length for RSA or curve name for EC
	 * @return {Array} associative array of keypair which has prvKeyObj and pubKeyObj parameters
	 * @since keyutil 1.0.1
	 * @description
	 * This method generates a key pair of public key algorithm.
	 * The result will be an associative array which has following
	 * parameters:
	 * <ul>
	 * <li>prvKeyObj - RSAKey or ECDSA object of private key</li>
	 * <li>pubKeyObj - RSAKey or ECDSA object of public key</li>
	 * </ul>
	 * NOTE1: As for RSA algoirthm, public exponent has fixed
	 * value '0x10001'.
	 * NOTE2: As for EC algorithm, supported names of curve are
	 * secp256r1, secp256k1 and secp384r1.
	 * NOTE3: DSA is not supported yet.
	 * @example
	 * var rsaKeypair = KEYUTIL.generateKeypair("RSA", 1024);
	 * var ecKeypair = KEYUTIL.generateKeypair("EC", "secp256r1");
	 *
	 */
	KEYUTIL.generateKeypair = function(alg, keylenOrCurve) {
	    if (alg == "RSA") {
	        var keylen = keylenOrCurve;
	        var prvKey = new RSAKey();
	        prvKey.generate(keylen, '10001');
	        prvKey.isPrivate = true;
	        prvKey.isPublic = true;
	        
	        var pubKey = new RSAKey();
	        var hN = prvKey.n.toString(16);
	        var hE = prvKey.e.toString(16);
	        pubKey.setPublic(hN, hE);
	        pubKey.isPrivate = false;
	        pubKey.isPublic = true;
	        
	        var result = {};
	        result.prvKeyObj = prvKey;
	        result.pubKeyObj = pubKey;
	        return result;
	    } else if (alg == "EC") {
	        var curve = keylenOrCurve;
	        var ec = new KJUR.crypto.ECDSA({curve: curve});
	        var keypairHex = ec.generateKeyPairHex();

	        var prvKey = new KJUR.crypto.ECDSA({curve: curve});
	        prvKey.setPublicKeyHex(keypairHex.ecpubhex);
	        prvKey.setPrivateKeyHex(keypairHex.ecprvhex);
	        prvKey.isPrivate = true;
	        prvKey.isPublic = false;

	        var pubKey = new KJUR.crypto.ECDSA({curve: curve});
	        pubKey.setPublicKeyHex(keypairHex.ecpubhex);
	        pubKey.isPrivate = false;
	        pubKey.isPublic = true;

	        var result = {};
	        result.prvKeyObj = prvKey;
	        result.pubKeyObj = pubKey;
	        return result;
	    } else {
	        throw "unknown algorithm: " + alg;
	    }
	};

	/**
	 * get PEM formatted private or public key file from a RSA/ECDSA/DSA key object
	 * @name getPEM
	 * @memberOf KEYUTIL
	 * @function
	 * @static
	 * @param {Object} keyObjOrHex key object {@link RSAKey}, {@link KJUR.crypto.ECDSA} or {@link KJUR.crypto.DSA} to encode to
	 * @param {String} formatType (OPTION) output format type of "PKCS1PRV", "PKCS5PRV" or "PKCS8PRV" for private key
	 * @param {String} passwd (OPTION) password to protect private key
	 * @param {String} encAlg (OPTION) encryption algorithm for PKCS#5. currently supports DES-CBC, DES-EDE3-CBC and AES-{128,192,256}-CBC
	 * @since keyutil 1.0.4
	 * @description
	 * <dl>
	 * <dt><b>NOTE1:</b>
	 * <dd>
	 * PKCS#5 encrypted private key protection algorithm supports DES-CBC, 
	 * DES-EDE3-CBC and AES-{128,192,256}-CBC
	 * <dt><b>NOTE2:</b>
	 * <dd>
	 * OpenSSL supports
	 * </dl>
	 * @example
	 * KEUUTIL.getPEM(publicKey) =&gt; generates PEM PKCS#8 public key 
	 * KEUUTIL.getPEM(privateKey, "PKCS1PRV") =&gt; generates PEM PKCS#1 plain private key
	 * KEUUTIL.getPEM(privateKey, "PKCS5PRV", "pass") =&gt; generates PEM PKCS#5 encrypted private key 
	 *                                                          with DES-EDE3-CBC (DEFAULT)
	 * KEUUTIL.getPEM(privateKey, "PKCS5PRV", "pass", "DES-CBC") =&gt; generates PEM PKCS#5 encrypted 
	 *                                                                 private key with DES-CBC
	 * KEUUTIL.getPEM(privateKey, "PKCS8PRV") =&gt; generates PEM PKCS#8 plain private key
	 * KEUUTIL.getPEM(privateKey, "PKCS8PRV", "pass") =&gt; generates PEM PKCS#8 encrypted private key
	 *                                                      with PBKDF2_HmacSHA1_3DES
	 */
	KEYUTIL.getPEM = function(keyObjOrHex, formatType, passwd, encAlg, hexType) {
	    var ns1 = KJUR.asn1;
	    var ns2 = KJUR.crypto;

	    function _rsaprv2asn1obj(keyObjOrHex) {
	        var asn1Obj = KJUR.asn1.ASN1Util.newObject({
	            "seq": [
	                {"int": 0 },
	                {"int": {"bigint": keyObjOrHex.n}},
	                {"int": keyObjOrHex.e},
	                {"int": {"bigint": keyObjOrHex.d}},
	                {"int": {"bigint": keyObjOrHex.p}},
	                {"int": {"bigint": keyObjOrHex.q}},
	                {"int": {"bigint": keyObjOrHex.dmp1}},
	                {"int": {"bigint": keyObjOrHex.dmq1}},
	                {"int": {"bigint": keyObjOrHex.coeff}}
	            ]
	        });
	        return asn1Obj;
	    };

	    function _ecdsaprv2asn1obj(keyObjOrHex) {
	        var asn1Obj2 = KJUR.asn1.ASN1Util.newObject({
	            "seq": [
	                {"int": 1 },
	                {"octstr": {"hex": keyObjOrHex.prvKeyHex}},
	                {"tag": ['a0', true, {'oid': {'name': keyObjOrHex.curveName}}]},
	                {"tag": ['a1', true, {'bitstr': {'hex': '00' + keyObjOrHex.pubKeyHex}}]}
	            ]
	        });
	        return asn1Obj2;
	    };

	    function _dsaprv2asn1obj(keyObjOrHex) {
	        var asn1Obj = KJUR.asn1.ASN1Util.newObject({
	            "seq": [
	                {"int": 0 },
	                {"int": {"bigint": keyObjOrHex.p}},
	                {"int": {"bigint": keyObjOrHex.q}},
	                {"int": {"bigint": keyObjOrHex.g}},
	                {"int": {"bigint": keyObjOrHex.y}},
	                {"int": {"bigint": keyObjOrHex.x}}
	            ]
	        });
	        return asn1Obj;
	    };

	    // 1. public key

	    // x. PEM PKCS#8 public key of RSA/ECDSA/DSA public key object
	    if (((typeof RSAKey != "undefined" && keyObjOrHex instanceof RSAKey) ||
	         (typeof ns2.DSA != "undefined" && keyObjOrHex instanceof ns2.DSA) ||
	         (typeof ns2.ECDSA != "undefined" && keyObjOrHex instanceof ns2.ECDSA)) &&
	        keyObjOrHex.isPublic == true &&
	        (formatType === undefined || formatType == "PKCS8PUB")) {
	        var asn1Obj = new KJUR.asn1.x509.SubjectPublicKeyInfo(keyObjOrHex);
	        var asn1Hex = asn1Obj.getEncodedHex();
	        return ns1.ASN1Util.getPEMStringFromHex(asn1Hex, "PUBLIC KEY");
	    }
	    
	    // 2. private

	    // x. PEM PKCS#1 plain private key of RSA private key object
	    if (formatType == "PKCS1PRV" &&
	        typeof RSAKey != "undefined" &&
	        keyObjOrHex instanceof RSAKey &&
	        (passwd === undefined || passwd == null) &&
	        keyObjOrHex.isPrivate  == true) {

	        var asn1Obj = _rsaprv2asn1obj(keyObjOrHex);
	        var asn1Hex = asn1Obj.getEncodedHex();
	        return ns1.ASN1Util.getPEMStringFromHex(asn1Hex, "RSA PRIVATE KEY");
	    }

	    // x. PEM PKCS#1 plain private key of ECDSA private key object
	    if (formatType == "PKCS1PRV" &&
	        typeof RSAKey != "undefined" &&
	        keyObjOrHex instanceof KJUR.crypto.ECDSA &&
	        (passwd === undefined || passwd == null) &&
	        keyObjOrHex.isPrivate  == true) {

	        var asn1Obj1 = new KJUR.asn1.DERObjectIdentifier({'name': keyObjOrHex.curveName});
	        var asn1Hex1 = asn1Obj1.getEncodedHex();
	        var asn1Obj2 = _ecdsaprv2asn1obj(keyObjOrHex);
	        var asn1Hex2 = asn1Obj2.getEncodedHex();

	        var s = "";
	        s += ns1.ASN1Util.getPEMStringFromHex(asn1Hex1, "EC PARAMETERS");
	        s += ns1.ASN1Util.getPEMStringFromHex(asn1Hex2, "EC PRIVATE KEY");
	        return s;
	    }

	    // x. PEM PKCS#1 plain private key of DSA private key object
	    if (formatType == "PKCS1PRV" &&
	        typeof KJUR.crypto.DSA != "undefined" &&
	        keyObjOrHex instanceof KJUR.crypto.DSA &&
	        (passwd === undefined || passwd == null) &&
	        keyObjOrHex.isPrivate  == true) {

	        var asn1Obj = _dsaprv2asn1obj(keyObjOrHex);
	        var asn1Hex = asn1Obj.getEncodedHex();
	        return ns1.ASN1Util.getPEMStringFromHex(asn1Hex, "DSA PRIVATE KEY");
	    }

	    // 3. private

	    // x. PEM PKCS#5 encrypted private key of RSA private key object
	    if (formatType == "PKCS5PRV" &&
	        typeof RSAKey != "undefined" &&
	        keyObjOrHex instanceof RSAKey &&
	        (passwd !== undefined && passwd != null) &&
	        keyObjOrHex.isPrivate  == true) {

	        var asn1Obj = _rsaprv2asn1obj(keyObjOrHex);
	        var asn1Hex = asn1Obj.getEncodedHex();

	        if (encAlg === undefined) encAlg = "DES-EDE3-CBC";
	        return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", asn1Hex, passwd, encAlg);
	    }

	    // x. PEM PKCS#5 encrypted private key of ECDSA private key object
	    if (formatType == "PKCS5PRV" &&
	        typeof KJUR.crypto.ECDSA != "undefined" &&
	        keyObjOrHex instanceof KJUR.crypto.ECDSA &&
	        (passwd !== undefined && passwd != null) &&
	        keyObjOrHex.isPrivate  == true) {

	        var asn1Obj = _ecdsaprv2asn1obj(keyObjOrHex);
	        var asn1Hex = asn1Obj.getEncodedHex();

	        if (encAlg === undefined) encAlg = "DES-EDE3-CBC";
	        return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", asn1Hex, passwd, encAlg);
	    }

	    // x. PEM PKCS#5 encrypted private key of DSA private key object
	    if (formatType == "PKCS5PRV" &&
	        typeof KJUR.crypto.DSA != "undefined" &&
	        keyObjOrHex instanceof KJUR.crypto.DSA &&
	        (passwd !== undefined && passwd != null) &&
	        keyObjOrHex.isPrivate  == true) {

	        var asn1Obj = _dsaprv2asn1obj(keyObjOrHex);
	        var asn1Hex = asn1Obj.getEncodedHex();

	        if (encAlg === undefined) encAlg = "DES-EDE3-CBC";
	        return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", asn1Hex, passwd, encAlg);
	    }

	    // x. ======================================================================

	    var _getEncryptedPKCS8 = function(plainKeyHex, passcode) {
	        var info = _getEencryptedPKCS8Info(plainKeyHex, passcode);
	        //alert("iv=" + info.encryptionSchemeIV);
	        //alert("info.ciphertext2[" + info.ciphertext.length + "=" + info.ciphertext);
	        var asn1Obj = new KJUR.asn1.ASN1Util.newObject({
	            "seq": [
	                {"seq": [
	                    {"oid": {"name": "pkcs5PBES2"}},
	                    {"seq": [
	                        {"seq": [
	                            {"oid": {"name": "pkcs5PBKDF2"}},
	                            {"seq": [
	                                {"octstr": {"hex": info.pbkdf2Salt}},
	                                {"int": info.pbkdf2Iter}
	                            ]}
	                        ]},
	                        {"seq": [
	                            {"oid": {"name": "des-EDE3-CBC"}},
	                            {"octstr": {"hex": info.encryptionSchemeIV}}
	                        ]}
	                    ]}
	                ]},
	                {"octstr": {"hex": info.ciphertext}}
	            ]
	        });
	        return asn1Obj.getEncodedHex();
	    };

	    var _getEencryptedPKCS8Info = function(plainKeyHex, passcode) {
	        var pbkdf2Iter = 100;
	        var pbkdf2SaltWS = CryptoJS.lib.WordArray.random(8);
	        var encryptionSchemeAlg = "DES-EDE3-CBC";
	        var encryptionSchemeIVWS = CryptoJS.lib.WordArray.random(8);
	        // PBKDF2 key
	        var pbkdf2KeyWS = CryptoJS.PBKDF2(passcode, 
	                                          pbkdf2SaltWS, { "keySize": 192/32,
	                                                          "iterations": pbkdf2Iter });
	        // ENCRYPT
	        var plainKeyWS = CryptoJS.enc.Hex.parse(plainKeyHex);
	        var encryptedKeyHex = 
	            CryptoJS.TripleDES.encrypt(plainKeyWS, pbkdf2KeyWS, { "iv": encryptionSchemeIVWS }) + "";

	        //alert("encryptedKeyHex=" + encryptedKeyHex);

	        var info = {};
	        info.ciphertext = encryptedKeyHex;
	        //alert("info.ciphertext=" + info.ciphertext);
	        info.pbkdf2Salt = CryptoJS.enc.Hex.stringify(pbkdf2SaltWS);
	        info.pbkdf2Iter = pbkdf2Iter;
	        info.encryptionSchemeAlg = encryptionSchemeAlg;
	        info.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(encryptionSchemeIVWS);
	        return info;
	    };

	    // x. PEM PKCS#8 plain private key of RSA private key object
	    if (formatType == "PKCS8PRV" &&
	        typeof RSAKey != "undefined" &&
	        keyObjOrHex instanceof RSAKey &&
	        keyObjOrHex.isPrivate  == true) {

	        var keyObj = _rsaprv2asn1obj(keyObjOrHex);
	        var keyHex = keyObj.getEncodedHex();

	        var asn1Obj = KJUR.asn1.ASN1Util.newObject({
	            "seq": [
	                {"int": 0},
	                {"seq": [{"oid": {"name": "rsaEncryption"}},{"null": true}]},
	                {"octstr": {"hex": keyHex}}
	            ]
	        });
	        var asn1Hex = asn1Obj.getEncodedHex();

	        if (passwd === undefined || passwd == null) {
	            return ns1.ASN1Util.getPEMStringFromHex(asn1Hex, "PRIVATE KEY");
	        } else {
	            var asn1Hex2 = _getEncryptedPKCS8(asn1Hex, passwd);
	            return ns1.ASN1Util.getPEMStringFromHex(asn1Hex2, "ENCRYPTED PRIVATE KEY");
	        }
	    }

	    // x. PEM PKCS#8 plain private key of ECDSA private key object
	    if (formatType == "PKCS8PRV" &&
	        typeof KJUR.crypto.ECDSA != "undefined" &&
	        keyObjOrHex instanceof KJUR.crypto.ECDSA &&
	        keyObjOrHex.isPrivate  == true) {

	        var keyObj = new KJUR.asn1.ASN1Util.newObject({
	            "seq": [
	                {"int": 1},
	                {"octstr": {"hex": keyObjOrHex.prvKeyHex}},
	                {"tag": ['a1', true, {"bitstr": {"hex": "00" + keyObjOrHex.pubKeyHex}}]}
	            ]
	        });
	        var keyHex = keyObj.getEncodedHex();

	        var asn1Obj = KJUR.asn1.ASN1Util.newObject({
	            "seq": [
	                {"int": 0},
	                {"seq": [
	                    {"oid": {"name": "ecPublicKey"}},
	                    {"oid": {"name": keyObjOrHex.curveName}}
	                ]},
	                {"octstr": {"hex": keyHex}}
	            ]
	        });

	        var asn1Hex = asn1Obj.getEncodedHex();
	        if (passwd === undefined || passwd == null) {
	            return ns1.ASN1Util.getPEMStringFromHex(asn1Hex, "PRIVATE KEY");
	        } else {
	            var asn1Hex2 = _getEncryptedPKCS8(asn1Hex, passwd);
	            return ns1.ASN1Util.getPEMStringFromHex(asn1Hex2, "ENCRYPTED PRIVATE KEY");
	        }
	    }

	    // x. PEM PKCS#8 plain private key of DSA private key object
	    if (formatType == "PKCS8PRV" &&
	        typeof KJUR.crypto.DSA != "undefined" &&
	        keyObjOrHex instanceof KJUR.crypto.DSA &&
	        keyObjOrHex.isPrivate  == true) {

	        var keyObj = new KJUR.asn1.DERInteger({'bigint': keyObjOrHex.x});
	        var keyHex = keyObj.getEncodedHex();

	        var asn1Obj = KJUR.asn1.ASN1Util.newObject({
	            "seq": [
	                {"int": 0},
	                {"seq": [
	                    {"oid": {"name": "dsa"}},
	                    {"seq": [
	                        {"int": {"bigint": keyObjOrHex.p}},
	                        {"int": {"bigint": keyObjOrHex.q}},
	                        {"int": {"bigint": keyObjOrHex.g}}
	                    ]}
	                ]},
	                {"octstr": {"hex": keyHex}}
	            ]
	        });

	        var asn1Hex = asn1Obj.getEncodedHex();
	        if (passwd === undefined || passwd == null) {
	            return ns1.ASN1Util.getPEMStringFromHex(asn1Hex, "PRIVATE KEY");
	        } else {
	            var asn1Hex2 = _getEncryptedPKCS8(asn1Hex, passwd);
	            return ns1.ASN1Util.getPEMStringFromHex(asn1Hex2, "ENCRYPTED PRIVATE KEY");
	        }
	    }

	    throw "unsupported object nor format";
	};

	// -- PUBLIC METHODS FOR CSR -------------------------------------------------------

	/**
	 * get RSAKey/DSA/ECDSA public key object from PEM formatted PKCS#10 CSR string
	 * @name getKeyFromCSRPEM
	 * @memberOf KEYUTIL
	 * @function
	 * @param {String} csrPEM PEM formatted PKCS#10 CSR string
	 * @return {Object} RSAKey/DSA/ECDSA public key object
	 * @since keyutil 1.0.5
	 */
	KEYUTIL.getKeyFromCSRPEM = function(csrPEM) {
	    var csrHex = KEYUTIL.getHexFromPEM(csrPEM, "CERTIFICATE REQUEST");
	    var key = KEYUTIL.getKeyFromCSRHex(csrHex);
	    return key;
	};

	/**
	 * get RSAKey/DSA/ECDSA public key object from hexadecimal string of PKCS#10 CSR
	 * @name getKeyFromCSRHex
	 * @memberOf KEYUTIL
	 * @function
	 * @param {String} csrHex hexadecimal string of PKCS#10 CSR
	 * @return {Object} RSAKey/DSA/ECDSA public key object
	 * @since keyutil 1.0.5
	 */
	KEYUTIL.getKeyFromCSRHex = function(csrHex) {
	    var info = KEYUTIL.parseCSRHex(csrHex);
	    var key = KEYUTIL.getKey(info.p8pubkeyhex, null, "pkcs8pub");
	    return key;
	};

	/**
	 * parse hexadecimal string of PKCS#10 CSR (certificate signing request)
	 * @name parseCSRHex
	 * @memberOf KEYUTIL
	 * @function
	 * @param {String} csrHex hexadecimal string of PKCS#10 CSR
	 * @return {Array} associative array of parsed CSR
	 * @since keyutil 1.0.5
	 * @description
	 * Resulted associative array has following properties:
	 * <ul>
	 * <li>p8pubkeyhex - hexadecimal string of subject public key in PKCS#8</li>
	 * </ul>
	 */
	KEYUTIL.parseCSRHex = function(csrHex) {
	    var result = {};
	    var h = csrHex;

	    // 1. sequence
	    if (h.substr(0, 2) != "30")
	        throw "malformed CSR(code:001)"; // not sequence

	    var a1 = ASN1HEX.getPosArrayOfChildren_AtObj(h, 0);
	    if (a1.length < 1)
	        throw "malformed CSR(code:002)"; // short length

	    // 2. 2nd sequence
	    if (h.substr(a1[0], 2) != "30")
	        throw "malformed CSR(code:003)"; // not sequence

	    var a2 = ASN1HEX.getPosArrayOfChildren_AtObj(h, a1[0]);
	    if (a2.length < 3)
	        throw "malformed CSR(code:004)"; // 2nd seq short elem

	    result.p8pubkeyhex = ASN1HEX.getHexOfTLV_AtObj(h, a2[2]);

	    return result;
	};

	// -- OTHER STATIC PUBLIC METHODS  -------------------------------------------------

	/**
	 * convert from RSAKey/KJUR.crypto.ECDSA public/private key object to RFC 7517 JSON Web Key(JWK)
	 * @name getJWKFromKey
	 * @memberOf KEYUTIL
	 * @function
	 * @static
	 * @param {Object} RSAKey/KJUR.crypto.ECDSA public/private key object
	 * @return {Object} JWK object
	 * @since keyutil 1.0.13 jsrsasign 5.0.14
	 * @description
	 * This static method convert from RSAKey/KJUR.crypto.ECDSA public/private key object 
	 * to RFC 7517 JSON Web Key(JWK)
	 * @example
	 * kp1 = KEYUTIL.generateKeypair("EC", "P-256");
	 * jwkPrv1 = KEYUTIL.getJWKFromKey(kp1.prvKeyObj);
	 * jwkPub1 = KEYUTIL.getJWKFromKey(kp1.pubKeyObj);
	 *
	 * kp2 = KEYUTIL.generateKeypair("RSA", 2048);
	 * jwkPrv2 = KEYUTIL.getJWKFromKey(kp2.prvKeyObj);
	 * jwkPub2 = KEYUTIL.getJWKFromKey(kp2.pubKeyObj);
	 *
	 * // if you need RFC 7636 JWK thumprint as kid do like this:
	 * jwkPub2.kid = KJUR.jws.JWS.getJWKthumbprint(jwkPub2);
	 */
	KEYUTIL.getJWKFromKey = function(keyObj) {
	    var jwk = {};
	    if (keyObj instanceof RSAKey && keyObj.isPrivate) {
		jwk.kty = "RSA";
		jwk.n = hextob64u(keyObj.n.toString(16));
		jwk.e = hextob64u(keyObj.e.toString(16));
		jwk.d = hextob64u(keyObj.d.toString(16));
		jwk.p = hextob64u(keyObj.p.toString(16));
		jwk.q = hextob64u(keyObj.q.toString(16));
		jwk.dp = hextob64u(keyObj.dmp1.toString(16));
		jwk.dq = hextob64u(keyObj.dmq1.toString(16));
		jwk.qi = hextob64u(keyObj.coeff.toString(16));
		return jwk;
	    } else if (keyObj instanceof RSAKey && keyObj.isPublic) {
		jwk.kty = "RSA";
		jwk.n = hextob64u(keyObj.n.toString(16));
		jwk.e = hextob64u(keyObj.e.toString(16));
		return jwk;
	    } else if (keyObj instanceof KJUR.crypto.ECDSA && keyObj.isPrivate) {
		var name = keyObj.getShortNISTPCurveName();
		if (name !== "P-256" && name !== "P-384")
		    throw "unsupported curve name for JWT: " + name;
		var xy = keyObj.getPublicKeyXYHex();
		jwk.kty = "EC";
		jwk.crv =  name;
		jwk.x = hextob64u(xy.x);
		jwk.y = hextob64u(xy.y);
		jwk.d = hextob64u(keyObj.prvKeyHex);
		return jwk;
	    } else if (keyObj instanceof KJUR.crypto.ECDSA && keyObj.isPublic) {
		var name = keyObj.getShortNISTPCurveName();
		if (name !== "P-256" && name !== "P-384")
		    throw "unsupported curve name for JWT: " + name;
		var xy = keyObj.getPublicKeyXYHex();
		jwk.kty = "EC";
		jwk.crv =  name;
		jwk.x = hextob64u(xy.x);
		jwk.y = hextob64u(xy.y);
		return jwk;
	    }
	    throw "not supported key object";
	};



	/*! crypto-1.1.10.js (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	/*
	 * crypto.js - Cryptographic Algorithm Provider class
	 *
	 * Copyright (c) 2013-2016 Kenji Urushima (kenji.urushima@gmail.com)
	 *
	 * This software is licensed under the terms of the MIT License.
	 * http://kjur.github.com/jsrsasign/license
	 *
	 * The above copyright and license notice shall be 
	 * included in all copies or substantial portions of the Software.
	 */

	/**
	 * @fileOverview
	 * @name crypto-1.1.js
	 * @author Kenji Urushima kenji.urushima@gmail.com
	 * @version 1.1.10 (2016-Oct-29)
	 * @since jsrsasign 2.2
	 * @license <a href="http://kjur.github.io/jsrsasign/license/">MIT License</a>
	 */

	/** 
	 * kjur's class library name space
	 * @name KJUR
	 * @namespace kjur's class library name space
	 */
	if (typeof KJUR == "undefined" || !KJUR) KJUR = {};
	/**
	 * kjur's cryptographic algorithm provider library name space
	 * <p>
	 * This namespace privides following crytpgrahic classes.
	 * <ul>
	 * <li>{@link KJUR.crypto.MessageDigest} - Java JCE(cryptograhic extension) style MessageDigest class</li>
	 * <li>{@link KJUR.crypto.Signature} - Java JCE(cryptograhic extension) style Signature class</li>
	 * <li>{@link KJUR.crypto.Cipher} - class for encrypting and decrypting data</li>
	 * <li>{@link KJUR.crypto.Util} - cryptographic utility functions and properties</li>
	 * </ul>
	 * NOTE: Please ignore method summary and document of this namespace. This caused by a bug of jsdoc2.
	 * </p>
	 * @name KJUR.crypto
	 * @namespace
	 */
	if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) KJUR.crypto = {};

	/**
	 * static object for cryptographic function utilities
	 * @name KJUR.crypto.Util
	 * @class static object for cryptographic function utilities
	 * @property {Array} DIGESTINFOHEAD PKCS#1 DigestInfo heading hexadecimal bytes for each hash algorithms
	 * @property {Array} DEFAULTPROVIDER associative array of default provider name for each hash and signature algorithms
	 * @description
	 */
	KJUR.crypto.Util = new function() {
	    this.DIGESTINFOHEAD = {
		'sha1':      "3021300906052b0e03021a05000414",
	        'sha224':    "302d300d06096086480165030402040500041c",
		'sha256':    "3031300d060960864801650304020105000420",
		'sha384':    "3041300d060960864801650304020205000430",
		'sha512':    "3051300d060960864801650304020305000440",
		'md2':       "3020300c06082a864886f70d020205000410",
		'md5':       "3020300c06082a864886f70d020505000410",
		'ripemd160': "3021300906052b2403020105000414",
	    };

	    /*
	     * @since crypto 1.1.1
	     */
	    this.DEFAULTPROVIDER = {
		'md5':			'cryptojs',
		'sha1':			'cryptojs',
		'sha224':		'cryptojs',
		'sha256':		'cryptojs',
		'sha384':		'cryptojs',
		'sha512':		'cryptojs',
		'ripemd160':		'cryptojs',
		'hmacmd5':		'cryptojs',
		'hmacsha1':		'cryptojs',
		'hmacsha224':		'cryptojs',
		'hmacsha256':		'cryptojs',
		'hmacsha384':		'cryptojs',
		'hmacsha512':		'cryptojs',
		'hmacripemd160':	'cryptojs',

		'MD5withRSA':		'cryptojs/jsrsa',
		'SHA1withRSA':		'cryptojs/jsrsa',
		'SHA224withRSA':	'cryptojs/jsrsa',
		'SHA256withRSA':	'cryptojs/jsrsa',
		'SHA384withRSA':	'cryptojs/jsrsa',
		'SHA512withRSA':	'cryptojs/jsrsa',
		'RIPEMD160withRSA':	'cryptojs/jsrsa',

		'MD5withECDSA':		'cryptojs/jsrsa',
		'SHA1withECDSA':	'cryptojs/jsrsa',
		'SHA224withECDSA':	'cryptojs/jsrsa',
		'SHA256withECDSA':	'cryptojs/jsrsa',
		'SHA384withECDSA':	'cryptojs/jsrsa',
		'SHA512withECDSA':	'cryptojs/jsrsa',
		'RIPEMD160withECDSA':	'cryptojs/jsrsa',

		'SHA1withDSA':		'cryptojs/jsrsa',
		'SHA224withDSA':	'cryptojs/jsrsa',
		'SHA256withDSA':	'cryptojs/jsrsa',

		'MD5withRSAandMGF1':		'cryptojs/jsrsa',
		'SHA1withRSAandMGF1':		'cryptojs/jsrsa',
		'SHA224withRSAandMGF1':		'cryptojs/jsrsa',
		'SHA256withRSAandMGF1':		'cryptojs/jsrsa',
		'SHA384withRSAandMGF1':		'cryptojs/jsrsa',
		'SHA512withRSAandMGF1':		'cryptojs/jsrsa',
		'RIPEMD160withRSAandMGF1':	'cryptojs/jsrsa',
	    };

	    /*
	     * @since crypto 1.1.2
	     */
	    this.CRYPTOJSMESSAGEDIGESTNAME = {
		'md5':		CryptoJS.algo.MD5,
		'sha1':		CryptoJS.algo.SHA1,
		'sha224':	CryptoJS.algo.SHA224,
		'sha256':	CryptoJS.algo.SHA256,
		'sha384':	CryptoJS.algo.SHA384,
		'sha512':	CryptoJS.algo.SHA512,
		'ripemd160':	CryptoJS.algo.RIPEMD160
	    };

	    /**
	     * get hexadecimal DigestInfo
	     * @name getDigestInfoHex
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} hHash hexadecimal hash value
	     * @param {String} alg hash algorithm name (ex. 'sha1')
	     * @return {String} hexadecimal string DigestInfo ASN.1 structure
	     */
	    this.getDigestInfoHex = function(hHash, alg) {
		if (typeof this.DIGESTINFOHEAD[alg] == "undefined")
		    throw "alg not supported in Util.DIGESTINFOHEAD: " + alg;
		return this.DIGESTINFOHEAD[alg] + hHash;
	    };

	    /**
	     * get PKCS#1 padded hexadecimal DigestInfo
	     * @name getPaddedDigestInfoHex
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} hHash hexadecimal hash value of message to be signed
	     * @param {String} alg hash algorithm name (ex. 'sha1')
	     * @param {Integer} keySize key bit length (ex. 1024)
	     * @return {String} hexadecimal string of PKCS#1 padded DigestInfo
	     */
	    this.getPaddedDigestInfoHex = function(hHash, alg, keySize) {
		var hDigestInfo = this.getDigestInfoHex(hHash, alg);
		var pmStrLen = keySize / 4; // minimum PM length

		if (hDigestInfo.length + 22 > pmStrLen) // len(0001+ff(*8)+00+hDigestInfo)=22
		    throw "key is too short for SigAlg: keylen=" + keySize + "," + alg;

		var hHead = "0001";
		var hTail = "00" + hDigestInfo;
		var hMid = "";
		var fLen = pmStrLen - hHead.length - hTail.length;
		for (var i = 0; i < fLen; i += 2) {
		    hMid += "ff";
		}
		var hPaddedMessage = hHead + hMid + hTail;
		return hPaddedMessage;
	    };

	    /**
	     * get hexadecimal hash of string with specified algorithm
	     * @name hashString
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} s input string to be hashed
	     * @param {String} alg hash algorithm name
	     * @return {String} hexadecimal string of hash value
	     * @since 1.1.1
	     */
	    this.hashString = function(s, alg) {
	        var md = new KJUR.crypto.MessageDigest({'alg': alg});
	        return md.digestString(s);
	    };

	    /**
	     * get hexadecimal hash of hexadecimal string with specified algorithm
	     * @name hashHex
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} sHex input hexadecimal string to be hashed
	     * @param {String} alg hash algorithm name
	     * @return {String} hexadecimal string of hash value
	     * @since 1.1.1
	     */
	    this.hashHex = function(sHex, alg) {
	        var md = new KJUR.crypto.MessageDigest({'alg': alg});
	        return md.digestHex(sHex);
	    };

	    /**
	     * get hexadecimal SHA1 hash of string
	     * @name sha1
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} s input string to be hashed
	     * @return {String} hexadecimal string of hash value
	     * @since 1.0.3
	     */
	    this.sha1 = function(s) {
	        var md = new KJUR.crypto.MessageDigest({'alg':'sha1', 'prov':'cryptojs'});
	        return md.digestString(s);
	    };

	    /**
	     * get hexadecimal SHA256 hash of string
	     * @name sha256
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} s input string to be hashed
	     * @return {String} hexadecimal string of hash value
	     * @since 1.0.3
	     */
	    this.sha256 = function(s) {
	        var md = new KJUR.crypto.MessageDigest({'alg':'sha256', 'prov':'cryptojs'});
	        return md.digestString(s);
	    };

	    this.sha256Hex = function(s) {
	        var md = new KJUR.crypto.MessageDigest({'alg':'sha256', 'prov':'cryptojs'});
	        return md.digestHex(s);
	    };

	    /**
	     * get hexadecimal SHA512 hash of string
	     * @name sha512
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} s input string to be hashed
	     * @return {String} hexadecimal string of hash value
	     * @since 1.0.3
	     */
	    this.sha512 = function(s) {
	        var md = new KJUR.crypto.MessageDigest({'alg':'sha512', 'prov':'cryptojs'});
	        return md.digestString(s);
	    };

	    this.sha512Hex = function(s) {
	        var md = new KJUR.crypto.MessageDigest({'alg':'sha512', 'prov':'cryptojs'});
	        return md.digestHex(s);
	    };

	    /**
	     * get hexadecimal MD5 hash of string
	     * @name md5
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} s input string to be hashed
	     * @return {String} hexadecimal string of hash value
	     * @since 1.0.3
	     */
	    this.md5 = function(s) {
	        var md = new KJUR.crypto.MessageDigest({'alg':'md5', 'prov':'cryptojs'});
	        return md.digestString(s);
	    };

	    /**
	     * get hexadecimal RIPEMD160 hash of string
	     * @name ripemd160
	     * @memberOf KJUR.crypto.Util
	     * @function
	     * @param {String} s input string to be hashed
	     * @return {String} hexadecimal string of hash value
	     * @since 1.0.3
	     */
	    this.ripemd160 = function(s) {
	        var md = new KJUR.crypto.MessageDigest({'alg':'ripemd160', 'prov':'cryptojs'});
	        return md.digestString(s);
	    };

	    /*
	     * @since 1.1.2
	     */
	    this.getCryptoJSMDByName = function(s) {
		
	    };
	};

	// === Mac ===============================================================

	/**
	 * MessageDigest class which is very similar to java.security.MessageDigest class<br/>
	 * @name KJUR.crypto.MessageDigest
	 * @class MessageDigest class which is very similar to java.security.MessageDigest class
	 * @param {Array} params parameters for constructor
	 * @property {Array} HASHLENGTH static Array of resulted byte length of hash (ex. HASHLENGTH["sha1"] == 20)
	 * @description
	 * <br/>
	 * Currently this supports following algorithm and providers combination:
	 * <ul>
	 * <li>md5 - cryptojs</li>
	 * <li>sha1 - cryptojs</li>
	 * <li>sha224 - cryptojs</li>
	 * <li>sha256 - cryptojs</li>
	 * <li>sha384 - cryptojs</li>
	 * <li>sha512 - cryptojs</li>
	 * <li>ripemd160 - cryptojs</li>
	 * <li>sha256 - sjcl (NEW from crypto.js 1.0.4)</li>
	 * </ul>
	 * @example
	 * // CryptoJS provider sample
	 * var md = new KJUR.crypto.MessageDigest({alg: "sha1", prov: "cryptojs"});
	 * md.updateString('aaa')
	 * var mdHex = md.digest()
	 *
	 * // SJCL(Stanford JavaScript Crypto Library) provider sample
	 * var md = new KJUR.crypto.MessageDigest({alg: "sha256", prov: "sjcl"}); // sjcl supports sha256 only
	 * md.updateString('aaa')
	 * var mdHex = md.digest()
	 *
	 * // HASHLENGTH property
	 * KJUR.crypto.MessageDigest.HASHLENGTH['sha1'] &rarr 20
	 * KJUR.crypto.MessageDigest.HASHLENGTH['sha512'] &rarr 64
	 */
	KJUR.crypto.MessageDigest = function(params) {
	    var md = null;
	    var algName = null;
	    var provName = null;

	    /**
	     * set hash algorithm and provider<br/>
	     * @name setAlgAndProvider
	     * @memberOf KJUR.crypto.MessageDigest#
	     * @function
	     * @param {String} alg hash algorithm name
	     * @param {String} prov provider name
	     * @description
	     * This methods set an algorithm and a cryptographic provider.<br/>
	     * Here is acceptable algorithm names ignoring cases and hyphens:
	     * <ul>
	     * <li>MD5</li>
	     * <li>SHA1</li>
	     * <li>SHA224</li>
	     * <li>SHA256</li>
	     * <li>SHA384</li>
	     * <li>SHA512</li>
	     * <li>RIPEMD160</li>
	     * </ul>
	     * NOTE: Since jsrsasign 6.2.0 crypto 1.1.10, this method ignores
	     * upper or lower cases. Also any hyphens (i.e. "-") will be ignored
	     * so that "SHA1" or "SHA-1" will be acceptable.
	     * @example
	     * // for SHA1
	     * md.setAlgAndProvider('sha1', 'cryptojs');
	     * md.setAlgAndProvider('SHA1');
	     * // for RIPEMD160
	     * md.setAlgAndProvider('ripemd160', 'cryptojs');
	     */
	    this.setAlgAndProvider = function(alg, prov) {
		alg = KJUR.crypto.MessageDigest.getCanonicalAlgName(alg);

		if (alg !== null && prov === undefined) prov = KJUR.crypto.Util.DEFAULTPROVIDER[alg];

		// for cryptojs
		if (':md5:sha1:sha224:sha256:sha384:sha512:ripemd160:'.indexOf(alg) != -1 &&
		    prov == 'cryptojs') {
		    try {
			this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[alg].create();
		    } catch (ex) {
			throw "setAlgAndProvider hash alg set fail alg=" + alg + "/" + ex;
		    }
		    this.updateString = function(str) {
			this.md.update(str);
		    };
		    this.updateHex = function(hex) {
			var wHex = CryptoJS.enc.Hex.parse(hex);
			this.md.update(wHex);
		    };
		    this.digest = function() {
			var hash = this.md.finalize();
			return hash.toString(CryptoJS.enc.Hex);
		    };
		    this.digestString = function(str) {
			this.updateString(str);
			return this.digest();
		    };
		    this.digestHex = function(hex) {
			this.updateHex(hex);
			return this.digest();
		    };
		}
		if (':sha256:'.indexOf(alg) != -1 &&
		    prov == 'sjcl') {
		    try {
			this.md = new sjcl.hash.sha256();
		    } catch (ex) {
			throw "setAlgAndProvider hash alg set fail alg=" + alg + "/" + ex;
		    }
		    this.updateString = function(str) {
			this.md.update(str);
		    };
		    this.updateHex = function(hex) {
			var baHex = sjcl.codec.hex.toBits(hex);
			this.md.update(baHex);
		    };
		    this.digest = function() {
			var hash = this.md.finalize();
			return sjcl.codec.hex.fromBits(hash);
		    };
		    this.digestString = function(str) {
			this.updateString(str);
			return this.digest();
		    };
		    this.digestHex = function(hex) {
			this.updateHex(hex);
			return this.digest();
		    };
		}
	    };

	    /**
	     * update digest by specified string
	     * @name updateString
	     * @memberOf KJUR.crypto.MessageDigest#
	     * @function
	     * @param {String} str string to update
	     * @description
	     * @example
	     * md.updateString('New York');
	     */
	    this.updateString = function(str) {
		throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	    };

	    /**
	     * update digest by specified hexadecimal string
	     * @name updateHex
	     * @memberOf KJUR.crypto.MessageDigest#
	     * @function
	     * @param {String} hex hexadecimal string to update
	     * @description
	     * @example
	     * md.updateHex('0afe36');
	     */
	    this.updateHex = function(hex) {
		throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	    };

	    /**
	     * completes hash calculation and returns hash result
	     * @name digest
	     * @memberOf KJUR.crypto.MessageDigest#
	     * @function
	     * @description
	     * @example
	     * md.digest()
	     */
	    this.digest = function() {
		throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
	    };

	    /**
	     * performs final update on the digest using string, then completes the digest computation
	     * @name digestString
	     * @memberOf KJUR.crypto.MessageDigest#
	     * @function
	     * @param {String} str string to final update
	     * @description
	     * @example
	     * md.digestString('aaa')
	     */
	    this.digestString = function(str) {
		throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	    };

	    /**
	     * performs final update on the digest using hexadecimal string, then completes the digest computation
	     * @name digestHex
	     * @memberOf KJUR.crypto.MessageDigest#
	     * @function
	     * @param {String} hex hexadecimal string to final update
	     * @description
	     * @example
	     * md.digestHex('0f2abd')
	     */
	    this.digestHex = function(hex) {
		throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
	    };

	    if (params !== undefined) {
		if (params['alg'] !== undefined) {
		    this.algName = params['alg'];
		    if (params['prov'] === undefined)
			this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
		    this.setAlgAndProvider(this.algName, this.provName);
		}
	    }
	};

	/**
	 * get canonical hash algorithm name<br/>
	 * @name getCanonicalAlgName
	 * @memberOf KJUR.crypto.MessageDigest
	 * @function
	 * @param {String} alg hash algorithm name (ex. MD5, SHA-1, SHA1, SHA512 et.al.)
	 * @return {String} canonical hash algorithm name
	 * @since jsrsasign 6.2.0 crypto 1.1.10
	 * @description
	 * This static method normalizes from any hash algorithm name such as
	 * "SHA-1", "SHA1", "MD5", "sha512" to lower case name without hyphens
	 * such as "sha1".
	 * @example
	 * KJUR.crypto.MessageDigest.getCanonicalAlgName("SHA-1") &rarr "sha1"
	 * KJUR.crypto.MessageDigest.getCanonicalAlgName("MD5")   &rarr "md5"
	 */
	KJUR.crypto.MessageDigest.getCanonicalAlgName = function(alg) {
	    if (typeof alg === "string") {
		alg = alg.toLowerCase();
		alg = alg.replace(/-/, '');
	    }
	    return alg;
	};

	/**
	 * get resulted hash byte length for specified algorithm name<br/>
	 * @name getHashLength
	 * @memberOf KJUR.crypto.MessageDigest
	 * @function
	 * @param {String} alg non-canonicalized hash algorithm name (ex. MD5, SHA-1, SHA1, SHA512 et.al.)
	 * @return {Integer} resulted hash byte length
	 * @since jsrsasign 6.2.0 crypto 1.1.10
	 * @description
	 * This static method returns resulted byte length for specified algorithm name such as "SHA-1".
	 * @example
	 * KJUR.crypto.MessageDigest.getHashLength("SHA-1") &rarr 20
	 * KJUR.crypto.MessageDigest.getHashLength("sha1") &rarr 20
	 */
	KJUR.crypto.MessageDigest.getHashLength = function(alg) {
	    var MD = KJUR.crypto.MessageDigest
	    var alg2 = MD.getCanonicalAlgName(alg);
	    if (MD.HASHLENGTH[alg2] === undefined)
		throw "not supported algorithm: " + alg;
	    return MD.HASHLENGTH[alg2];
	};

	// described in KJUR.crypto.MessageDigest class (since jsrsasign 6.2.0 crypto 1.1.10)
	KJUR.crypto.MessageDigest.HASHLENGTH = {
	    'md5':		16,
	    'sha1':		20,
	    'sha224':		28,
	    'sha256':		32,
	    'sha384':		48,
	    'sha512':		64,
	    'ripemd160':	20
	};

	// === Mac ===============================================================

	/**
	 * Mac(Message Authentication Code) class which is very similar to java.security.Mac class 
	 * @name KJUR.crypto.Mac
	 * @class Mac class which is very similar to java.security.Mac class
	 * @param {Array} params parameters for constructor
	 * @description
	 * <br/>
	 * Currently this supports following algorithm and providers combination:
	 * <ul>
	 * <li>hmacmd5 - cryptojs</li>
	 * <li>hmacsha1 - cryptojs</li>
	 * <li>hmacsha224 - cryptojs</li>
	 * <li>hmacsha256 - cryptojs</li>
	 * <li>hmacsha384 - cryptojs</li>
	 * <li>hmacsha512 - cryptojs</li>
	 * </ul>
	 * NOTE: HmacSHA224 and HmacSHA384 issue was fixed since jsrsasign 4.1.4.
	 * Please use 'ext/cryptojs-312-core-fix*.js' instead of 'core.js' of original CryptoJS
	 * to avoid those issue.
	 * <br/>
	 * NOTE2: Hmac signature bug was fixed in jsrsasign 4.9.0 by providing CryptoJS
	 * bug workaround.
	 * <br/>
	 * Please see {@link KJUR.crypto.Mac.setPassword}, how to provide password
	 * in various ways in detail.
	 * @example
	 * var mac = new KJUR.crypto.Mac({alg: "HmacSHA1", "pass": "pass"});
	 * mac.updateString('aaa')
	 * var macHex = md.doFinal()
	 *
	 * // other password representation 
	 * var mac = new KJUR.crypto.Mac({alg: "HmacSHA256", "pass": {"hex":  "6161"}});
	 * var mac = new KJUR.crypto.Mac({alg: "HmacSHA256", "pass": {"utf8": "aa"}});
	 * var mac = new KJUR.crypto.Mac({alg: "HmacSHA256", "pass": {"rstr": "\x61\x61"}});
	 * var mac = new KJUR.crypto.Mac({alg: "HmacSHA256", "pass": {"b64":  "Mi02/+...a=="}});
	 * var mac = new KJUR.crypto.Mac({alg: "HmacSHA256", "pass": {"b64u": "Mi02_-...a"}});
	 */
	KJUR.crypto.Mac = function(params) {
	    var mac = null;
	    var pass = null;
	    var algName = null;
	    var provName = null;
	    var algProv = null;

	    this.setAlgAndProvider = function(alg, prov) {
		alg = alg.toLowerCase();

		if (alg == null) alg = "hmacsha1";

		alg = alg.toLowerCase();
	        if (alg.substr(0, 4) != "hmac") {
		    throw "setAlgAndProvider unsupported HMAC alg: " + alg;
		}

		if (prov === undefined) prov = KJUR.crypto.Util.DEFAULTPROVIDER[alg];
		this.algProv = alg + "/" + prov;

		var hashAlg = alg.substr(4);

		// for cryptojs
		if (':md5:sha1:sha224:sha256:sha384:sha512:ripemd160:'.indexOf(hashAlg) != -1 &&
		    prov == 'cryptojs') {
		    try {
			var mdObj = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[hashAlg];
			this.mac = CryptoJS.algo.HMAC.create(mdObj, this.pass);
		    } catch (ex) {
			throw "setAlgAndProvider hash alg set fail hashAlg=" + hashAlg + "/" + ex;
		    }
		    this.updateString = function(str) {
			this.mac.update(str);
		    };
		    this.updateHex = function(hex) {
			var wHex = CryptoJS.enc.Hex.parse(hex);
			this.mac.update(wHex);
		    };
		    this.doFinal = function() {
			var hash = this.mac.finalize();
			return hash.toString(CryptoJS.enc.Hex);
		    };
		    this.doFinalString = function(str) {
			this.updateString(str);
			return this.doFinal();
		    };
		    this.doFinalHex = function(hex) {
			this.updateHex(hex);
			return this.doFinal();
		    };
		}
	    };

	    /**
	     * update digest by specified string
	     * @name updateString
	     * @memberOf KJUR.crypto.Mac#
	     * @function
	     * @param {String} str string to update
	     * @description
	     * @example
	     * md.updateString('New York');
	     */
	    this.updateString = function(str) {
		throw "updateString(str) not supported for this alg/prov: " + this.algProv;
	    };

	    /**
	     * update digest by specified hexadecimal string
	     * @name updateHex
	     * @memberOf KJUR.crypto.Mac#
	     * @function
	     * @param {String} hex hexadecimal string to update
	     * @description
	     * @example
	     * md.updateHex('0afe36');
	     */
	    this.updateHex = function(hex) {
		throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
	    };

	    /**
	     * completes hash calculation and returns hash result
	     * @name doFinal
	     * @memberOf KJUR.crypto.Mac#
	     * @function
	     * @description
	     * @example
	     * md.digest()
	     */
	    this.doFinal = function() {
		throw "digest() not supported for this alg/prov: " + this.algProv;
	    };

	    /**
	     * performs final update on the digest using string, then completes the digest computation
	     * @name doFinalString
	     * @memberOf KJUR.crypto.Mac#
	     * @function
	     * @param {String} str string to final update
	     * @description
	     * @example
	     * md.digestString('aaa')
	     */
	    this.doFinalString = function(str) {
		throw "digestString(str) not supported for this alg/prov: " + this.algProv;
	    };

	    /**
	     * performs final update on the digest using hexadecimal string, 
	     * then completes the digest computation
	     * @name doFinalHex
	     * @memberOf KJUR.crypto.Mac#
	     * @function
	     * @param {String} hex hexadecimal string to final update
	     * @description
	     * @example
	     * md.digestHex('0f2abd')
	     */
	    this.doFinalHex = function(hex) {
		throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
	    };

	    /**
	     * set password for Mac
	     * @name setPassword
	     * @memberOf KJUR.crypto.Mac#
	     * @function
	     * @param {Object} pass password for Mac
	     * @since crypto 1.1.7 jsrsasign 4.9.0
	     * @description
	     * This method will set password for (H)Mac internally.
	     * Argument 'pass' can be specified as following:
	     * <ul>
	     * <li>even length string of 0..9, a..f or A-F: implicitly specified as hexadecimal string</li>
	     * <li>not above string: implicitly specified as raw string</li>
	     * <li>{rstr: "\x65\x70"}: explicitly specified as raw string</li>
	     * <li>{hex: "6570"}: explicitly specified as hexacedimal string</li>
	     * <li>{utf8: "秘密"}: explicitly specified as UTF8 string</li>
	     * <li>{b64: "Mi78..=="}: explicitly specified as Base64 string</li>
	     * <li>{b64u: "Mi7-_"}: explicitly specified as Base64URL string</li>
	     * </ul>
	     * It is *STRONGLY RECOMMENDED* that explicit representation of password argument
	     * to avoid ambiguity. For example string  "6161" can mean a string "6161" or 
	     * a hexadecimal string of "aa" (i.e. \x61\x61).
	     * @example
	     * mac = KJUR.crypto.Mac({'alg': 'hmacsha256'});
	     * // set password by implicit raw string
	     * mac.setPassword("\x65\x70\xb9\x0b");
	     * mac.setPassword("password");
	     * // set password by implicit hexadecimal string
	     * mac.setPassword("6570b90b");
	     * mac.setPassword("6570B90B");
	     * // set password by explicit raw string
	     * mac.setPassword({"rstr": "\x65\x70\xb9\x0b"});
	     * // set password by explicit hexadecimal string
	     * mac.setPassword({"hex": "6570b90b"});
	     * // set password by explicit utf8 string
	     * mac.setPassword({"utf8": "passwordパスワード");
	     * // set password by explicit Base64 string
	     * mac.setPassword({"b64": "Mb+c3f/=="});
	     * // set password by explicit Base64URL string
	     * mac.setPassword({"b64u": "Mb-c3f_"});
	     */
	    this.setPassword = function(pass) {
		// internal this.pass shall be CryptoJS DWord Object for CryptoJS bug
		// work around. CrytoJS HMac password can be passed by
		// raw string as described in the manual however it doesn't
		// work properly in some case. If password was passed
		// by CryptoJS DWord which is not described in the manual
		// it seems to work. (fixed since crypto 1.1.7)

		if (typeof pass == 'string') {
		    var hPass = pass;
		    if (pass.length % 2 == 1 || ! pass.match(/^[0-9A-Fa-f]+$/)) { // raw str
			hPass = rstrtohex(pass);
		    }
		    this.pass = CryptoJS.enc.Hex.parse(hPass);
		    return;
		}

		if (typeof pass != 'object')
		    throw "KJUR.crypto.Mac unsupported password type: " + pass;
		
		var hPass = null;
		if (pass.hex  !== undefined) {
		    if (pass.hex.length % 2 != 0 || ! pass.hex.match(/^[0-9A-Fa-f]+$/))
			throw "Mac: wrong hex password: " + pass.hex;
		    hPass = pass.hex;
		}
		if (pass.utf8 !== undefined) hPass = utf8tohex(pass.utf8);
		if (pass.rstr !== undefined) hPass = rstrtohex(pass.rstr);
		if (pass.b64  !== undefined) hPass = b64tohex(pass.b64);
		if (pass.b64u !== undefined) hPass = b64utohex(pass.b64u);

		if (hPass == null)
		    throw "KJUR.crypto.Mac unsupported password type: " + pass;

		this.pass = CryptoJS.enc.Hex.parse(hPass);
	    };

	    if (params !== undefined) {
		if (params.pass !== undefined) {
		    this.setPassword(params.pass);
		}
		if (params.alg !== undefined) {
		    this.algName = params.alg;
		    if (params['prov'] === undefined)
			this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
		    this.setAlgAndProvider(this.algName, this.provName);
		}
	    }
	};

	// ====== Signature class =========================================================
	/**
	 * Signature class which is very similar to java.security.Signature class
	 * @name KJUR.crypto.Signature
	 * @class Signature class which is very similar to java.security.Signature class
	 * @param {Array} params parameters for constructor
	 * @property {String} state Current state of this signature object whether 'SIGN', 'VERIFY' or null
	 * @description
	 * <br/>
	 * As for params of constructor's argument, it can be specify following attributes:
	 * <ul>
	 * <li>alg - signature algorithm name (ex. {MD5,SHA1,SHA224,SHA256,SHA384,SHA512,RIPEMD160}with{RSA,ECDSA,DSA})</li>
	 * <li>provider - currently 'cryptojs/jsrsa' only</li>
	 * </ul>
	 * <h4>SUPPORTED ALGORITHMS AND PROVIDERS</h4>
	 * This Signature class supports following signature algorithm and provider names:
	 * <ul>
	 * <li>MD5withRSA - cryptojs/jsrsa</li>
	 * <li>SHA1withRSA - cryptojs/jsrsa</li>
	 * <li>SHA224withRSA - cryptojs/jsrsa</li>
	 * <li>SHA256withRSA - cryptojs/jsrsa</li>
	 * <li>SHA384withRSA - cryptojs/jsrsa</li>
	 * <li>SHA512withRSA - cryptojs/jsrsa</li>
	 * <li>RIPEMD160withRSA - cryptojs/jsrsa</li>
	 * <li>MD5withECDSA - cryptojs/jsrsa</li>
	 * <li>SHA1withECDSA - cryptojs/jsrsa</li>
	 * <li>SHA224withECDSA - cryptojs/jsrsa</li>
	 * <li>SHA256withECDSA - cryptojs/jsrsa</li>
	 * <li>SHA384withECDSA - cryptojs/jsrsa</li>
	 * <li>SHA512withECDSA - cryptojs/jsrsa</li>
	 * <li>RIPEMD160withECDSA - cryptojs/jsrsa</li>
	 * <li>MD5withRSAandMGF1 - cryptojs/jsrsa</li>
	 * <li>SHA1withRSAandMGF1 - cryptojs/jsrsa</li>
	 * <li>SHA224withRSAandMGF1 - cryptojs/jsrsa</li>
	 * <li>SHA256withRSAandMGF1 - cryptojs/jsrsa</li>
	 * <li>SHA384withRSAandMGF1 - cryptojs/jsrsa</li>
	 * <li>SHA512withRSAandMGF1 - cryptojs/jsrsa</li>
	 * <li>RIPEMD160withRSAandMGF1 - cryptojs/jsrsa</li>
	 * <li>SHA1withDSA - cryptojs/jsrsa</li>
	 * <li>SHA224withDSA - cryptojs/jsrsa</li>
	 * <li>SHA256withDSA - cryptojs/jsrsa</li>
	 * </ul>
	 * Here are supported elliptic cryptographic curve names and their aliases for ECDSA:
	 * <ul>
	 * <li>secp256k1</li>
	 * <li>secp256r1, NIST P-256, P-256, prime256v1</li>
	 * <li>secp384r1, NIST P-384, P-384</li>
	 * </ul>
	 * NOTE1: DSA signing algorithm is also supported since crypto 1.1.5.
	 * <h4>EXAMPLES</h4>
	 * @example
	 * // RSA signature generation
	 * var sig = new KJUR.crypto.Signature({"alg": "SHA1withRSA"});
	 * sig.init(prvKeyPEM);
	 * sig.updateString('aaa');
	 * var hSigVal = sig.sign();
	 *
	 * // DSA signature validation
	 * var sig2 = new KJUR.crypto.Signature({"alg": "SHA1withDSA"});
	 * sig2.init(certPEM);
	 * sig.updateString('aaa');
	 * var isValid = sig2.verify(hSigVal);
	 * 
	 * // ECDSA signing
	 * var sig = new KJUR.crypto.Signature({'alg':'SHA1withECDSA'});
	 * sig.init(prvKeyPEM);
	 * sig.updateString('aaa');
	 * var sigValueHex = sig.sign();
	 *
	 * // ECDSA verifying
	 * var sig2 = new KJUR.crypto.Signature({'alg':'SHA1withECDSA'});
	 * sig.init(certPEM);
	 * sig.updateString('aaa');
	 * var isValid = sig.verify(sigValueHex);
	 */
	KJUR.crypto.Signature = function(params) {
	    var prvKey = null; // RSAKey/KJUR.crypto.{ECDSA,DSA} object for signing
	    var pubKey = null; // RSAKey/KJUR.crypto.{ECDSA,DSA} object for verifying

	    var md = null; // KJUR.crypto.MessageDigest object
	    var sig = null;
	    var algName = null;
	    var provName = null;
	    var algProvName = null;
	    var mdAlgName = null;
	    var pubkeyAlgName = null;	// rsa,ecdsa,rsaandmgf1(=rsapss)
	    var state = null;
	    var pssSaltLen = -1;
	    var initParams = null;

	    var sHashHex = null; // hex hash value for hex
	    var hDigestInfo = null;
	    var hPaddedDigestInfo = null;
	    var hSign = null;

	    this._setAlgNames = function() {
	    var matchResult = this.algName.match(/^(.+)with(.+)$/);
		if (matchResult) {
		    this.mdAlgName = matchResult[1].toLowerCase();
		    this.pubkeyAlgName = matchResult[2].toLowerCase();
		}
	    };

	    this._zeroPaddingOfSignature = function(hex, bitLength) {
		var s = "";
		var nZero = bitLength / 4 - hex.length;
		for (var i = 0; i < nZero; i++) {
		    s = s + "0";
		}
		return s + hex;
	    };

	    /**
	     * set signature algorithm and provider
	     * @name setAlgAndProvider
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {String} alg signature algorithm name
	     * @param {String} prov provider name
	     * @description
	     * @example
	     * md.setAlgAndProvider('SHA1withRSA', 'cryptojs/jsrsa');
	     */
	    this.setAlgAndProvider = function(alg, prov) {
		this._setAlgNames();
		if (prov != 'cryptojs/jsrsa')
		    throw "provider not supported: " + prov;

		if (':md5:sha1:sha224:sha256:sha384:sha512:ripemd160:'.indexOf(this.mdAlgName) != -1) {
		    try {
			this.md = new KJUR.crypto.MessageDigest({'alg':this.mdAlgName});
		    } catch (ex) {
			throw "setAlgAndProvider hash alg set fail alg=" +
	                      this.mdAlgName + "/" + ex;
		    }

		    this.init = function(keyparam, pass) {
			var keyObj = null;
			try {
			    if (pass === undefined) {
				keyObj = KEYUTIL.getKey(keyparam);
			    } else {
				keyObj = KEYUTIL.getKey(keyparam, pass);
			    }
			} catch (ex) {
			    throw "init failed:" + ex;
			}

			if (keyObj.isPrivate === true) {
			    this.prvKey = keyObj;
			    this.state = "SIGN";
			} else if (keyObj.isPublic === true) {
			    this.pubKey = keyObj;
			    this.state = "VERIFY";
			} else {
			    throw "init failed.:" + keyObj;
			}
		    };

		    this.initSign = function(params) {
			if (typeof params['ecprvhex'] == 'string' &&
	                    typeof params['eccurvename'] == 'string') {
			    this.ecprvhex = params['ecprvhex'];
			    this.eccurvename = params['eccurvename'];
			} else {
			    this.prvKey = params;
			}
			this.state = "SIGN";
		    };

		    this.initVerifyByPublicKey = function(params) {
			if (typeof params['ecpubhex'] == 'string' &&
			    typeof params['eccurvename'] == 'string') {
			    this.ecpubhex = params['ecpubhex'];
			    this.eccurvename = params['eccurvename'];
			} else if (params instanceof KJUR.crypto.ECDSA) {
			    this.pubKey = params;
			} else if (params instanceof RSAKey) {
			    this.pubKey = params;
			}
			this.state = "VERIFY";
		    };

		    this.initVerifyByCertificatePEM = function(certPEM) {
			var x509 = new X509();
			x509.readCertPEM(certPEM);
			this.pubKey = x509.subjectPublicKeyRSA;
			this.state = "VERIFY";
		    };

		    this.updateString = function(str) {
			this.md.updateString(str);
		    };

		    this.updateHex = function(hex) {
			this.md.updateHex(hex);
		    };

		    this.sign = function() {
			this.sHashHex = this.md.digest();
			if (typeof this.ecprvhex != "undefined" &&
			    typeof this.eccurvename != "undefined") {
			    var ec = new KJUR.crypto.ECDSA({'curve': this.eccurvename});
			    this.hSign = ec.signHex(this.sHashHex, this.ecprvhex);
			} else if (this.prvKey instanceof RSAKey &&
			           this.pubkeyAlgName == "rsaandmgf1") {
			    this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex,
									    this.mdAlgName,
									    this.pssSaltLen);
			} else if (this.prvKey instanceof RSAKey &&
				   this.pubkeyAlgName == "rsa") {
			    this.hSign = this.prvKey.signWithMessageHash(this.sHashHex,
									 this.mdAlgName);
			} else if (this.prvKey instanceof KJUR.crypto.ECDSA) {
			    this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
			} else if (this.prvKey instanceof KJUR.crypto.DSA) {
			    this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
			} else {
			    throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
			}
			return this.hSign;
		    };
		    this.signString = function(str) {
			this.updateString(str);
			return this.sign();
		    };
		    this.signHex = function(hex) {
			this.updateHex(hex);
			return this.sign();
		    };
		    this.verify = function(hSigVal) {
		        this.sHashHex = this.md.digest();
			if (typeof this.ecpubhex != "undefined" &&
			    typeof this.eccurvename != "undefined") {
			    var ec = new KJUR.crypto.ECDSA({curve: this.eccurvename});
			    return ec.verifyHex(this.sHashHex, hSigVal, this.ecpubhex);
			} else if (this.pubKey instanceof RSAKey &&
				   this.pubkeyAlgName == "rsaandmgf1") {
			    return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, hSigVal, 
									this.mdAlgName,
									this.pssSaltLen);
			} else if (this.pubKey instanceof RSAKey &&
				   this.pubkeyAlgName == "rsa") {
			    return this.pubKey.verifyWithMessageHash(this.sHashHex, hSigVal);
			} else if (this.pubKey instanceof KJUR.crypto.ECDSA) {
			    return this.pubKey.verifyWithMessageHash(this.sHashHex, hSigVal);
			} else if (this.pubKey instanceof KJUR.crypto.DSA) {
			    return this.pubKey.verifyWithMessageHash(this.sHashHex, hSigVal);
			} else {
			    throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
			}
		    };
		}
	    };

	    /**
	     * Initialize this object for signing or verifying depends on key
	     * @name init
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {Object} key specifying public or private key as plain/encrypted PKCS#5/8 PEM file, certificate PEM or {@link RSAKey}, {@link KJUR.crypto.DSA} or {@link KJUR.crypto.ECDSA} object
	     * @param {String} pass (OPTION) passcode for encrypted private key
	     * @since crypto 1.1.3
	     * @description
	     * This method is very useful initialize method for Signature class since
	     * you just specify key then this method will automatically initialize it
	     * using {@link KEYUTIL.getKey} method.
	     * As for 'key',  following argument type are supported:
	     * <h5>signing</h5>
	     * <ul>
	     * <li>PEM formatted PKCS#8 encrypted RSA/ECDSA private key concluding "BEGIN ENCRYPTED PRIVATE KEY"</li>
	     * <li>PEM formatted PKCS#5 encrypted RSA/DSA private key concluding "BEGIN RSA/DSA PRIVATE KEY" and ",ENCRYPTED"</li>
	     * <li>PEM formatted PKCS#8 plain RSA/ECDSA private key concluding "BEGIN PRIVATE KEY"</li>
	     * <li>PEM formatted PKCS#5 plain RSA/DSA private key concluding "BEGIN RSA/DSA PRIVATE KEY" without ",ENCRYPTED"</li>
	     * <li>RSAKey object of private key</li>
	     * <li>KJUR.crypto.ECDSA object of private key</li>
	     * <li>KJUR.crypto.DSA object of private key</li>
	     * </ul>
	     * <h5>verification</h5>
	     * <ul>
	     * <li>PEM formatted PKCS#8 RSA/EC/DSA public key concluding "BEGIN PUBLIC KEY"</li>
	     * <li>PEM formatted X.509 certificate with RSA/EC/DSA public key concluding
	     *     "BEGIN CERTIFICATE", "BEGIN X509 CERTIFICATE" or "BEGIN TRUSTED CERTIFICATE".</li>
	     * <li>RSAKey object of public key</li>
	     * <li>KJUR.crypto.ECDSA object of public key</li>
	     * <li>KJUR.crypto.DSA object of public key</li>
	     * </ul>
	     * @example
	     * sig.init(sCertPEM)
	     */
	    this.init = function(key, pass) {
		throw "init(key, pass) not supported for this alg:prov=" +
		      this.algProvName;
	    };

	    /**
	     * Initialize this object for verifying with a public key
	     * @name initVerifyByPublicKey
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {Object} param RSAKey object of public key or associative array for ECDSA
	     * @since 1.0.2
	     * @deprecated from crypto 1.1.5. please use init() method instead.
	     * @description
	     * Public key information will be provided as 'param' parameter and the value will be
	     * following:
	     * <ul>
	     * <li>{@link RSAKey} object for RSA verification</li>
	     * <li>associative array for ECDSA verification
	     *     (ex. <code>{'ecpubhex': '041f..', 'eccurvename': 'secp256r1'}</code>)
	     * </li>
	     * </ul>
	     * @example
	     * sig.initVerifyByPublicKey(rsaPrvKey)
	     */
	    this.initVerifyByPublicKey = function(rsaPubKey) {
		throw "initVerifyByPublicKey(rsaPubKeyy) not supported for this alg:prov=" +
		      this.algProvName;
	    };

	    /**
	     * Initialize this object for verifying with a certficate
	     * @name initVerifyByCertificatePEM
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {String} certPEM PEM formatted string of certificate
	     * @since 1.0.2
	     * @deprecated from crypto 1.1.5. please use init() method instead.
	     * @description
	     * @example
	     * sig.initVerifyByCertificatePEM(certPEM)
	     */
	    this.initVerifyByCertificatePEM = function(certPEM) {
		throw "initVerifyByCertificatePEM(certPEM) not supported for this alg:prov=" +
		    this.algProvName;
	    };

	    /**
	     * Initialize this object for signing
	     * @name initSign
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {Object} param RSAKey object of public key or associative array for ECDSA
	     * @deprecated from crypto 1.1.5. please use init() method instead.
	     * @description
	     * Private key information will be provided as 'param' parameter and the value will be
	     * following:
	     * <ul>
	     * <li>{@link RSAKey} object for RSA signing</li>
	     * <li>associative array for ECDSA signing
	     *     (ex. <code>{'ecprvhex': '1d3f..', 'eccurvename': 'secp256r1'}</code>)</li>
	     * </ul>
	     * @example
	     * sig.initSign(prvKey)
	     */
	    this.initSign = function(prvKey) {
		throw "initSign(prvKey) not supported for this alg:prov=" + this.algProvName;
	    };

	    /**
	     * Updates the data to be signed or verified by a string
	     * @name updateString
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {String} str string to use for the update
	     * @description
	     * @example
	     * sig.updateString('aaa')
	     */
	    this.updateString = function(str) {
		throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
	    };

	    /**
	     * Updates the data to be signed or verified by a hexadecimal string
	     * @name updateHex
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {String} hex hexadecimal string to use for the update
	     * @description
	     * @example
	     * sig.updateHex('1f2f3f')
	     */
	    this.updateHex = function(hex) {
		throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
	    };

	    /**
	     * Returns the signature bytes of all data updates as a hexadecimal string
	     * @name sign
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @return the signature bytes as a hexadecimal string
	     * @description
	     * @example
	     * var hSigValue = sig.sign()
	     */
	    this.sign = function() {
		throw "sign() not supported for this alg:prov=" + this.algProvName;
	    };

	    /**
	     * performs final update on the sign using string, then returns the signature bytes of all data updates as a hexadecimal string
	     * @name signString
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {String} str string to final update
	     * @return the signature bytes of a hexadecimal string
	     * @description
	     * @example
	     * var hSigValue = sig.signString('aaa')
	     */
	    this.signString = function(str) {
		throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
	    };

	    /**
	     * performs final update on the sign using hexadecimal string, then returns the signature bytes of all data updates as a hexadecimal string
	     * @name signHex
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {String} hex hexadecimal string to final update
	     * @return the signature bytes of a hexadecimal string
	     * @description
	     * @example
	     * var hSigValue = sig.signHex('1fdc33')
	     */
	    this.signHex = function(hex) {
		throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
	    };

	    /**
	     * verifies the passed-in signature.
	     * @name verify
	     * @memberOf KJUR.crypto.Signature#
	     * @function
	     * @param {String} str string to final update
	     * @return {Boolean} true if the signature was verified, otherwise false
	     * @description
	     * @example
	     * var isValid = sig.verify('1fbcefdca4823a7(snip)')
	     */
	    this.verify = function(hSigVal) {
		throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
	    };

	    this.initParams = params;

	    if (params !== undefined) {
		if (params['alg'] !== undefined) {
		    this.algName = params['alg'];
		    if (params['prov'] === undefined) {
			this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
		    } else {
			this.provName = params['prov'];
		    }
		    this.algProvName = this.algName + ":" + this.provName;
		    this.setAlgAndProvider(this.algName, this.provName);
		    this._setAlgNames();
		}

		if (params['psssaltlen'] !== undefined) this.pssSaltLen = params['psssaltlen'];

		if (params['prvkeypem'] !== undefined) {
		    if (params['prvkeypas'] !== undefined) {
			throw "both prvkeypem and prvkeypas parameters not supported";
		    } else {
			try {
			    var prvKey = new RSAKey();
			    prvKey.readPrivateKeyFromPEMString(params['prvkeypem']);
			    this.initSign(prvKey);
			} catch (ex) {
			    throw "fatal error to load pem private key: " + ex;
			}
		    }
		}
	    }
	};

	// ====== Cipher class ============================================================
	/**
	 * Cipher class to encrypt and decrypt data<br/>
	 * @name KJUR.crypto.Cipher
	 * @class Cipher class to encrypt and decrypt data<br/>
	 * @param {Array} params parameters for constructor
	 * @since jsrsasign 6.2.0 crypto 1.1.10
	 * @description
	 * Here is supported canonicalized cipher algorithm names and its standard names:
	 * <ul>
	 * <li>RSA - RSA/ECB/PKCS1Padding (default for RSAKey)</li>
	 * <li>RSAOAEP - RSA/ECB/OAEPWithSHA-1AndMGF1Padding</li>
	 * <li>RSAOAEP224 - RSA/ECB/OAEPWithSHA-224AndMGF1Padding(*)</li>
	 * <li>RSAOAEP256 - RSA/ECB/OAEPWithSHA-256AndMGF1Padding</li>
	 * <li>RSAOAEP384 - RSA/ECB/OAEPWithSHA-384AndMGF1Padding(*)</li>
	 * <li>RSAOAEP512 - RSA/ECB/OAEPWithSHA-512AndMGF1Padding(*)</li>
	 * </ul>
	 * NOTE: (*) is not supported in Java JCE.<br/>
	 * Currently this class supports only RSA encryption and decryption. 
	 * However it is planning to implement also symmetric ciphers near in the future.
	 * @example
	 */
	KJUR.crypto.Cipher = function(params) {
	};

	/**
	 * encrypt raw string by specified key and algorithm<br/>
	 * @name encrypt
	 * @memberOf KJUR.crypto.Cipher
	 * @function
	 * @param {String} s input string to encrypt
	 * @param {Object} keyObj RSAKey object or hexadecimal string of symmetric cipher key
	 * @param {String} algName short/long algorithm name for encryption/decryption
	 * @return {String} hexadecimal encrypted string
	 * @since jsrsasign 6.2.0 crypto 1.1.10
	 * @description
	 * This static method encrypts raw string with specified key and algorithm.
	 * @example 
	 * KJUR.crypto.Cipher.encrypt("aaa", pubRSAKeyObj) &rarr; "1abc2d..."
	 * KJUR.crypto.Cipher.encrypt("aaa", pubRSAKeyObj, "RSAOAEP) &rarr; "23ab02..."
	 */
	KJUR.crypto.Cipher.encrypt = function(s, keyObj, algName) {
	    if (keyObj instanceof RSAKey && keyObj.isPublic) {
		var algName2 = KJUR.crypto.Cipher.getAlgByKeyAndName(keyObj, algName);
		if (algName2 === "RSA") return keyObj.encrypt(s);
		if (algName2 === "RSAOAEP") return keyObj.encryptOAEP(s, "sha1");

		var a = algName2.match(/^RSAOAEP(\d+)$/);
		if (a !== null) return keyObj.encryptOAEP(s, "sha" + a[1]);

		throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + algName;
	    } else {
		throw "Cipher.encrypt: unsupported key or algorithm";
	    }
	};

	/**
	 * decrypt encrypted hexadecimal string with specified key and algorithm<br/>
	 * @name decrypt
	 * @memberOf KJUR.crypto.Cipher
	 * @function
	 * @param {String} hex hexadecial string of encrypted message
	 * @param {Object} keyObj RSAKey object or hexadecimal string of symmetric cipher key
	 * @param {String} algName short/long algorithm name for encryption/decryption
	 * @return {String} hexadecimal encrypted string
	 * @since jsrsasign 6.2.0 crypto 1.1.10
	 * @description
	 * This static method decrypts encrypted hexadecimal string with specified key and algorithm.
	 * @example 
	 * KJUR.crypto.Cipher.decrypt("aaa", prvRSAKeyObj) &rarr; "1abc2d..."
	 * KJUR.crypto.Cipher.decrypt("aaa", prvRSAKeyObj, "RSAOAEP) &rarr; "23ab02..."
	 */
	KJUR.crypto.Cipher.decrypt = function(hex, keyObj, algName) {
	    if (keyObj instanceof RSAKey && keyObj.isPrivate) {
		var algName2 = KJUR.crypto.Cipher.getAlgByKeyAndName(keyObj, algName);
		if (algName2 === "RSA") return keyObj.decrypt(hex);
		if (algName2 === "RSAOAEP") return keyObj.decryptOAEP(hex, "sha1");

		var a = algName2.match(/^RSAOAEP(\d+)$/);
		if (a !== null) return keyObj.decryptOAEP(hex, "sha" + a[1]);

		throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + algName;
	    } else {
		throw "Cipher.decrypt: unsupported key or algorithm";
	    }
	};

	/**
	 * get canonicalized encrypt/decrypt algorithm name by key and short/long algorithm name<br/>
	 * @name getAlgByKeyAndName
	 * @memberOf KJUR.crypto.Cipher
	 * @function
	 * @param {Object} keyObj RSAKey object or hexadecimal string of symmetric cipher key
	 * @param {String} algName short/long algorithm name for encryption/decryption
	 * @return {String} canonicalized algorithm name for encryption/decryption
	 * @since jsrsasign 6.2.0 crypto 1.1.10
	 * @description
	 * Here is supported canonicalized cipher algorithm names and its standard names:
	 * <ul>
	 * <li>RSA - RSA/ECB/PKCS1Padding (default for RSAKey)</li>
	 * <li>RSAOAEP - RSA/ECB/OAEPWithSHA-1AndMGF1Padding</li>
	 * <li>RSAOAEP224 - RSA/ECB/OAEPWithSHA-224AndMGF1Padding(*)</li>
	 * <li>RSAOAEP256 - RSA/ECB/OAEPWithSHA-256AndMGF1Padding</li>
	 * <li>RSAOAEP384 - RSA/ECB/OAEPWithSHA-384AndMGF1Padding(*)</li>
	 * <li>RSAOAEP512 - RSA/ECB/OAEPWithSHA-512AndMGF1Padding(*)</li>
	 * </ul>
	 * NOTE: (*) is not supported in Java JCE.
	 * @example 
	 * KJUR.crypto.Cipher.getAlgByKeyAndName(objRSAKey) &rarr; "RSA"
	 * KJUR.crypto.Cipher.getAlgByKeyAndName(objRSAKey, "RSAOAEP") &rarr; "RSAOAEP"
	 */
	KJUR.crypto.Cipher.getAlgByKeyAndName = function(keyObj, algName) {
	    if (keyObj instanceof RSAKey) {
		if (":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(algName) != -1)
		    return algName;
		if (algName === null || algName === undefined) return "RSA";
		throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + algName;
	    }
	    throw "getAlgByKeyAndName: not supported algorithm name: " + algName;
	}

	// ====== Other Utility class =====================================================

	/**
	 * static object for cryptographic function utilities
	 * @name KJUR.crypto.OID
	 * @class static object for cryptography related OIDs
	 * @property {Array} oidhex2name key value of hexadecimal OID and its name
	 *           (ex. '2a8648ce3d030107' and 'secp256r1')
	 * @since crypto 1.1.3
	 * @description
	 */
	KJUR.crypto.OID = new function() {
	    this.oidhex2name = {
		'2a864886f70d010101': 'rsaEncryption',
		'2a8648ce3d0201': 'ecPublicKey',
		'2a8648ce380401': 'dsa',
		'2a8648ce3d030107': 'secp256r1',
		'2b8104001f': 'secp192k1',
		'2b81040021': 'secp224r1',
		'2b8104000a': 'secp256k1',
		'2b81040023': 'secp521r1',
		'2b81040022': 'secp384r1',
		'2a8648ce380403': 'SHA1withDSA', // 1.2.840.10040.4.3
		'608648016503040301': 'SHA224withDSA', // 2.16.840.1.101.3.4.3.1
		'608648016503040302': 'SHA256withDSA', // 2.16.840.1.101.3.4.3.2
	    };
	};

	/*! rsasign-1.2.7.js (c) 2012 Kenji Urushima | kjur.github.com/jsrsasign/license
	 */
	/*
	 * rsa-sign.js - adding signing functions to RSAKey class.
	 *
	 * version: 1.2.7 (2013 Aug 25)
	 *
	 * Copyright (c) 2010-2013 Kenji Urushima (kenji.urushima@gmail.com)
	 *
	 * This software is licensed under the terms of the MIT License.
	 * http://kjur.github.com/jsrsasign/license/
	 *
	 * The above copyright and license notice shall be 
	 * included in all copies or substantial portions of the Software.
	 */

	/**
	 * @fileOverview
	 * @name rsasign-1.2.js
	 * @author Kenji Urushima kenji.urushima@gmail.com
	 * @version rsasign 1.2.7
	 * @license <a href="http://kjur.github.io/jsrsasign/license/">MIT License</a>
	 */

	var _RE_HEXDECONLY = new RegExp("");
	_RE_HEXDECONLY.compile("[^0-9a-f]", "gi");

	// ========================================================================
	// Signature Generation
	// ========================================================================

	function _rsasign_getHexPaddedDigestInfoForString(s, keySize, hashAlg) {
	    var hashFunc = function(s) { return KJUR.crypto.Util.hashString(s, hashAlg); };
	    var sHashHex = hashFunc(s);

	    return KJUR.crypto.Util.getPaddedDigestInfoHex(sHashHex, hashAlg, keySize);
	}

	function _zeroPaddingOfSignature(hex, bitLength) {
	    var s = "";
	    var nZero = bitLength / 4 - hex.length;
	    for (var i = 0; i < nZero; i++) {
		s = s + "0";
	    }
	    return s + hex;
	}

	/**
	 * sign for a message string with RSA private key.<br/>
	 * @name signString
	 * @memberOf RSAKey
	 * @function
	 * @param {String} s message string to be signed.
	 * @param {String} hashAlg hash algorithm name for signing.<br/>
	 * @return returns hexadecimal string of signature value.
	 */
	function _rsasign_signString(s, hashAlg) {
	    var hashFunc = function(s) { return KJUR.crypto.Util.hashString(s, hashAlg); };
	    var sHashHex = hashFunc(s);

	    return this.signWithMessageHash(sHashHex, hashAlg);
	}

	/**
	 * sign hash value of message to be signed with RSA private key.<br/>
	 * @name signWithMessageHash
	 * @memberOf RSAKey
	 * @function
	 * @param {String} sHashHex hexadecimal string of hash value of message to be signed.
	 * @param {String} hashAlg hash algorithm name for signing.<br/>
	 * @return returns hexadecimal string of signature value.
	 * @since rsasign 1.2.6
	 */
	function _rsasign_signWithMessageHash(sHashHex, hashAlg) {
	    var hPM = KJUR.crypto.Util.getPaddedDigestInfoHex(sHashHex, hashAlg, this.n.bitLength());
	    var biPaddedMessage = parseBigInt(hPM, 16);
	    var biSign = this.doPrivate(biPaddedMessage);
	    var hexSign = biSign.toString(16);
	    return _zeroPaddingOfSignature(hexSign, this.n.bitLength());
	}

	function _rsasign_signStringWithSHA1(s) {
	    return _rsasign_signString.call(this, s, 'sha1');
	}

	function _rsasign_signStringWithSHA256(s) {
	    return _rsasign_signString.call(this, s, 'sha256');
	}

	// PKCS#1 (PSS) mask generation function
	function pss_mgf1_str(seed, len, hash) {
	    var mask = '', i = 0;

	    while (mask.length < len) {
	        mask += hextorstr(hash(rstrtohex(seed + String.fromCharCode.apply(String, [
	                (i & 0xff000000) >> 24,
	                (i & 0x00ff0000) >> 16,
	                (i & 0x0000ff00) >> 8,
	                i & 0x000000ff]))));
	        i += 1;
	    }

	    return mask;
	}

	/**
	 * sign for a message string with RSA private key by PKCS#1 PSS signing.<br/>
	 * @name signStringPSS
	 * @memberOf RSAKey
	 * @function
	 * @param {String} s message string to be signed.
	 * @param {String} hashAlg hash algorithm name for signing.
	 * @param {Integer} sLen salt byte length from 0 to (keybytelen - hashbytelen - 2).
	 *        There are two special values:
	 *        <ul>
	 *        <li>-1: sets the salt length to the digest length</li>
	 *        <li>-2: sets the salt length to maximum permissible value
	 *           (i.e. keybytelen - hashbytelen - 2)</li>
	 *        </ul>
	 *        DEFAULT is -1. (NOTE: OpenSSL's default is -2.)
	 * @return returns hexadecimal string of signature value.
	 */
	function _rsasign_signStringPSS(s, hashAlg, sLen) {
	    var hashFunc = function(sHex) { return KJUR.crypto.Util.hashHex(sHex, hashAlg); } 
	    var hHash = hashFunc(rstrtohex(s));

	    if (sLen === undefined) sLen = -1;
	    return this.signWithMessageHashPSS(hHash, hashAlg, sLen);
	}

	/**
	 * sign hash value of message with RSA private key by PKCS#1 PSS signing.<br/>
	 * @name signWithMessageHashPSS
	 * @memberOf RSAKey
	 * @function
	 * @param {String} hHash hexadecimal hash value of message to be signed.
	 * @param {String} hashAlg hash algorithm name for signing.
	 * @param {Integer} sLen salt byte length from 0 to (keybytelen - hashbytelen - 2).
	 *        There are two special values:
	 *        <ul>
	 *        <li>-1: sets the salt length to the digest length</li>
	 *        <li>-2: sets the salt length to maximum permissible value
	 *           (i.e. keybytelen - hashbytelen - 2)</li>
	 *        </ul>
	 *        DEFAULT is -1. (NOTE: OpenSSL's default is -2.)
	 * @return returns hexadecimal string of signature value.
	 * @since rsasign 1.2.6
	 */
	function _rsasign_signWithMessageHashPSS(hHash, hashAlg, sLen) {
	    var mHash = hextorstr(hHash);
	    var hLen = mHash.length;
	    var emBits = this.n.bitLength() - 1;
	    var emLen = Math.ceil(emBits / 8);
	    var i;
	    var hashFunc = function(sHex) { return KJUR.crypto.Util.hashHex(sHex, hashAlg); } 

	    if (sLen === -1 || sLen === undefined) {
	        sLen = hLen; // same as hash length
	    } else if (sLen === -2) {
	        sLen = emLen - hLen - 2; // maximum
	    } else if (sLen < -2) {
	        throw "invalid salt length";
	    }

	    if (emLen < (hLen + sLen + 2)) {
	        throw "data too long";
	    }

	    var salt = '';

	    if (sLen > 0) {
	        salt = new Array(sLen);
	        new SecureRandom().nextBytes(salt);
	        salt = String.fromCharCode.apply(String, salt);
	    }

	    var H = hextorstr(hashFunc(rstrtohex('\x00\x00\x00\x00\x00\x00\x00\x00' + mHash + salt)));
	    var PS = [];

	    for (i = 0; i < emLen - sLen - hLen - 2; i += 1) {
	        PS[i] = 0x00;
	    }

	    var DB = String.fromCharCode.apply(String, PS) + '\x01' + salt;
	    var dbMask = pss_mgf1_str(H, DB.length, hashFunc);
	    var maskedDB = [];

	    for (i = 0; i < DB.length; i += 1) {
	        maskedDB[i] = DB.charCodeAt(i) ^ dbMask.charCodeAt(i);
	    }

	    var mask = (0xff00 >> (8 * emLen - emBits)) & 0xff;
	    maskedDB[0] &= ~mask;

	    for (i = 0; i < hLen; i++) {
	        maskedDB.push(H.charCodeAt(i));
	    }

	    maskedDB.push(0xbc);

	    return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(maskedDB)).toString(16),
					   this.n.bitLength());
	}

	// ========================================================================
	// Signature Verification
	// ========================================================================

	function _rsasign_getDecryptSignatureBI(biSig, hN, hE) {
	    var rsa = new RSAKey();
	    rsa.setPublic(hN, hE);
	    var biDecryptedSig = rsa.doPublic(biSig);
	    return biDecryptedSig;
	}

	function _rsasign_getHexDigestInfoFromSig(biSig, hN, hE) {
	    var biDecryptedSig = _rsasign_getDecryptSignatureBI(biSig, hN, hE);
	    var hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '');
	    return hDigestInfo;
	}

	function _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo) {
	    for (var algName in KJUR.crypto.Util.DIGESTINFOHEAD) {
		var head = KJUR.crypto.Util.DIGESTINFOHEAD[algName];
		var len = head.length;
		if (hDigestInfo.substring(0, len) == head) {
		    var a = [algName, hDigestInfo.substring(len)];
		    return a;
		}
	    }
	    return [];
	}

	function _rsasign_verifySignatureWithArgs(sMsg, biSig, hN, hE) {
	    var hDigestInfo = _rsasign_getHexDigestInfoFromSig(biSig, hN, hE);
	    var digestInfoAry = _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo);
	    if (digestInfoAry.length == 0) return false;
	    var algName = digestInfoAry[0];
	    var diHashValue = digestInfoAry[1];
	    var ff = function(s) { return KJUR.crypto.Util.hashString(s, algName); };
	    var msgHashValue = ff(sMsg);
	    return (diHashValue == msgHashValue);
	}

	function _rsasign_verifyHexSignatureForMessage(hSig, sMsg) {
	    var biSig = parseBigInt(hSig, 16);
	    var result = _rsasign_verifySignatureWithArgs(sMsg, biSig,
							  this.n.toString(16),
							  this.e.toString(16));
	    return result;
	}

	/**
	 * verifies a sigature for a message string with RSA public key.<br/>
	 * @name verifyString
	 * @memberOf RSAKey#
	 * @function
	 * @param {String} sMsg message string to be verified.
	 * @param {String} hSig hexadecimal string of siganture.<br/>
	 *                 non-hexadecimal charactors including new lines will be ignored.
	 * @return returns 1 if valid, otherwise 0
	 */
	function _rsasign_verifyString(sMsg, hSig) {
	    hSig = hSig.replace(_RE_HEXDECONLY, '');
	    hSig = hSig.replace(/[ \n]+/g, "");
	    var biSig = parseBigInt(hSig, 16);
	    if (biSig.bitLength() > this.n.bitLength()) return 0;
	    var biDecryptedSig = this.doPublic(biSig);
	    var hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '');
	    var digestInfoAry = _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo);
	  
	    if (digestInfoAry.length == 0) return false;
	    var algName = digestInfoAry[0];
	    var diHashValue = digestInfoAry[1];
	    var ff = function(s) { return KJUR.crypto.Util.hashString(s, algName); };
	    var msgHashValue = ff(sMsg);
	    return (diHashValue == msgHashValue);
	}

	/**
	 * verifies a sigature for a message string with RSA public key.<br/>
	 * @name verifyWithMessageHash
	 * @memberOf RSAKey
	 * @function
	 * @param {String} sHashHex hexadecimal hash value of message to be verified.
	 * @param {String} hSig hexadecimal string of siganture.<br/>
	 *                 non-hexadecimal charactors including new lines will be ignored.
	 * @return returns 1 if valid, otherwise 0
	 * @since rsasign 1.2.6
	 */
	function _rsasign_verifyWithMessageHash(sHashHex, hSig) {
	    hSig = hSig.replace(_RE_HEXDECONLY, '');
	    hSig = hSig.replace(/[ \n]+/g, "");
	    var biSig = parseBigInt(hSig, 16);
	    if (biSig.bitLength() > this.n.bitLength()) return 0;
	    var biDecryptedSig = this.doPublic(biSig);
	    var hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '');
	    var digestInfoAry = _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo);
	  
	    if (digestInfoAry.length == 0) return false;
	    var algName = digestInfoAry[0];
	    var diHashValue = digestInfoAry[1];
	    return (diHashValue == sHashHex);
	}

	/**
	 * verifies a sigature for a message string with RSA public key by PKCS#1 PSS sign.<br/>
	 * @name verifyStringPSS
	 * @memberOf RSAKey
	 * @function
	 * @param {String} sMsg message string to be verified.
	 * @param {String} hSig hexadecimal string of signature value
	 * @param {String} hashAlg hash algorithm name
	 * @param {Integer} sLen salt byte length from 0 to (keybytelen - hashbytelen - 2).
	 *        There are two special values:
	 *        <ul>
	 *        <li>-1: sets the salt length to the digest length</li>
	 *        <li>-2: sets the salt length to maximum permissible value
	 *           (i.e. keybytelen - hashbytelen - 2)</li>
	 *        </ul>
	 *        DEFAULT is -1. (NOTE: OpenSSL's default is -2.)
	 * @return returns true if valid, otherwise false
	 */
	function _rsasign_verifyStringPSS(sMsg, hSig, hashAlg, sLen) {
	    var hashFunc = function(sHex) { return KJUR.crypto.Util.hashHex(sHex, hashAlg); };
	    var hHash = hashFunc(rstrtohex(sMsg));

	    if (sLen === undefined) sLen = -1;
	    return this.verifyWithMessageHashPSS(hHash, hSig, hashAlg, sLen);
	}

	/**
	 * verifies a sigature for a hash value of message string with RSA public key by PKCS#1 PSS sign.<br/>
	 * @name verifyWithMessageHashPSS
	 * @memberOf RSAKey
	 * @function
	 * @param {String} hHash hexadecimal hash value of message string to be verified.
	 * @param {String} hSig hexadecimal string of signature value
	 * @param {String} hashAlg hash algorithm name
	 * @param {Integer} sLen salt byte length from 0 to (keybytelen - hashbytelen - 2).
	 *        There are two special values:
	 *        <ul>
	 *        <li>-1: sets the salt length to the digest length</li>
	 *        <li>-2: sets the salt length to maximum permissible value
	 *           (i.e. keybytelen - hashbytelen - 2)</li>
	 *        </ul>
	 *        DEFAULT is -1 (NOTE: OpenSSL's default is -2.)
	 * @return returns true if valid, otherwise false
	 * @since rsasign 1.2.6
	 */
	function _rsasign_verifyWithMessageHashPSS(hHash, hSig, hashAlg, sLen) {
	    var biSig = new BigInteger(hSig, 16);

	    if (biSig.bitLength() > this.n.bitLength()) {
	        return false;
	    }

	    var hashFunc = function(sHex) { return KJUR.crypto.Util.hashHex(sHex, hashAlg); };
	    var mHash = hextorstr(hHash);
	    var hLen = mHash.length;
	    var emBits = this.n.bitLength() - 1;
	    var emLen = Math.ceil(emBits / 8);
	    var i;

	    if (sLen === -1 || sLen === undefined) {
	        sLen = hLen; // same as hash length
	    } else if (sLen === -2) {
	        sLen = emLen - hLen - 2; // recover
	    } else if (sLen < -2) {
	        throw "invalid salt length";
	    }

	    if (emLen < (hLen + sLen + 2)) {
	        throw "data too long";
	    }

	    var em = this.doPublic(biSig).toByteArray();

	    for (i = 0; i < em.length; i += 1) {
	        em[i] &= 0xff;
	    }

	    while (em.length < emLen) {
	        em.unshift(0);
	    }

	    if (em[emLen -1] !== 0xbc) {
	        throw "encoded message does not end in 0xbc";
	    }

	    em = String.fromCharCode.apply(String, em);

	    var maskedDB = em.substr(0, emLen - hLen - 1);
	    var H = em.substr(maskedDB.length, hLen);

	    var mask = (0xff00 >> (8 * emLen - emBits)) & 0xff;

	    if ((maskedDB.charCodeAt(0) & mask) !== 0) {
	        throw "bits beyond keysize not zero";
	    }

	    var dbMask = pss_mgf1_str(H, maskedDB.length, hashFunc);
	    var DB = [];

	    for (i = 0; i < maskedDB.length; i += 1) {
	        DB[i] = maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i);
	    }

	    DB[0] &= ~mask;

	    var checkLen = emLen - hLen - sLen - 2;

	    for (i = 0; i < checkLen; i += 1) {
	        if (DB[i] !== 0x00) {
	            throw "leftmost octets not zero";
	        }
	    }

	    if (DB[checkLen] !== 0x01) {
	        throw "0x01 marker not found";
	    }

	    return H === hextorstr(hashFunc(rstrtohex('\x00\x00\x00\x00\x00\x00\x00\x00' + mHash +
					     String.fromCharCode.apply(String, DB.slice(-sLen)))));
	}

	RSAKey.prototype.signWithMessageHash = _rsasign_signWithMessageHash;
	RSAKey.prototype.signString = _rsasign_signString;
	RSAKey.prototype.signStringWithSHA1 = _rsasign_signStringWithSHA1;
	RSAKey.prototype.signStringWithSHA256 = _rsasign_signStringWithSHA256;
	RSAKey.prototype.sign = _rsasign_signString;
	RSAKey.prototype.signWithSHA1 = _rsasign_signStringWithSHA1;
	RSAKey.prototype.signWithSHA256 = _rsasign_signStringWithSHA256;

	RSAKey.prototype.signWithMessageHashPSS = _rsasign_signWithMessageHashPSS;
	RSAKey.prototype.signStringPSS = _rsasign_signStringPSS;
	RSAKey.prototype.signPSS = _rsasign_signStringPSS;
	RSAKey.SALT_LEN_HLEN = -1;
	RSAKey.SALT_LEN_MAX = -2;

	RSAKey.prototype.verifyWithMessageHash = _rsasign_verifyWithMessageHash;
	RSAKey.prototype.verifyString = _rsasign_verifyString;
	RSAKey.prototype.verifyHexSignatureForMessage = _rsasign_verifyHexSignatureForMessage;
	RSAKey.prototype.verify = _rsasign_verifyString;
	RSAKey.prototype.verifyHexSignatureForByteArrayMessage = _rsasign_verifyHexSignatureForMessage;

	RSAKey.prototype.verifyWithMessageHashPSS = _rsasign_verifyWithMessageHashPSS;
	RSAKey.prototype.verifyStringPSS = _rsasign_verifyStringPSS;
	RSAKey.prototype.verifyPSS = _rsasign_verifyStringPSS;
	RSAKey.SALT_LEN_RECOVER = -2;

	/**
	 * @name RSAKey
	 * @class key of RSA public key algorithm
	 * @description Tom Wu's RSA Key class and extension
	 */

	module.exports = KJUR;
	module.exports.KEYUTIL = KEYUTIL;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ../~/buffer/index.js */ 1).Buffer))

/***/ },
/* 1 */
/*!****************************!*\
  !*** ../~/buffer/index.js ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(/*! base64-js */ 2)
	var ieee754 = __webpack_require__(/*! ieee754 */ 3)
	var isArray = __webpack_require__(/*! isarray */ 4)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ../~/buffer/index.js */ 1).Buffer, (function() { return this; }())))

/***/ },
/* 2 */
/*!*******************************!*\
  !*** ../~/base64-js/index.js ***!
  \*******************************/
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return (b64.length * 3 / 4) - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr((len * 3 / 4) - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0; i < l; i += 4) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 3 */
/*!*****************************!*\
  !*** ../~/ieee754/index.js ***!
  \*****************************/
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 4 */
/*!*****************************!*\
  !*** ../~/isarray/index.js ***!
  \*****************************/
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }
/******/ ])
});
;