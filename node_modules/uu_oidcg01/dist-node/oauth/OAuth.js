"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Discovery = require("../discovery/Discovery.js");

var _Discovery2 = _interopRequireDefault(_Discovery);

var _HttpClient = require("../util/HttpClient.js");

var _HttpClient2 = _interopRequireDefault(_HttpClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OAuth = function () {

  /**
   * @param options.serverUri
   * @param options.clientId
   */
  function OAuth(options) {
    _classCallCheck(this, OAuth);

    if (!options || !options.serverUri || !options.clientId) throw new Error("OAuth must be initialized with options containing serverUri and clientId.");
    this.options = options;
  }

  /**
   * @param parameters
   * @param parameters.subject_token
   * @param parameters.subject_token_type
   */


  _createClass(OAuth, [{
    key: "grantExchangeToken",
    value: function grantExchangeToken(parameters) {
      var _this = this;

      // https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-05#section-2
      // grant_type REQUIRED (hardcoded value)
      // resource OPTIONAL
      // audience OPTIONAL
      // scope OPTIONAL
      // requested_token_type OPTIONAL
      // subject_token REQUIRED
      // subject_token_type REQUIRED
      // actor_token OPTIONAL
      // actor_token_type OPTIONAL
      // want_composite OPTIONAL
      var params = parameters || {};
      if (!params.subject_token || !params.subject_token_type) throw new Error("OAuth.grantExchangeToken must be called with parameters subject_token and subject_token_type.");
      return _Discovery2.default.getMetadata(this.options.serverUri).then(function (metadata) {
        var urlParams = Object.assign({ requested_token_type: "urn:ietf:params:oauth:token-type:id_token" }, params, {
          client_id: _this.options.clientId,
          grant_type: "urn:ietf:params:oauth:grant-type:token-exchange"
        });
        var urlParamsParts = Object.keys(urlParams).filter(function (k) {
          return urlParams[k] != null;
        }).map(function (k) {
          return encodeURIComponent(k) + "=" + encodeURIComponent(urlParams[k] + "");
        });

        return _HttpClient2.default.post(metadata.token_endpoint, urlParamsParts.join("&"), function (xhr) {
          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        });
      });
    }
  }]);

  return OAuth;
}();

exports.default = OAuth;