"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  /**
   * Wraps Promise so that it can then be used in immediateThen function.
   */
  wrapForImmediateThen: function wrapForImmediateThen(promise) {
    promise.then(function (v) {
      return promise._immediateValue = v;
    }, function (e) {
      return promise._immediateError = e;
    });
    return promise;
  },

  /**
   * If promise has already been resolved, thenFn is called immediately (or catchFn in
   * case that the promise has been rejected). Otherwise thenFn and catchFn callbacks
   * are simply registered via promise.then(thenFn, catchFn).
   * 
   * Note that this works only on promises that were wrapped via #wrapForImmediateThen
   * function.
   * 
   * @return Return value of thenFn/catchFn (if invoked immediately) or promise.then(thenFn, catchFn).
   */
  immediateThen: function immediateThen(promise, thenFn, catchFn) {
    if ("_immediateValue" in promise) return typeof thenFn == "function" ? thenFn(promise._immediateValue) : promise._immediateValue;
    if ("_immediateError" in promise) {
      if (typeof catchFn == "function") return catchFn(promise._immediateError);
      throw promise._immediateError;
    }
    return promise.then(thenFn, catchFn);
  }
};