"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Dom = require("./util/Dom.js");

var _Dom2 = _interopRequireDefault(_Dom);

var _Discovery = require("./discovery/Discovery.js");

var _Discovery2 = _interopRequireDefault(_Discovery);

var _uu_appg01_core = require("uu_appg01_core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = _uu_appg01_core.Logging.LoggerFactory.get("UuOidc.SessionStateChangeNotifier");

var SessionStateChangeNotifier = function () {
  function SessionStateChangeNotifier(session) {
    _classCallCheck(this, SessionStateChangeNotifier);

    this.session = session;
    this._listeners = [];

    this._checkState = this._checkState.bind(this);
    this._onMessage = this._onMessage.bind(this);
    this._init();
  }

  _createClass(SessionStateChangeNotifier, [{
    key: "onStateChange",
    value: function onStateChange(listenerFn) {
      var _this = this;

      this._listeners.push(listenerFn);
      return function () {
        // return function for unregistering
        var idx = _this._listeners.indexOf(listenerFn);
        if (idx != -1) _this._listeners.splice(idx, 1);
        return idx != -1;
      };
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this._destroyed) return;
      this._destroyed = true;
      if (this._stateCheckInterval) clearInterval(this._stateCheckInterval);
      delete this._stateCheckInterval;
      window.removeEventListener("message", this._onMessage);
      this._listeners = [];
    }
  }, {
    key: "_init",
    value: function _init() {
      var _this2 = this;

      // add iframe with check_session_iframe URL
      _Dom2.default.domReady.then(function () {
        if (_this2._destroyed) return;
        return _Discovery2.default.getMetadata(_this2.session.serverUri).then(function (metadata) {
          var iframeUrl = metadata.check_session_iframe;
          if (!iframeUrl) {
            console.error("The OpenID Connect server", _this2.session.serverUri, "doesn't support check_session_iframe (see", _Discovery2.default.getMetadataUri(_this2.session.serverUri), ").");
            return;
          }
          logger.debug("Creating iframe with check_session_iframe endpoint URL - " + iframeUrl);
          _this2._iframeTrustedOrigin = getOrigin(iframeUrl);
          var iframe = _this2._iframe = document.createElement("iframe");
          iframe.style.cssText = "position: absolute;top: -300px; left: -300px; width: 200px; height: 200px; opacity: 0;";
          iframe.tabIndex = "-1";
          iframe.onload = function () {
            return _this2._stateCheckAllowed = true;
          };
          iframe.src = iframeUrl;
          document.body.appendChild(iframe);

          // add message handler for processing messages from the iframe
          window.addEventListener("message", _this2._onMessage);

          // start checking
          _this2._stateCheckInterval = setInterval(_this2._checkState, _this2.session.sessionCheckInterval * 1000);
        });
      });
    }
  }, {
    key: "_onMessage",
    value: function _onMessage(e) {
      logger.debug("Received message from " + e.origin + ": " + e.data);
      if (!this._iframe || e.source !== this._iframe.contentWindow || e.origin !== this._iframeTrustedOrigin) return;
      if (e.data === "changed") {
        logger.info("Received session state change notification from OIDC iframe (message: '" + e.data + "').");
        this._listeners.forEach(function (fn) {
          return fn();
        });
      }
    }
  }, {
    key: "_checkState",
    value: function _checkState() {
      if (!this._stateCheckAllowed || !this._iframe) return;
      var authResponse = (this.session._loginCtx || {}).authResponse;
      if (!authResponse) return; // we have no session state (and we don't really need to get info that the user became logged in due to login in different tab)
      if (!authResponse.session_state) return; // unknown session state (e.g. current token was provided directly, instead of via login in browser tab)

      var query = this.session.clientId + " " + authResponse.session_state;
      logger.debug("Querying session state change from OIDC iframe. Query: " + query);
      this._iframe.contentWindow.postMessage(query, this._iframeTrustedOrigin);
    }
  }]);

  return SessionStateChangeNotifier;
}();

exports.default = SessionStateChangeNotifier;


function getOrigin(absUrl) {
  return (absUrl || "").match(/^(https?:\/\/[^\/]+).*$/)[1] || null;
}